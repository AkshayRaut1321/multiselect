{
  "id": "guide/property-configuration",
  "title": "Property Configuration:-",
  "contents": "\n<div class=\"content\">\n<h1 id=\"property-configuration-\">Property Configuration:-<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-configuration#property-configuration-\"><i class=\"material-icons\">link</i></a></h1>\n<p>There are various property binding options that are applicable, you can configure them as you need.</p>\n<h2 id=\"general-\">General:-<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-configuration#general-\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><code>isOpen</code>: <strong>Boolean?</strong> - Use <code>isOpen</code> property if you want to programatically control multiselect dropdown behaviour. In case you haven't passed it we manage <code>isOpen</code> flag internally to control multiselect state. </p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  [isOpen]=”true”>\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n<li>\n<p><code>disabled</code>: <strong>Boolean?</strong> -\nThere are two ways to disable multiselect. You can either disable option(s) from an array or you can set disabled property to be true for multiselect component, which makes thorough dropdown disabled. So it cannot be clicked and cannot be opened.\nTo disable particular option or group, place <code>disabled: true</code> option on desired element or group.</p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  [disabled]=\"true”>\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n<li>\n<p><code>options</code>: <strong>any[]</strong> –\nThis property serves as options/datasource to muliselect which being rendered by mulitiselect. There is a predefined format for data to be given as input to mutiselect which is expained in simple multiselect guide, grouping options guide. And if the data is not in specified format, you can also pass <code>propertyMap</code> which links the input data to muliselect format data which is explained here:                     </p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\">\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n<li>\n<p><code>optionsTemplate</code>: <strong>TemplateRef&#x3C; any >?</strong> –\nUse this property binding to pass the custom template to displayed by multiselect while rendering options. For example, while showing the list of countries, you can pass your own customize template which should display the name of country with its flag on right side. The below snippet demonstrate the usage of customTemplate option.</p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\">\n    &#x3C;ng-template let-option=\"option\">\n      &#x3C;span>\n        &#x3C;img  src=\"../path/to/img\" />\n        {{option.name}}\n      &#x3C;/span>\t\n    &#x3C;/ng-template>\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n</ul>\n<h2 id=\"styling--\">Styling :-<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-configuration#styling--\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><code>showMaxLabels</code>: <strong>number?</strong> -\nSet value to configure how much selected values to be shown on dropdown. If selected values count exceeds <code>showMaxLabes</code>, dropdown will show ellipses(...) after text.</p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect\n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  showMaxLables = \"3\">\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n<li>\n<p><code>theme</code>: <strong>String?</strong> -\nUse this property to specify the theme for multiselect. There are two themes currently supported ‘material’ and ‘bootstrap’. If u select <code>material</code> you can also specify the color for mutiselect from the angular material theme or any valid css color.</p>\n</li>\n</ul>\n<p><em>Available Values</em>: ‘material’ | ‘bootstrap’  </p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  theme=”material”>\n&#x3C;/ngx-multiselect>\n</code-example>\n<ul>\n<li><code>color</code>: <strong>String?</strong> -\nUse this property to specify the color for multiselect if you selected material theme. You can specify the color from angular material theme or any valid  css color.</li>\n</ul>\n<p><em>Available Values</em>: any valid css color</p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  theme=”material”\n  color=\"blue\">\n&#x3C;/ngx-multiselect>\n</code-example>\n<h2 id=\"grouping-property-configuration-\">Grouping Property Configuration :<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-configuration#grouping-property-configuration-\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p><code>groupedProperty</code>: <strong>String</strong> -\nUse this property to specify property name by which multiselect should create the groups.  </p>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  [groupedProperty]=”’category’”>\n&#x3C;/ngx-multiselect>\n</code-example>\n<code-example language=\"js\">\noptions = [{\n    \"id\": 1,\n    \"name\": \"Test 1\",\n    \"category\": \"Cat 1\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Test 2\",\n    \"category\": \"Cat 1\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Test 3\",\n    \"category\": \"Cat 2\",\n    \"disabled\": true\n  }\n];\n</code-example>\n</li>\n<li>\n<p><code>propertyMap</code>: <strong>any</strong> -\nMultiselect options needs data in predefined format as below which should have keys like id, name, category, disabled etc as below.  </p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"category\": \"Cat 2\",\n  \"disabled\": true\n}\n</code-example>\n<p>  If  the data is not present in the expected format, use <code>propertyMap</code> property binding and provide the desired <code>propertyMap</code> collection. This will be used to map the key of your <code>json</code> to the key of each item of collection. For eg. the data is</p>\n<code-example language=\"js\">\n{\n  \"empId\": 3,\n  \"empName\": \"Test 3\",\n  \"empCategory\": \"Cat 2\",\n  \"empActive\": true\n}\n</code-example>\n<p>  The propertyMap should be</p>\n<code-example language=\"js\">\npropertyMap = {\n  \"empId\" : \"id\",\n  \"empName\" : \"name\",\n  \"empCategory\" : \"category\",\n  \"empActive\" : \"disabled\"\n}\n</code-example>\n<p>  So, the multiselect converts the propertyMap to its own format as </p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"category\": \"Cat 2\",\n  \"disabled\": true\n}\n</code-example>\n<code-example language=\"html\">\n&#x3C;ngx-multiselect \n  [(ngModel)]=\"selectedOption\"\n  [options]=\"options\"\n  [propertyMap]=”propertyMap”>\n&#x3C;/ngx-multiselect>\n</code-example>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/property-configuration#general-\n - guide/property-configuration#grouping-property-configuration-\n - guide/property-configuration#property-configuration-\n - guide/property-configuration#styling--\n-->"
}