{
  "id": "guide/observable",
  "title": "Observable",
  "contents": "\n<div class=\"content\">\n<h1 id=\"observable\">Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#observable\"><i class=\"material-icons\">link</i></a></h1>\n<p>Multiselect works pretty well with observables as it does with data collection. There are two ways to use observable data in angular.\n1. Manual Subscription\n2. Async Pipe</p>\n<p><ms-observable-async></ms-observable-async></p>\n<code-tabs>\n  <code-pane title=\"app/observable-async.component.ts\" path=\"observable/src/app/observable-async.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ms-observable-async',\n  templateUrl: './observable-async.component.html'\n})\nexport class ObservableAsyncComponent implements OnInit {\n\n  observableOptions;\n  selectedOptions;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.selectedOptions = new FormControl([\n      { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n      { \"id\": 3, \"name\": \"Chelsea F.C.\" }\n    ]);\n\n    this.observableOptions = new Observable((observer) => {\n      observer.next([\n        { \"id\": 1, \"name\": \"Manchester United\" }, \n        { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n        { \"id\": 3, \"name\": \"Chelsea F.C.\" },\n        { \"id\": 4, \"name\": \"Arsenal F.C.\" },\n        { \"id\": 5, \"name\": \"FC Barcelona\" }\n      ]);\n    });\n\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/observable-async.component.html\" path=\"observable/src/app/observable-async.component.html\">\n&#x3C;p>Observable Async Demo&#x3C;/p>\n&#x3C;ngx-multiselect\n  [formControl]=\"selectedOptions\"\n  ngDefaultControl\n  [options]=\"observableOptions | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"1-manual-subscription\">1. Manual subscription:<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#1-manual-subscription\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can retrieve a data from observable but when its come to providing that dataset to multiselect, you would give it directly once you recieved its value. That can happen by subscribing to an observable, collect data from it and pass the collected data as <code>Input</code> binding to multiselect. </p>\n<h3 id=\"demo\">Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#demo\"><i class=\"material-icons\">link</i></a></h3>\n<p><ms-observable-async-update></ms-observable-async-update></p>\n<code-tabs>\n  <code-pane title=\"app/observable-dynamic-update.component.ts\" path=\"observable/src/app/observable-dynamic-update.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ms-observable-dynamic-update',\n  templateUrl: './observable-dynamic-update.component.html'\n})\nexport class ObservableDynamicUpdateComponent implements OnInit {\n\n  observableOptions;\n  observableOptionsObserver;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.observableOptions = new Observable((observer) => {\n      this.observableOptionsObserver = observer;\n    });\n  }\n\n  populateDropdown(){\n    this.observableOptionsObserver.next([\n      { \"id\": 1, \"name\": \"Manchester United\" },\n      { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n      { \"id\": 3, \"name\": \"Chelsea F.C.\" },\n      { \"id\": 4, \"name\": \"Arsenal F.C.\"},\n      { \"id\": 5, \"name\": \"FC Barcelona\" }\n  ]);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/observable-dynamic-update.component.html\" path=\"observable/src/app/observable-dynamic-update.component.html\">\n&#x3C;p>Observable Dynamic Update Demo&#x3C;/p>\n&#x3C;ngx-multiselect\n  ngDefaultControl\n  [options]=\"observableOptions | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n&#x3C;button (click)=\"populateDropdown()\">Click Here to populate dropdown&#x3C;/button>\n\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"2-using-async-pipe\">2. Using async pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#2-using-async-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes it could happen dataset would be an observable itself, that time you can directly pass Input binding data as an observable with <code>async</code> pipe. The task of subscribing and unsubscribing will be taken care by Angular framework.</p>\n<h3 id=\"demo-1\">Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#demo-1\"><i class=\"material-icons\">link</i></a></h3>\n<p><ms-observable-async-service></ms-observable-async-service></p>\n<code-tabs>\n  <code-pane title=\"app/observable-async-service.component.ts\" path=\"observable/src/app/observable-async-service.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { AppService } from '../../../app.service';\n\n@Component({\n  selector: 'ms-observable-async-service',\n  templateUrl: './observable-async-service.component.html'\n})\nexport class ObservableAsyncServiceComponent implements OnInit {\n\n  selectedOptions;\n  options;\n\n  constructor(private _appService: AppService) { }\n\n  ngOnInit() {\n    this.selectedOptions = [{\n      \"id\": 2,\n      \"name\": \"Liverpool F.C.\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Chelsea F.C.\"\n    }];\n    this.options = this._appService.getObservableOptions();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane title=\"app/observable-async-service.component.html\" path=\"observable/src/app/observable-async-service.component.html\">\n\n&#x3C;p>Select your favourite teams from the following&#x3C;/p>\n&#x3C;ngx-multiselect\n  ngDefaultControl\n  [(ngModel)]=\"selectedOptions\"\n  [options]=\"options | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"tldr\">TLDR;<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#tldr\"><i class=\"material-icons\">link</i></a></h2>\n<p>Changing the data collection value in between would reflect directly inside options. If you want to dynamically update the multiselct, you can do it just by creating the whole new copy of json array and pass the whole array to observer next function as shown below.</p>\n<h3 id=\"demo--pending\">Demo:- Pending<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observable#demo--pending\"><i class=\"material-icons\">link</i></a></h3>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/observable#1-manual-subscription\n - guide/observable#2-using-async-pipe\n - guide/observable#demo\n - guide/observable#demo--pending\n - guide/observable#demo-1\n - guide/observable#observable\n - guide/observable#tldr\n-->"
}