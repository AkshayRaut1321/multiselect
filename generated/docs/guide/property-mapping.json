{
  "id": "guide/property-mapping",
  "title": "Property Mapping:",
  "contents": "\n<div class=\"content\">\n<h1 id=\"property-mapping\">Property Mapping:<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-mapping#property-mapping\"><i class=\"material-icons\">link</i></a></h1>\n<p>Multiselect options needs data in predefined format, its format looks like below.</p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"category\": \"Cat 2\",\n  \"disabled\": true\n}\n</code-example>\n<p>If  the data is not present in the exact format, you can use <code>propertyMap</code> which will be used to transform your current dataset to the expected object structure. For example, the data is</p>\n<code-example language=\"js\">\n{\n  \"empId\": 3,\n  \"empName\": \"Test 3\",\n  \"empCategory\": \"Cat 2\",\n  \"empActive\": true\n}\n</code-example>\n<p>The <code>propertyMap</code> should look like below</p>\n<code-example language=\"js\">\npropertyMap = {\n  \"empId\" : \"id\",\n  \"empName\" : \"name\",\n  \"empCategory\" : \"category\",\n  \"empActive\" : \"disabled\"\n}\n</code-example>\n<p>So, the multiselect converts the <code>propertyMap</code> to its understandable format as below </p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"category\": \"Cat 2\",\n  \"disabled\": true\n}\n</code-example>\n<h2 id=\"demo\">Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-mapping#demo\"><i class=\"material-icons\">link</i></a></h2>\n<p><ms-property-map></ms-property-map></p>\n<code-tabs>\n  <code-pane title=\"app/property-map.component.ts\" path=\"property-map/src/app/property-map.component.ts\">\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ms-property-map',\n  templateUrl: './property-map.component.html'\n})\nexport class PropertyMapComponent implements OnInit {\n  options;\n\n  propertyMap = {\n    teamId : \"id\",\n    teamName : \"name\"\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.options = [{\n      \"teamId\": 1,\n      \"teamName\": \"Manchester United\"\n    },\n    {\n      \"teamId\": 2,\n      \"teamName\": \"Liverpool F.C.\"\n    },\n    {\n      \"teamId\": 3,\n      \"teamName\": \"Chelsea F.C.\"\n    },\n    {\n      \"teamId\": 4,\n      \"teamName\": \"Arsenal F.C.\"\n    },\n    {\n      \"teamId\": 5,\n      \"teamName\": \"FC Barcelona\"\n    }];\n\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/property-map.component.html\" path=\"property-map/src/app/property-map.component.html\">\n&#x3C;ngx-multiselect\n  [propertyMap]=\"propertyMap\"\n  [multiple]=\"true\"\n  [options]=\"options\"\n  multiple=\"true\"\n  ngDefaultControl\n>\n&#x3C;/ngx-multiselect>\n\n\n\n</code-pane>\n</code-tabs>\n<p>But sometimes it may happen you have data in exact format as shown below but only the key to access category is different, in that case passing the key string to <code>groupedProperty</code> input will also work fine.</p>\n<p>Demo showing passing only grouped property to array of json of teams because teams will have <code>team</code> key which will act as category for the particular team.</p>\n<h3 id=\"demo--pending-above\">Demo- Pending above.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-mapping#demo--pending-above\"><i class=\"material-icons\">link</i></a></h3>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/property-mapping#demo\n - guide/property-mapping#demo--pending-above\n - guide/property-mapping#property-mapping\n-->"
}