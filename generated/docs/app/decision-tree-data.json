{
  "2670": {
    "id": "2670",
    "label": "I want to output the values from either of them",
    "options": [
      "137c"
    ]
  },
  "2687": {
    "id": "2687",
    "label": "concatMap"
  },
  "2751": {
    "id": "2751",
    "label": "fromEvent"
  },
  "2865": {
    "id": "2865",
    "label": "supporting Node.js callback style API",
    "options": [
      "35d0"
    ]
  },
  "3457": {
    "id": "3457",
    "label": "scan"
  },
  "3584": {
    "id": "3584",
    "label": "and convert to a Promise",
    "options": [
      "4b41"
    ]
  },
  "3883": {
    "id": "3883",
    "label": "share"
  },
  "3988": {
    "id": "3988",
    "label": "switchMapTo"
  },
  "4292": {
    "id": "4292",
    "label": "I want to re-subscribe",
    "options": [
      "4b84",
      "0962"
    ]
  },
  "4544": {
    "id": "4544",
    "label": "using a conventional Subject",
    "options": [
      "ddba",
      "9e9b"
    ]
  },
  "4610": {
    "id": "4610",
    "label": "publishBehavior"
  },
  "5285": {
    "id": "5285",
    "label": "in batches of a particular size",
    "options": [
      "3b48",
      "147e"
    ]
  },
  "5501": {
    "id": "5501",
    "label": "I want to allow some values to pass",
    "options": [
      "efa1",
      "a6ab",
      "2a40",
      "eb60",
      "d639"
    ]
  },
  "5860": {
    "id": "5860",
    "label": "pairwise"
  },
  "6035": {
    "id": "6035",
    "label": "over prefined values given as arguments",
    "options": [
      "6241"
    ]
  },
  "6108": {
    "id": "6108",
    "label": "which is built on demand when subscribed",
    "options": [
      "acf0"
    ]
  },
  "6241": {
    "id": "6241",
    "label": "of"
  },
  "6550": {
    "id": "6550",
    "label": "I want to subscribe to each in order",
    "options": [
      "0c9b"
    ]
  },
  "6568": {
    "id": "6568",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "7148"
    ]
  },
  "6761": {
    "id": "6761",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7cf6"
    ]
  },
  "6769": {
    "id": "6769",
    "label": "ignoreElements"
  },
  "6891": {
    "id": "6891",
    "label": "using an AsyncSubject",
    "options": [
      "83f5"
    ]
  },
  "6898": {
    "id": "6898",
    "label": "immediately",
    "options": [
      "5a63"
    ]
  },
  "7148": {
    "id": "7148",
    "label": "debounce"
  },
  "7362": {
    "id": "7362",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "34ba"
    ]
  },
  "7370": {
    "id": "7370",
    "label": "subscribeOn"
  },
  "7701": {
    "id": "7701",
    "label": "until the Observable completes",
    "options": [
      "709b",
      "3584"
    ]
  },
  "7749": {
    "id": "7749",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2687"
    ]
  },
  "7784": {
    "id": "7784",
    "label": "until another Observable emits a value",
    "options": [
      "d584"
    ]
  },
  "8105": {
    "id": "8105",
    "label": "that occur too frequently",
    "options": [
      "dab9",
      "acef",
      "0d45"
    ]
  },
  "8233": {
    "id": "8233",
    "label": "I want to delay the emissions",
    "options": [
      "bf53",
      "87c5"
    ]
  },
  "8283": {
    "id": "8283",
    "label": "windowTime"
  },
  "8453": {
    "id": "8453",
    "label": "and emit the group as an array",
    "options": [
      "3ccf"
    ]
  },
  "8549": {
    "id": "8549",
    "label": "I have one existing Observable, and",
    "options": [
      "b431",
      "8ae8",
      "f025",
      "5501",
      "d549",
      "6f88",
      "2f5a",
      "dd4a",
      "051e",
      "e8a1",
      "4d0f",
      "8233",
      "e408",
      "2acb",
      "431c",
      "a0ef",
      "69d3",
      "6c60",
      "533b",
      "76c0",
      "f6ab"
    ]
  },
  "8808": {
    "id": "8808",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7fe3"
    ]
  },
  "9838": {
    "id": "9838",
    "label": "where time windows are determined by a time duration",
    "options": [
      "601e"
    ]
  },
  "6f96": {
    "id": "6f96",
    "label": "mapTo"
  },
  "53ac": {
    "id": "53ac",
    "label": "to be a constant value",
    "options": [
      "6f96"
    ]
  },
  "5db5": {
    "id": "5db5",
    "label": "map"
  },
  "80eb": {
    "id": "80eb",
    "label": "to be a value calculated through a formula",
    "options": [
      "5db5"
    ]
  },
  "b431": {
    "id": "b431",
    "label": "I want to change each emitted value",
    "options": [
      "53ac",
      "80eb"
    ]
  },
  "3a17": {
    "id": "3a17",
    "label": "pluck"
  },
  "8ae8": {
    "id": "8ae8",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "3a17"
    ]
  },
  "a2fb": {
    "id": "a2fb",
    "label": "tap"
  },
  "f025": {
    "id": "f025",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "a2fb"
    ]
  },
  "efa8": {
    "id": "efa8",
    "label": "filter"
  },
  "efa1": {
    "id": "efa1",
    "label": "based on custom logic",
    "options": [
      "efa8"
    ]
  },
  "b6c5": {
    "id": "b6c5",
    "label": "first"
  },
  "9d5a": {
    "id": "9d5a",
    "label": "and only the first value",
    "options": [
      "b6c5"
    ]
  },
  "ce4b": {
    "id": "ce4b",
    "label": "take"
  },
  "b55e": {
    "id": "b55e",
    "label": "based on a given amount",
    "options": [
      "ce4b"
    ]
  },
  "ea61": {
    "id": "ea61",
    "label": "takeWhile"
  },
  "34e4": {
    "id": "34e4",
    "label": "based on custom logic",
    "options": [
      "ea61"
    ]
  },
  "a6ab": {
    "id": "a6ab",
    "label": "if they are at the start of the Observable",
    "options": [
      "9d5a",
      "b55e",
      "34e4"
    ]
  },
  "93a8": {
    "id": "93a8",
    "label": "elementAt"
  },
  "2a40": {
    "id": "2a40",
    "label": "if they are exactly the n-th emission",
    "options": [
      "93a8"
    ]
  },
  "8af7": {
    "id": "8af7",
    "label": "last"
  },
  "fd9b": {
    "id": "fd9b",
    "label": "and only the last value",
    "options": [
      "8af7"
    ]
  },
  "b873": {
    "id": "b873",
    "label": "takeLast"
  },
  "f2df": {
    "id": "f2df",
    "label": "based on a given amount",
    "options": [
      "b873"
    ]
  },
  "eb60": {
    "id": "eb60",
    "label": "if they are at the end of the Observable",
    "options": [
      "fd9b",
      "f2df"
    ]
  },
  "fedb": {
    "id": "fedb",
    "label": "takeUntil"
  },
  "d639": {
    "id": "d639",
    "label": "until another Observable emits a value",
    "options": [
      "fedb"
    ]
  },
  "d5be": {
    "id": "d5be",
    "label": "altogether",
    "options": [
      "6769"
    ]
  },
  "1e77": {
    "id": "1e77",
    "label": "skip"
  },
  "32b9": {
    "id": "32b9",
    "label": "based on a given amount",
    "options": [
      "1e77"
    ]
  },
  "a6ea": {
    "id": "a6ea",
    "label": "skipWhile"
  },
  "83b4": {
    "id": "83b4",
    "label": "based on custom logic",
    "options": [
      "a6ea"
    ]
  },
  "699b": {
    "id": "699b",
    "label": "from the start of the Observable",
    "options": [
      "32b9",
      "83b4"
    ]
  },
  "708e": {
    "id": "708e",
    "label": "skipLast"
  },
  "e98c": {
    "id": "e98c",
    "label": "from the end of the Observable",
    "options": [
      "708e"
    ]
  },
  "d584": {
    "id": "d584",
    "label": "skipUntil"
  },
  "101d": {
    "id": "101d",
    "label": "distinctUntilChanged"
  },
  "f747": {
    "id": "f747",
    "label": "emitted just before the current value",
    "options": [
      "101d"
    ]
  },
  "9a97": {
    "id": "9a97",
    "label": "distinct"
  },
  "1d84": {
    "id": "1d84",
    "label": "emitted some time in the past",
    "options": [
      "9a97"
    ]
  },
  "0034": {
    "id": "0034",
    "label": "according to value equality",
    "options": [
      "f747",
      "1d84"
    ]
  },
  "0c80": {
    "id": "0c80",
    "label": "distinctUntilKeyChanged"
  },
  "ffe7": {
    "id": "ffe7",
    "label": "emitted just before the current value",
    "options": [
      "0c80"
    ]
  },
  "08cd": {
    "id": "08cd",
    "label": "according to a key or object property",
    "options": [
      "ffe7"
    ]
  },
  "5ab2": {
    "id": "5ab2",
    "label": "that match some previous value",
    "options": [
      "0034",
      "08cd"
    ]
  },
  "0bf6": {
    "id": "0bf6",
    "label": "throttle"
  },
  "732f": {
    "id": "732f",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "0bf6"
    ]
  },
  "e900": {
    "id": "e900",
    "label": "throttleTime"
  },
  "0360": {
    "id": "0360",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e900"
    ]
  },
  "dab9": {
    "id": "dab9",
    "label": "by emitting the first value in each time window",
    "options": [
      "732f",
      "0360"
    ]
  },
  "8c09": {
    "id": "8c09",
    "label": "audit"
  },
  "483f": {
    "id": "483f",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "8c09"
    ]
  },
  "601e": {
    "id": "601e",
    "label": "auditTime"
  },
  "acef": {
    "id": "acef",
    "label": "by emitting the last value in each time window",
    "options": [
      "483f",
      "9838"
    ]
  },
  "0087": {
    "id": "0087",
    "label": "debounceTime"
  },
  "2ddb": {
    "id": "2ddb",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "0087"
    ]
  },
  "0d45": {
    "id": "0d45",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "6568",
      "2ddb"
    ]
  },
  "d549": {
    "id": "d549",
    "label": "I want to ignore values",
    "options": [
      "d5be",
      "699b",
      "e98c",
      "7784",
      "5ab2",
      "8105"
    ]
  },
  "b45c": {
    "id": "b45c",
    "label": "reduce"
  },
  "7ff1": {
    "id": "7ff1",
    "label": "and only output the final computed value",
    "options": [
      "b45c"
    ]
  },
  "95dc": {
    "id": "95dc",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "3457"
    ]
  },
  "4ec4": {
    "id": "4ec4",
    "label": "mergeScan"
  },
  "daad": {
    "id": "daad",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "4ec4"
    ]
  },
  "6f88": {
    "id": "6f88",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "7ff1",
      "95dc",
      "daad"
    ]
  },
  "dc2e": {
    "id": "dc2e",
    "label": "materialize"
  },
  "5f5f": {
    "id": "5f5f",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "dc2e"
    ]
  },
  "66ee": {
    "id": "66ee",
    "label": "timeInterval"
  },
  "96ed": {
    "id": "96ed",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "66ee"
    ]
  },
  "2f5a": {
    "id": "2f5a",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "5f5f",
      "96ed"
    ]
  },
  "b4b3": {
    "id": "b4b3",
    "label": "timeout"
  },
  "82a5": {
    "id": "82a5",
    "label": "I want to throw an error",
    "options": [
      "b4b3"
    ]
  },
  "68c2": {
    "id": "68c2",
    "label": "timeoutWith"
  },
  "21e5": {
    "id": "21e5",
    "label": "I want to switch to another Observable",
    "options": [
      "68c2"
    ]
  },
  "dd4a": {
    "id": "dd4a",
    "label": "after a period of inactivity",
    "options": [
      "82a5",
      "21e5"
    ]
  },
  "d5db": {
    "id": "d5db",
    "label": "single"
  },
  "051e": {
    "id": "051e",
    "label": "I want to ensure there is only one value",
    "options": [
      "d5db"
    ]
  },
  "da64": {
    "id": "da64",
    "label": "count"
  },
  "e8a1": {
    "id": "e8a1",
    "label": "I want to know how many values it emits",
    "options": [
      "da64"
    ]
  },
  "c87e": {
    "id": "c87e",
    "label": "startWith"
  },
  "4d0f": {
    "id": "4d0f",
    "label": "I want to prepend one value",
    "options": [
      "c87e"
    ]
  },
  "b571": {
    "id": "b571",
    "label": "delay"
  },
  "bf53": {
    "id": "bf53",
    "label": "based on a given amount of time",
    "options": [
      "b571"
    ]
  },
  "29fc": {
    "id": "29fc",
    "label": "delayWhen"
  },
  "87c5": {
    "id": "87c5",
    "label": "based on the emissions of another Observable",
    "options": [
      "29fc"
    ]
  },
  "bdda": {
    "id": "bdda",
    "label": "toArray"
  },
  "709b": {
    "id": "709b",
    "label": "and convert to an array",
    "options": [
      "bdda"
    ]
  },
  "4b41": {
    "id": "4b41",
    "label": "Observable",
    "method": "toPromise"
  },
  "a5db": {
    "id": "a5db",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "5860"
    ]
  },
  "063d": {
    "id": "063d",
    "label": "partition"
  },
  "71bf": {
    "id": "71bf",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "063d"
    ]
  },
  "b232": {
    "id": "b232",
    "label": "bufferCount"
  },
  "3b48": {
    "id": "3b48",
    "label": "and emit the group as an array",
    "options": [
      "b232"
    ]
  },
  "7de7": {
    "id": "7de7",
    "label": "windowCount"
  },
  "147e": {
    "id": "147e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7de7"
    ]
  },
  "ed90": {
    "id": "ed90",
    "label": "bufferTime"
  },
  "768d": {
    "id": "768d",
    "label": "and emit the group as an array",
    "options": [
      "ed90"
    ]
  },
  "22de": {
    "id": "22de",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8283"
    ]
  },
  "ea2b": {
    "id": "ea2b",
    "label": "based on time",
    "options": [
      "768d",
      "22de"
    ]
  },
  "d643": {
    "id": "d643",
    "label": "buffer"
  },
  "b26a": {
    "id": "b26a",
    "label": "and emit the group as an array",
    "options": [
      "d643"
    ]
  },
  "e465": {
    "id": "e465",
    "label": "window"
  },
  "4bcc": {
    "id": "4bcc",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e465"
    ]
  },
  "688a": {
    "id": "688a",
    "label": "until another Observable emits",
    "options": [
      "b26a",
      "4bcc"
    ]
  },
  "eaea": {
    "id": "eaea",
    "label": "bufferWhen"
  },
  "644f": {
    "id": "644f",
    "label": "and emit the group as an array",
    "options": [
      "eaea"
    ]
  },
  "856b": {
    "id": "856b",
    "label": "windowWhen"
  },
  "00f8": {
    "id": "00f8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "856b"
    ]
  },
  "9ba2": {
    "id": "9ba2",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "644f",
      "00f8"
    ]
  },
  "3ccf": {
    "id": "3ccf",
    "label": "bufferToggle"
  },
  "7cf6": {
    "id": "7cf6",
    "label": "windowToggle"
  },
  "c2d4": {
    "id": "c2d4",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "8453",
      "6761"
    ]
  },
  "3bac": {
    "id": "3bac",
    "label": "groupBy"
  },
  "9b0d": {
    "id": "9b0d",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "3bac"
    ]
  },
  "e408": {
    "id": "e408",
    "label": "I want to group the values",
    "options": [
      "7701",
      "a5db",
      "71bf",
      "5285",
      "ea2b",
      "688a",
      "9ba2",
      "c2d4",
      "9b0d"
    ]
  },
  "a849": {
    "id": "a849",
    "label": "mergeMapTo"
  },
  "63d1": {
    "id": "63d1",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a849"
    ]
  },
  "c77d": {
    "id": "c77d",
    "label": "mergeMap"
  },
  "03de": {
    "id": "03de",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c77d"
    ]
  },
  "290a": {
    "id": "290a",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "63d1",
      "03de"
    ]
  },
  "7fe3": {
    "id": "7fe3",
    "label": "concatMapTo"
  },
  "917d": {
    "id": "917d",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "8808",
      "7749"
    ]
  },
  "a111": {
    "id": "a111",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3988"
    ]
  },
  "dc01": {
    "id": "dc01",
    "label": "switchMap"
  },
  "e4f5": {
    "id": "e4f5",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "dc01"
    ]
  },
  "94a0": {
    "id": "94a0",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "a111",
      "e4f5"
    ]
  },
  "34ba": {
    "id": "34ba",
    "label": "exhaustMap"
  },
  "1c4e": {
    "id": "1c4e",
    "label": "expand"
  },
  "3a48": {
    "id": "3a48",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "1c4e"
    ]
  },
  "2acb": {
    "id": "2acb",
    "label": "I want to start a new Observable for each value",
    "options": [
      "290a",
      "917d",
      "94a0",
      "7362",
      "3a48"
    ]
  },
  "518b": {
    "id": "518b",
    "label": "pipe"
  },
  "431c": {
    "id": "431c",
    "label": "I want to perform custom operations",
    "options": [
      "518b"
    ]
  },
  "ddba": {
    "id": "ddba",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "3883"
    ]
  },
  "76f7": {
    "id": "76f7",
    "label": "publish"
  },
  "9e9b": {
    "id": "9e9b",
    "label": "and start it manually or imperatively",
    "options": [
      "76f7"
    ]
  },
  "03f1": {
    "id": "03f1",
    "label": "using a BehaviorSubject",
    "options": [
      "4610"
    ]
  },
  "f732": {
    "id": "f732",
    "label": "publishReplay"
  },
  "147b": {
    "id": "147b",
    "label": "using a ReplaySubject",
    "options": [
      "f732"
    ]
  },
  "83f5": {
    "id": "83f5",
    "label": "publishLast"
  },
  "fcbd": {
    "id": "fcbd",
    "label": "multicast"
  },
  "4d86": {
    "id": "4d86",
    "label": "using a specific subject implementation",
    "options": [
      "fcbd"
    ]
  },
  "a0ef": {
    "id": "a0ef",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "4544",
      "03f1",
      "147b",
      "6891",
      "4d86"
    ]
  },
  "bd2b": {
    "id": "bd2b",
    "label": "catchError"
  },
  "507c": {
    "id": "507c",
    "label": "I want to start a new Observable",
    "options": [
      "bd2b"
    ]
  },
  "5a63": {
    "id": "5a63",
    "label": "retry"
  },
  "d157": {
    "id": "d157",
    "label": "retryWhen"
  },
  "c11d": {
    "id": "c11d",
    "label": "when another Observable emits",
    "options": [
      "d157"
    ]
  },
  "a575": {
    "id": "a575",
    "label": "I want to re-subscribe",
    "options": [
      "6898",
      "c11d"
    ]
  },
  "69d3": {
    "id": "69d3",
    "label": "when an error occurs",
    "options": [
      "507c",
      "a575"
    ]
  },
  "74e8": {
    "id": "74e8",
    "label": "repeat"
  },
  "4b84": {
    "id": "4b84",
    "label": "immediately",
    "options": [
      "74e8"
    ]
  },
  "8d36": {
    "id": "8d36",
    "label": "repeatWhen"
  },
  "0962": {
    "id": "0962",
    "label": "when another Observable emits",
    "options": [
      "8d36"
    ]
  },
  "f29d": {
    "id": "f29d",
    "label": "concat"
  },
  "2b37": {
    "id": "2b37",
    "label": "I want to start a new Observable",
    "options": [
      "f29d"
    ]
  },
  "6c60": {
    "id": "6c60",
    "label": "when it completes",
    "options": [
      "4292",
      "2b37"
    ]
  },
  "c661": {
    "id": "c661",
    "label": "finalize"
  },
  "533b": {
    "id": "533b",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c661"
    ]
  },
  "531f": {
    "id": "531f",
    "label": "that routes calls to subscribe",
    "options": [
      "7370"
    ]
  },
  "a071": {
    "id": "a071",
    "label": "observeOn"
  },
  "46e5": {
    "id": "46e5",
    "label": "that routes values to observers",
    "options": [
      "a071"
    ]
  },
  "76c0": {
    "id": "76c0",
    "label": "I want to change the scheduler",
    "options": [
      "531f",
      "46e5"
    ]
  },
  "8a0f": {
    "id": "8a0f",
    "label": "race"
  },
  "ca8b": {
    "id": "ca8b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8a0f"
    ]
  },
  "b92a": {
    "id": "b92a",
    "label": "merge"
  },
  "d86e": {
    "id": "d86e",
    "label": "I want to output the values from either of them",
    "options": [
      "b92a"
    ]
  },
  "0041": {
    "id": "0041",
    "label": "combineLatest"
  },
  "f1e2": {
    "id": "f1e2",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "0041"
    ]
  },
  "1dcc": {
    "id": "1dcc",
    "label": "withLatestFrom"
  },
  "fbf4": {
    "id": "fbf4",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "1dcc"
    ]
  },
  "93a5": {
    "id": "93a5",
    "label": "zip"
  },
  "7fc6": {
    "id": "7fc6",
    "label": "using each source value only once",
    "options": [
      "93a5"
    ]
  },
  "9d6c": {
    "id": "9d6c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "f1e2",
      "fbf4",
      "7fc6"
    ]
  },
  "f6ab": {
    "id": "f6ab",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "ca8b",
      "d86e",
      "9d6c"
    ]
  },
  "d82a": {
    "id": "d82a",
    "label": "race"
  },
  "fdc4": {
    "id": "fdc4",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "d82a"
    ]
  },
  "9ade": {
    "id": "9ade",
    "label": "forkJoin"
  },
  "0c1c": {
    "id": "0c1c",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "9ade"
    ]
  },
  "137c": {
    "id": "137c",
    "label": "merge"
  },
  "8f44": {
    "id": "8f44",
    "label": "combineLatest"
  },
  "e411": {
    "id": "e411",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "8f44"
    ]
  },
  "3e81": {
    "id": "3e81",
    "label": "zip"
  },
  "b92f": {
    "id": "b92f",
    "label": "using each source value only once",
    "options": [
      "3e81"
    ]
  },
  "629c": {
    "id": "629c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "e411",
      "b92f"
    ]
  },
  "0c9b": {
    "id": "0c9b",
    "label": "concat"
  },
  "79a4": {
    "id": "79a4",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "fdc4",
      "0c1c",
      "2670",
      "629c",
      "6550"
    ]
  },
  "afb7": {
    "id": "afb7",
    "label": "Observable",
    "method": "create"
  },
  "7edd": {
    "id": "7edd",
    "label": "using custom logic",
    "options": [
      "afb7"
    ]
  },
  "c880": {
    "id": "c880",
    "label": "generate"
  },
  "b1c0": {
    "id": "b1c0",
    "label": "using a state machine similar to a for loop",
    "options": [
      "c880"
    ]
  },
  "36ff": {
    "id": "36ff",
    "label": "throwError"
  },
  "585a": {
    "id": "585a",
    "label": "that throws an error",
    "options": [
      "36ff"
    ]
  },
  "6d7a": {
    "id": "6d7a",
    "label": "EMPTY"
  },
  "21dc": {
    "id": "21dc",
    "label": "that just completes, without emitting values",
    "options": [
      "6d7a"
    ]
  },
  "7e4f": {
    "id": "7e4f",
    "label": "NEVER"
  },
  "19c4": {
    "id": "19c4",
    "label": "that never emits anything",
    "options": [
      "7e4f"
    ]
  },
  "00fe": {
    "id": "00fe",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "2751"
    ]
  },
  "1faa": {
    "id": "1faa",
    "label": "fromEventPattern"
  },
  "cc36": {
    "id": "cc36",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "1faa"
    ]
  },
  "fe82": {
    "id": "fe82",
    "label": "from an existing source of events",
    "options": [
      "00fe",
      "cc36"
    ]
  },
  "229a": {
    "id": "229a",
    "label": "from"
  },
  "d761": {
    "id": "d761",
    "label": "from a Promise or an event source",
    "options": [
      "229a"
    ]
  },
  "b0ae": {
    "id": "b0ae",
    "label": "from"
  },
  "9a44": {
    "id": "9a44",
    "label": "over the values in an array",
    "options": [
      "b0ae"
    ]
  },
  "56b3": {
    "id": "56b3",
    "label": "range"
  },
  "92d1": {
    "id": "92d1",
    "label": "over values in a numeric range",
    "options": [
      "56b3"
    ]
  },
  "bc52": {
    "id": "bc52",
    "label": "that iterates",
    "options": [
      "9a44",
      "92d1",
      "6035"
    ]
  },
  "037c": {
    "id": "037c",
    "label": "interval"
  },
  "7c15": {
    "id": "7c15",
    "label": "regularly",
    "options": [
      "037c"
    ]
  },
  "99d9": {
    "id": "99d9",
    "label": "timer"
  },
  "0801": {
    "id": "0801",
    "label": "with an optional initial delay",
    "options": [
      "99d9"
    ]
  },
  "325d": {
    "id": "325d",
    "label": "that emits values on a timer",
    "options": [
      "7c15",
      "0801"
    ]
  },
  "acf0": {
    "id": "acf0",
    "label": "defer"
  },
  "5a87": {
    "id": "5a87",
    "label": "I want to create a new Observable",
    "options": [
      "7edd",
      "b1c0",
      "585a",
      "21dc",
      "19c4",
      "fe82",
      "d761",
      "bc52",
      "325d",
      "6108"
    ]
  },
  "cccd": {
    "id": "cccd",
    "label": "bindCallback"
  },
  "ab30": {
    "id": "ab30",
    "label": "supporting a conventional callback API",
    "options": [
      "cccd"
    ]
  },
  "35d0": {
    "id": "35d0",
    "label": "bindNodeCallback"
  },
  "4c0f": {
    "id": "4c0f",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "ab30",
      "2865"
    ]
  },
  "a900": {
    "id": "a900",
    "label": "I have no Observables yet, and",
    "options": [
      "5a87",
      "4c0f"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "8549",
      "79a4",
      "a900"
    ]
  }
}