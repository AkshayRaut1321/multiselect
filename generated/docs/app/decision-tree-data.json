{
  "1024": {
    "id": "1024",
    "label": "with an optional initial delay",
    "options": [
      "5fff"
    ]
  },
  "1329": {
    "id": "1329",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "614d",
      "846f",
      "8ef7",
      "091b",
      "f850"
    ]
  },
  "1373": {
    "id": "1373",
    "label": "takeUntil"
  },
  "2966": {
    "id": "2966",
    "label": "pluck"
  },
  "3024": {
    "id": "3024",
    "label": "bufferToggle"
  },
  "3102": {
    "id": "3102",
    "label": "catchError"
  },
  "3269": {
    "id": "3269",
    "label": "that emits values on a timer",
    "options": [
      "8b2a",
      "1024"
    ]
  },
  "3551": {
    "id": "3551",
    "label": "merge"
  },
  "3753": {
    "id": "3753",
    "label": "retryWhen"
  },
  "4277": {
    "id": "4277",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "eb6d"
    ]
  },
  "4280": {
    "id": "4280",
    "label": "zip"
  },
  "4402": {
    "id": "4402",
    "label": "and convert to an array",
    "options": [
      "9947"
    ]
  },
  "5083": {
    "id": "5083",
    "label": "timeInterval"
  },
  "5237": {
    "id": "5237",
    "label": "I want to start a new Observable",
    "options": [
      "2ce1"
    ]
  },
  "5366": {
    "id": "5366",
    "label": "concat"
  },
  "5369": {
    "id": "5369",
    "label": "of"
  },
  "5862": {
    "id": "5862",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "21c1"
    ]
  },
  "5922": {
    "id": "5922",
    "label": "I want to re-subscribe",
    "options": [
      "e2af",
      "95e7"
    ]
  },
  "6148": {
    "id": "6148",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "5c0e"
    ]
  },
  "6166": {
    "id": "6166",
    "label": "where time windows are determined by a time duration",
    "options": [
      "810e"
    ]
  },
  "6207": {
    "id": "6207",
    "label": "switchMapTo"
  },
  "6309": {
    "id": "6309",
    "label": "startWith"
  },
  "6453": {
    "id": "6453",
    "label": "I want to delay the emissions",
    "options": [
      "8c66",
      "6c75"
    ]
  },
  "6606": {
    "id": "6606",
    "label": "forkJoin"
  },
  "6628": {
    "id": "6628",
    "label": "count"
  },
  "6737": {
    "id": "6737",
    "label": "fromEvent"
  },
  "6878": {
    "id": "6878",
    "label": "windowWhen"
  },
  "7027": {
    "id": "7027",
    "label": "and emit the group as an array",
    "options": [
      "cfd5"
    ]
  },
  "7356": {
    "id": "7356",
    "label": "that routes calls to subscribe",
    "options": [
      "49da"
    ]
  },
  "7707": {
    "id": "7707",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a74e"
    ]
  },
  "7859": {
    "id": "7859",
    "label": "where time windows are determined by a time duration",
    "options": [
      "edb4"
    ]
  },
  "8986": {
    "id": "8986",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "1ef0"
    ]
  },
  "9371": {
    "id": "9371",
    "label": "retry"
  },
  "9485": {
    "id": "9485",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "bb85"
    ]
  },
  "9947": {
    "id": "9947",
    "label": "toArray"
  },
  "9969": {
    "id": "9969",
    "label": "concatMap"
  },
  "446e": {
    "id": "446e",
    "label": "mapTo"
  },
  "05ec": {
    "id": "05ec",
    "label": "to be a constant value",
    "options": [
      "446e"
    ]
  },
  "4ec0": {
    "id": "4ec0",
    "label": "map"
  },
  "068b": {
    "id": "068b",
    "label": "to be a value calculated through a formula",
    "options": [
      "4ec0"
    ]
  },
  "0707": {
    "id": "0707",
    "label": "I want to change each emitted value",
    "options": [
      "05ec",
      "068b"
    ]
  },
  "d8b4": {
    "id": "d8b4",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "2966"
    ]
  },
  "06da": {
    "id": "06da",
    "label": "tap"
  },
  "46e0": {
    "id": "46e0",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "06da"
    ]
  },
  "2aa4": {
    "id": "2aa4",
    "label": "filter"
  },
  "9a74": {
    "id": "9a74",
    "label": "based on custom logic",
    "options": [
      "2aa4"
    ]
  },
  "d947": {
    "id": "d947",
    "label": "first"
  },
  "337e": {
    "id": "337e",
    "label": "and only the first value",
    "options": [
      "d947"
    ]
  },
  "90d2": {
    "id": "90d2",
    "label": "take"
  },
  "3eae": {
    "id": "3eae",
    "label": "based on a given amount",
    "options": [
      "90d2"
    ]
  },
  "b540": {
    "id": "b540",
    "label": "takeWhile"
  },
  "f60a": {
    "id": "f60a",
    "label": "based on custom logic",
    "options": [
      "b540"
    ]
  },
  "5dc0": {
    "id": "5dc0",
    "label": "if they are at the start of the Observable",
    "options": [
      "337e",
      "3eae",
      "f60a"
    ]
  },
  "dbd5": {
    "id": "dbd5",
    "label": "elementAt"
  },
  "2e67": {
    "id": "2e67",
    "label": "if they are exactly the n-th emission",
    "options": [
      "dbd5"
    ]
  },
  "dfc0": {
    "id": "dfc0",
    "label": "last"
  },
  "857d": {
    "id": "857d",
    "label": "and only the last value",
    "options": [
      "dfc0"
    ]
  },
  "3fbe": {
    "id": "3fbe",
    "label": "takeLast"
  },
  "bd95": {
    "id": "bd95",
    "label": "based on a given amount",
    "options": [
      "3fbe"
    ]
  },
  "78b4": {
    "id": "78b4",
    "label": "if they are at the end of the Observable",
    "options": [
      "857d",
      "bd95"
    ]
  },
  "829e": {
    "id": "829e",
    "label": "until another Observable emits a value",
    "options": [
      "1373"
    ]
  },
  "babb": {
    "id": "babb",
    "label": "I want to allow some values to pass",
    "options": [
      "9a74",
      "5dc0",
      "2e67",
      "78b4",
      "829e"
    ]
  },
  "b4a5": {
    "id": "b4a5",
    "label": "ignoreElements"
  },
  "4c12": {
    "id": "4c12",
    "label": "altogether",
    "options": [
      "b4a5"
    ]
  },
  "82d5": {
    "id": "82d5",
    "label": "skip"
  },
  "c7c0": {
    "id": "c7c0",
    "label": "based on a given amount",
    "options": [
      "82d5"
    ]
  },
  "e34c": {
    "id": "e34c",
    "label": "skipWhile"
  },
  "d380": {
    "id": "d380",
    "label": "based on custom logic",
    "options": [
      "e34c"
    ]
  },
  "a864": {
    "id": "a864",
    "label": "from the start of the Observable",
    "options": [
      "c7c0",
      "d380"
    ]
  },
  "e160": {
    "id": "e160",
    "label": "skipLast"
  },
  "0f73": {
    "id": "0f73",
    "label": "from the end of the Observable",
    "options": [
      "e160"
    ]
  },
  "cb5b": {
    "id": "cb5b",
    "label": "skipUntil"
  },
  "59fd": {
    "id": "59fd",
    "label": "until another Observable emits a value",
    "options": [
      "cb5b"
    ]
  },
  "707d": {
    "id": "707d",
    "label": "distinctUntilChanged"
  },
  "3f8c": {
    "id": "3f8c",
    "label": "emitted just before the current value",
    "options": [
      "707d"
    ]
  },
  "a417": {
    "id": "a417",
    "label": "distinct"
  },
  "f88b": {
    "id": "f88b",
    "label": "emitted some time in the past",
    "options": [
      "a417"
    ]
  },
  "bf25": {
    "id": "bf25",
    "label": "according to value equality",
    "options": [
      "3f8c",
      "f88b"
    ]
  },
  "f889": {
    "id": "f889",
    "label": "distinctUntilKeyChanged"
  },
  "5cbb": {
    "id": "5cbb",
    "label": "emitted just before the current value",
    "options": [
      "f889"
    ]
  },
  "e0b1": {
    "id": "e0b1",
    "label": "according to a key or object property",
    "options": [
      "5cbb"
    ]
  },
  "1b00": {
    "id": "1b00",
    "label": "that match some previous value",
    "options": [
      "bf25",
      "e0b1"
    ]
  },
  "6c0a": {
    "id": "6c0a",
    "label": "throttle"
  },
  "aa03": {
    "id": "aa03",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "6c0a"
    ]
  },
  "810e": {
    "id": "810e",
    "label": "throttleTime"
  },
  "cbf6": {
    "id": "cbf6",
    "label": "by emitting the first value in each time window",
    "options": [
      "aa03",
      "6166"
    ]
  },
  "adc2": {
    "id": "adc2",
    "label": "audit"
  },
  "c48b": {
    "id": "c48b",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "adc2"
    ]
  },
  "edb4": {
    "id": "edb4",
    "label": "auditTime"
  },
  "6b44": {
    "id": "6b44",
    "label": "by emitting the last value in each time window",
    "options": [
      "c48b",
      "7859"
    ]
  },
  "fd0a": {
    "id": "fd0a",
    "label": "debounce"
  },
  "67b5": {
    "id": "67b5",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "fd0a"
    ]
  },
  "1ef0": {
    "id": "1ef0",
    "label": "debounceTime"
  },
  "625d": {
    "id": "625d",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "67b5",
      "8986"
    ]
  },
  "b8fb": {
    "id": "b8fb",
    "label": "that occur too frequently",
    "options": [
      "cbf6",
      "6b44",
      "625d"
    ]
  },
  "a45b": {
    "id": "a45b",
    "label": "I want to ignore values",
    "options": [
      "4c12",
      "a864",
      "0f73",
      "59fd",
      "1b00",
      "b8fb"
    ]
  },
  "fab9": {
    "id": "fab9",
    "label": "reduce"
  },
  "211d": {
    "id": "211d",
    "label": "and only output the final computed value",
    "options": [
      "fab9"
    ]
  },
  "1e65": {
    "id": "1e65",
    "label": "scan"
  },
  "b2d5": {
    "id": "b2d5",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "1e65"
    ]
  },
  "5c0e": {
    "id": "5c0e",
    "label": "mergeScan"
  },
  "a8b8": {
    "id": "a8b8",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "211d",
      "b2d5",
      "6148"
    ]
  },
  "26b1": {
    "id": "26b1",
    "label": "materialize"
  },
  "390c": {
    "id": "390c",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "26b1"
    ]
  },
  "496b": {
    "id": "496b",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "5083"
    ]
  },
  "e6ac": {
    "id": "e6ac",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "390c",
      "496b"
    ]
  },
  "a2d8": {
    "id": "a2d8",
    "label": "timeout"
  },
  "0d0e": {
    "id": "0d0e",
    "label": "I want to throw an error",
    "options": [
      "a2d8"
    ]
  },
  "4aa3": {
    "id": "4aa3",
    "label": "timeoutWith"
  },
  "662a": {
    "id": "662a",
    "label": "I want to switch to another Observable",
    "options": [
      "4aa3"
    ]
  },
  "fc76": {
    "id": "fc76",
    "label": "after a period of inactivity",
    "options": [
      "0d0e",
      "662a"
    ]
  },
  "98a7": {
    "id": "98a7",
    "label": "single"
  },
  "4ea6": {
    "id": "4ea6",
    "label": "I want to ensure there is only one value",
    "options": [
      "98a7"
    ]
  },
  "d1f2": {
    "id": "d1f2",
    "label": "I want to know how many values it emits",
    "options": [
      "6628"
    ]
  },
  "f749": {
    "id": "f749",
    "label": "I want to prepend one value",
    "options": [
      "6309"
    ]
  },
  "aaf9": {
    "id": "aaf9",
    "label": "delay"
  },
  "8c66": {
    "id": "8c66",
    "label": "based on a given amount of time",
    "options": [
      "aaf9"
    ]
  },
  "84ef": {
    "id": "84ef",
    "label": "delayWhen"
  },
  "6c75": {
    "id": "6c75",
    "label": "based on the emissions of another Observable",
    "options": [
      "84ef"
    ]
  },
  "cedc": {
    "id": "cedc",
    "label": "Observable",
    "method": "toPromise"
  },
  "b74f": {
    "id": "b74f",
    "label": "and convert to a Promise",
    "options": [
      "cedc"
    ]
  },
  "7a7b": {
    "id": "7a7b",
    "label": "until the Observable completes",
    "options": [
      "4402",
      "b74f"
    ]
  },
  "f9c5": {
    "id": "f9c5",
    "label": "pairwise"
  },
  "103c": {
    "id": "103c",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "f9c5"
    ]
  },
  "6fc3": {
    "id": "6fc3",
    "label": "partition"
  },
  "65ac": {
    "id": "65ac",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "6fc3"
    ]
  },
  "db81": {
    "id": "db81",
    "label": "bufferCount"
  },
  "6ea6": {
    "id": "6ea6",
    "label": "and emit the group as an array",
    "options": [
      "db81"
    ]
  },
  "34ae": {
    "id": "34ae",
    "label": "windowCount"
  },
  "b72e": {
    "id": "b72e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "34ae"
    ]
  },
  "1c43": {
    "id": "1c43",
    "label": "in batches of a particular size",
    "options": [
      "6ea6",
      "b72e"
    ]
  },
  "cfd5": {
    "id": "cfd5",
    "label": "bufferTime"
  },
  "17d6": {
    "id": "17d6",
    "label": "windowTime"
  },
  "f8cd": {
    "id": "f8cd",
    "label": "and emit the group as a nested Observable",
    "options": [
      "17d6"
    ]
  },
  "32ab": {
    "id": "32ab",
    "label": "based on time",
    "options": [
      "7027",
      "f8cd"
    ]
  },
  "723a": {
    "id": "723a",
    "label": "buffer"
  },
  "0300": {
    "id": "0300",
    "label": "and emit the group as an array",
    "options": [
      "723a"
    ]
  },
  "2f00": {
    "id": "2f00",
    "label": "window"
  },
  "c3a5": {
    "id": "c3a5",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2f00"
    ]
  },
  "cd94": {
    "id": "cd94",
    "label": "until another Observable emits",
    "options": [
      "0300",
      "c3a5"
    ]
  },
  "861e": {
    "id": "861e",
    "label": "bufferWhen"
  },
  "aab1": {
    "id": "aab1",
    "label": "and emit the group as an array",
    "options": [
      "861e"
    ]
  },
  "982c": {
    "id": "982c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6878"
    ]
  },
  "19c8": {
    "id": "19c8",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "aab1",
      "982c"
    ]
  },
  "de2e": {
    "id": "de2e",
    "label": "and emit the group as an array",
    "options": [
      "3024"
    ]
  },
  "395a": {
    "id": "395a",
    "label": "windowToggle"
  },
  "038b": {
    "id": "038b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "395a"
    ]
  },
  "3dba": {
    "id": "3dba",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "de2e",
      "038b"
    ]
  },
  "5abb": {
    "id": "5abb",
    "label": "groupBy"
  },
  "ac97": {
    "id": "ac97",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "5abb"
    ]
  },
  "b4bc": {
    "id": "b4bc",
    "label": "I want to group the values",
    "options": [
      "7a7b",
      "103c",
      "65ac",
      "1c43",
      "32ab",
      "cd94",
      "19c8",
      "3dba",
      "ac97"
    ]
  },
  "776a": {
    "id": "776a",
    "label": "mergeMapTo"
  },
  "dda8": {
    "id": "dda8",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "776a"
    ]
  },
  "e607": {
    "id": "e607",
    "label": "mergeMap"
  },
  "ac01": {
    "id": "ac01",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e607"
    ]
  },
  "681f": {
    "id": "681f",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "dda8",
      "ac01"
    ]
  },
  "bb85": {
    "id": "bb85",
    "label": "concatMapTo"
  },
  "c3b0": {
    "id": "c3b0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "9969"
    ]
  },
  "0ab2": {
    "id": "0ab2",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "9485",
      "c3b0"
    ]
  },
  "48ae": {
    "id": "48ae",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6207"
    ]
  },
  "b098": {
    "id": "b098",
    "label": "switchMap"
  },
  "42d7": {
    "id": "42d7",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b098"
    ]
  },
  "cd68": {
    "id": "cd68",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "48ae",
      "42d7"
    ]
  },
  "e968": {
    "id": "e968",
    "label": "exhaustMap"
  },
  "2bca": {
    "id": "2bca",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "e968"
    ]
  },
  "5d80": {
    "id": "5d80",
    "label": "expand"
  },
  "036d": {
    "id": "036d",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "5d80"
    ]
  },
  "b34d": {
    "id": "b34d",
    "label": "I want to start a new Observable for each value",
    "options": [
      "681f",
      "0ab2",
      "cd68",
      "2bca",
      "036d"
    ]
  },
  "38c0": {
    "id": "38c0",
    "label": "pipe"
  },
  "da4c": {
    "id": "da4c",
    "label": "I want to perform custom operations",
    "options": [
      "38c0"
    ]
  },
  "2c2c": {
    "id": "2c2c",
    "label": "share"
  },
  "555b": {
    "id": "555b",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "2c2c"
    ]
  },
  "99f3": {
    "id": "99f3",
    "label": "publish"
  },
  "65b9": {
    "id": "65b9",
    "label": "and start it manually or imperatively",
    "options": [
      "99f3"
    ]
  },
  "614d": {
    "id": "614d",
    "label": "using a conventional Subject",
    "options": [
      "555b",
      "65b9"
    ]
  },
  "70b6": {
    "id": "70b6",
    "label": "publishBehavior"
  },
  "846f": {
    "id": "846f",
    "label": "using a BehaviorSubject",
    "options": [
      "70b6"
    ]
  },
  "ccba": {
    "id": "ccba",
    "label": "publishReplay"
  },
  "8ef7": {
    "id": "8ef7",
    "label": "using a ReplaySubject",
    "options": [
      "ccba"
    ]
  },
  "a061": {
    "id": "a061",
    "label": "publishLast"
  },
  "091b": {
    "id": "091b",
    "label": "using an AsyncSubject",
    "options": [
      "a061"
    ]
  },
  "75c4": {
    "id": "75c4",
    "label": "multicast"
  },
  "f850": {
    "id": "f850",
    "label": "using a specific subject implementation",
    "options": [
      "75c4"
    ]
  },
  "60e1": {
    "id": "60e1",
    "label": "I want to start a new Observable",
    "options": [
      "3102"
    ]
  },
  "e2af": {
    "id": "e2af",
    "label": "immediately",
    "options": [
      "9371"
    ]
  },
  "95e7": {
    "id": "95e7",
    "label": "when another Observable emits",
    "options": [
      "3753"
    ]
  },
  "f540": {
    "id": "f540",
    "label": "when an error occurs",
    "options": [
      "60e1",
      "5922"
    ]
  },
  "6e15": {
    "id": "6e15",
    "label": "repeat"
  },
  "c352": {
    "id": "c352",
    "label": "immediately",
    "options": [
      "6e15"
    ]
  },
  "b035": {
    "id": "b035",
    "label": "repeatWhen"
  },
  "0201": {
    "id": "0201",
    "label": "when another Observable emits",
    "options": [
      "b035"
    ]
  },
  "1d41": {
    "id": "1d41",
    "label": "I want to re-subscribe",
    "options": [
      "c352",
      "0201"
    ]
  },
  "2ce1": {
    "id": "2ce1",
    "label": "concat"
  },
  "94bc": {
    "id": "94bc",
    "label": "when it completes",
    "options": [
      "1d41",
      "5237"
    ]
  },
  "fcd0": {
    "id": "fcd0",
    "label": "finalize"
  },
  "ac85": {
    "id": "ac85",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "fcd0"
    ]
  },
  "49da": {
    "id": "49da",
    "label": "subscribeOn"
  },
  "c1d6": {
    "id": "c1d6",
    "label": "observeOn"
  },
  "8e32": {
    "id": "8e32",
    "label": "that routes values to observers",
    "options": [
      "c1d6"
    ]
  },
  "f9f4": {
    "id": "f9f4",
    "label": "I want to change the scheduler",
    "options": [
      "7356",
      "8e32"
    ]
  },
  "a74e": {
    "id": "a74e",
    "label": "race"
  },
  "e778": {
    "id": "e778",
    "label": "merge"
  },
  "4ddc": {
    "id": "4ddc",
    "label": "I want to output the values from either of them",
    "options": [
      "e778"
    ]
  },
  "b885": {
    "id": "b885",
    "label": "combineLatest"
  },
  "a857": {
    "id": "a857",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "b885"
    ]
  },
  "21c1": {
    "id": "21c1",
    "label": "withLatestFrom"
  },
  "4f16": {
    "id": "4f16",
    "label": "using each source value only once",
    "options": [
      "4280"
    ]
  },
  "a231": {
    "id": "a231",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a857",
      "5862",
      "4f16"
    ]
  },
  "d1e4": {
    "id": "d1e4",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "7707",
      "4ddc",
      "a231"
    ]
  },
  "ab78": {
    "id": "ab78",
    "label": "I have one existing Observable, and",
    "options": [
      "0707",
      "d8b4",
      "46e0",
      "babb",
      "a45b",
      "a8b8",
      "e6ac",
      "fc76",
      "4ea6",
      "d1f2",
      "f749",
      "6453",
      "b4bc",
      "b34d",
      "da4c",
      "1329",
      "f540",
      "94bc",
      "ac85",
      "f9f4",
      "d1e4"
    ]
  },
  "a850": {
    "id": "a850",
    "label": "race"
  },
  "9d2b": {
    "id": "9d2b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a850"
    ]
  },
  "79a4": {
    "id": "79a4",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "6606"
    ]
  },
  "60ba": {
    "id": "60ba",
    "label": "I want to output the values from either of them",
    "options": [
      "3551"
    ]
  },
  "823a": {
    "id": "823a",
    "label": "combineLatest"
  },
  "b870": {
    "id": "b870",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "823a"
    ]
  },
  "aea0": {
    "id": "aea0",
    "label": "zip"
  },
  "af0b": {
    "id": "af0b",
    "label": "using each source value only once",
    "options": [
      "aea0"
    ]
  },
  "a429": {
    "id": "a429",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b870",
      "af0b"
    ]
  },
  "bee2": {
    "id": "bee2",
    "label": "I want to subscribe to each in order",
    "options": [
      "5366"
    ]
  },
  "0778": {
    "id": "0778",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "9d2b",
      "79a4",
      "60ba",
      "a429",
      "bee2"
    ]
  },
  "b722": {
    "id": "b722",
    "label": "Observable",
    "method": "create"
  },
  "ead3": {
    "id": "ead3",
    "label": "using custom logic",
    "options": [
      "b722"
    ]
  },
  "4a43": {
    "id": "4a43",
    "label": "generate"
  },
  "5a3a": {
    "id": "5a3a",
    "label": "using a state machine similar to a for loop",
    "options": [
      "4a43"
    ]
  },
  "388e": {
    "id": "388e",
    "label": "throwError"
  },
  "30a9": {
    "id": "30a9",
    "label": "that throws an error",
    "options": [
      "388e"
    ]
  },
  "f952": {
    "id": "f952",
    "label": "EMPTY"
  },
  "914c": {
    "id": "914c",
    "label": "that just completes, without emitting values",
    "options": [
      "f952"
    ]
  },
  "07f2": {
    "id": "07f2",
    "label": "NEVER"
  },
  "5faf": {
    "id": "5faf",
    "label": "that never emits anything",
    "options": [
      "07f2"
    ]
  },
  "0388": {
    "id": "0388",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "6737"
    ]
  },
  "eb6d": {
    "id": "eb6d",
    "label": "fromEventPattern"
  },
  "bec6": {
    "id": "bec6",
    "label": "from an existing source of events",
    "options": [
      "0388",
      "4277"
    ]
  },
  "00d7": {
    "id": "00d7",
    "label": "from"
  },
  "2f37": {
    "id": "2f37",
    "label": "from a Promise or an event source",
    "options": [
      "00d7"
    ]
  },
  "c3e9": {
    "id": "c3e9",
    "label": "from"
  },
  "a531": {
    "id": "a531",
    "label": "over the values in an array",
    "options": [
      "c3e9"
    ]
  },
  "3c28": {
    "id": "3c28",
    "label": "range"
  },
  "b4b1": {
    "id": "b4b1",
    "label": "over values in a numeric range",
    "options": [
      "3c28"
    ]
  },
  "bdca": {
    "id": "bdca",
    "label": "over prefined values given as arguments",
    "options": [
      "5369"
    ]
  },
  "f710": {
    "id": "f710",
    "label": "that iterates",
    "options": [
      "a531",
      "b4b1",
      "bdca"
    ]
  },
  "faf8": {
    "id": "faf8",
    "label": "interval"
  },
  "8b2a": {
    "id": "8b2a",
    "label": "regularly",
    "options": [
      "faf8"
    ]
  },
  "5fff": {
    "id": "5fff",
    "label": "timer"
  },
  "dd35": {
    "id": "dd35",
    "label": "defer"
  },
  "6a54": {
    "id": "6a54",
    "label": "which is built on demand when subscribed",
    "options": [
      "dd35"
    ]
  },
  "b03f": {
    "id": "b03f",
    "label": "I want to create a new Observable",
    "options": [
      "ead3",
      "5a3a",
      "30a9",
      "914c",
      "5faf",
      "bec6",
      "2f37",
      "f710",
      "3269",
      "6a54"
    ]
  },
  "e856": {
    "id": "e856",
    "label": "bindCallback"
  },
  "d97c": {
    "id": "d97c",
    "label": "supporting a conventional callback API",
    "options": [
      "e856"
    ]
  },
  "79c5": {
    "id": "79c5",
    "label": "bindNodeCallback"
  },
  "ce9b": {
    "id": "ce9b",
    "label": "supporting Node.js callback style API",
    "options": [
      "79c5"
    ]
  },
  "767f": {
    "id": "767f",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "d97c",
      "ce9b"
    ]
  },
  "44eb": {
    "id": "44eb",
    "label": "I have no Observables yet, and",
    "options": [
      "b03f",
      "767f"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ab78",
      "0778",
      "44eb"
    ]
  }
}