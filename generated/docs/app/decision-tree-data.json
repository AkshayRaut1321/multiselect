{
  "1083": {
    "id": "1083",
    "label": "I want to delay the emissions",
    "options": [
      "149d",
      "ab25"
    ]
  },
  "1307": {
    "id": "1307",
    "label": "bindNodeCallback"
  },
  "1358": {
    "id": "1358",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "ec9c"
    ]
  },
  "1412": {
    "id": "1412",
    "label": "tap"
  },
  "1761": {
    "id": "1761",
    "label": "forkJoin"
  },
  "1793": {
    "id": "1793",
    "label": "take"
  },
  "1844": {
    "id": "1844",
    "label": "filter"
  },
  "2321": {
    "id": "2321",
    "label": "when an error occurs",
    "options": [
      "2414",
      "7c32"
    ]
  },
  "2414": {
    "id": "2414",
    "label": "I want to start a new Observable",
    "options": [
      "8529"
    ]
  },
  "2884": {
    "id": "2884",
    "label": "distinctUntilChanged"
  },
  "2958": {
    "id": "2958",
    "label": "concatMapTo"
  },
  "2981": {
    "id": "2981",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b153"
    ]
  },
  "3308": {
    "id": "3308",
    "label": "and only the first value",
    "options": [
      "7074"
    ]
  },
  "3549": {
    "id": "3549",
    "label": "by emitting the first value in each time window",
    "options": [
      "3a91",
      "f164"
    ]
  },
  "3689": {
    "id": "3689",
    "label": "race"
  },
  "4083": {
    "id": "4083",
    "label": "zip"
  },
  "4098": {
    "id": "4098",
    "label": "delay"
  },
  "4185": {
    "id": "4185",
    "label": "using an AsyncSubject",
    "options": [
      "7889"
    ]
  },
  "4278": {
    "id": "4278",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "d267"
    ]
  },
  "4772": {
    "id": "4772",
    "label": "startWith"
  },
  "4854": {
    "id": "4854",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "e294"
    ]
  },
  "4884": {
    "id": "4884",
    "label": "in batches of a particular size",
    "options": [
      "837c",
      "fac7"
    ]
  },
  "5261": {
    "id": "5261",
    "label": "when it completes",
    "options": [
      "ccff",
      "d684"
    ]
  },
  "5309": {
    "id": "5309",
    "label": "timeInterval"
  },
  "5389": {
    "id": "5389",
    "label": "I want to perform custom operations",
    "options": [
      "078a"
    ]
  },
  "5445": {
    "id": "5445",
    "label": "buffer"
  },
  "5478": {
    "id": "5478",
    "label": "last"
  },
  "5518": {
    "id": "5518",
    "label": "EMPTY"
  },
  "5674": {
    "id": "5674",
    "label": "merge"
  },
  "5738": {
    "id": "5738",
    "label": "window"
  },
  "5835": {
    "id": "5835",
    "label": "I want to group the values",
    "options": [
      "e209",
      "779f",
      "b057",
      "4884",
      "819f",
      "4a06",
      "e92c",
      "3d2f",
      "edae"
    ]
  },
  "5856": {
    "id": "5856",
    "label": "expand"
  },
  "5871": {
    "id": "5871",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a706",
      "74d5"
    ]
  },
  "5965": {
    "id": "5965",
    "label": "I want to change the scheduler",
    "options": [
      "834d",
      "0e3f"
    ]
  },
  "5989": {
    "id": "5989",
    "label": "windowTime"
  },
  "6272": {
    "id": "6272",
    "label": "pairwise"
  },
  "6463": {
    "id": "6463",
    "label": "concatMap"
  },
  "6482": {
    "id": "6482",
    "label": "takeUntil"
  },
  "6546": {
    "id": "6546",
    "label": "and convert to an array",
    "options": [
      "cc87"
    ]
  },
  "7074": {
    "id": "7074",
    "label": "first"
  },
  "7313": {
    "id": "7313",
    "label": "bufferWhen"
  },
  "7889": {
    "id": "7889",
    "label": "publishLast"
  },
  "8379": {
    "id": "8379",
    "label": "mapTo"
  },
  "8517": {
    "id": "8517",
    "label": "using a BehaviorSubject",
    "options": [
      "aab9"
    ]
  },
  "8529": {
    "id": "8529",
    "label": "catchError"
  },
  "8537": {
    "id": "8537",
    "label": "exhaustMap"
  },
  "8653": {
    "id": "8653",
    "label": "defer"
  },
  "9602": {
    "id": "9602",
    "label": "emitted some time in the past",
    "options": [
      "b182"
    ]
  },
  "9664": {
    "id": "9664",
    "label": "using a ReplaySubject",
    "options": [
      "bd09"
    ]
  },
  "2f5e": {
    "id": "2f5e",
    "label": "to be a constant value",
    "options": [
      "8379"
    ]
  },
  "f874": {
    "id": "f874",
    "label": "map"
  },
  "6da0": {
    "id": "6da0",
    "label": "to be a value calculated through a formula",
    "options": [
      "f874"
    ]
  },
  "75dc": {
    "id": "75dc",
    "label": "I want to change each emitted value",
    "options": [
      "2f5e",
      "6da0"
    ]
  },
  "762f": {
    "id": "762f",
    "label": "pluck"
  },
  "4e30": {
    "id": "4e30",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "762f"
    ]
  },
  "ac1c": {
    "id": "ac1c",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "1412"
    ]
  },
  "d564": {
    "id": "d564",
    "label": "based on custom logic",
    "options": [
      "1844"
    ]
  },
  "7f51": {
    "id": "7f51",
    "label": "based on a given amount",
    "options": [
      "1793"
    ]
  },
  "79c8": {
    "id": "79c8",
    "label": "takeWhile"
  },
  "654b": {
    "id": "654b",
    "label": "based on custom logic",
    "options": [
      "79c8"
    ]
  },
  "f84e": {
    "id": "f84e",
    "label": "if they are at the start of the Observable",
    "options": [
      "3308",
      "7f51",
      "654b"
    ]
  },
  "91ff": {
    "id": "91ff",
    "label": "elementAt"
  },
  "384f": {
    "id": "384f",
    "label": "if they are exactly the n-th emission",
    "options": [
      "91ff"
    ]
  },
  "269d": {
    "id": "269d",
    "label": "and only the last value",
    "options": [
      "5478"
    ]
  },
  "ebf5": {
    "id": "ebf5",
    "label": "takeLast"
  },
  "1b2d": {
    "id": "1b2d",
    "label": "based on a given amount",
    "options": [
      "ebf5"
    ]
  },
  "32ce": {
    "id": "32ce",
    "label": "if they are at the end of the Observable",
    "options": [
      "269d",
      "1b2d"
    ]
  },
  "3f37": {
    "id": "3f37",
    "label": "until another Observable emits a value",
    "options": [
      "6482"
    ]
  },
  "cfa6": {
    "id": "cfa6",
    "label": "I want to allow some values to pass",
    "options": [
      "d564",
      "f84e",
      "384f",
      "32ce",
      "3f37"
    ]
  },
  "ca2d": {
    "id": "ca2d",
    "label": "ignoreElements"
  },
  "ae55": {
    "id": "ae55",
    "label": "altogether",
    "options": [
      "ca2d"
    ]
  },
  "755a": {
    "id": "755a",
    "label": "skip"
  },
  "cecc": {
    "id": "cecc",
    "label": "based on a given amount",
    "options": [
      "755a"
    ]
  },
  "7b04": {
    "id": "7b04",
    "label": "skipWhile"
  },
  "567a": {
    "id": "567a",
    "label": "based on custom logic",
    "options": [
      "7b04"
    ]
  },
  "ff77": {
    "id": "ff77",
    "label": "from the start of the Observable",
    "options": [
      "cecc",
      "567a"
    ]
  },
  "69b2": {
    "id": "69b2",
    "label": "skipLast"
  },
  "5d2a": {
    "id": "5d2a",
    "label": "from the end of the Observable",
    "options": [
      "69b2"
    ]
  },
  "2d13": {
    "id": "2d13",
    "label": "skipUntil"
  },
  "1d3f": {
    "id": "1d3f",
    "label": "until another Observable emits a value",
    "options": [
      "2d13"
    ]
  },
  "ef1a": {
    "id": "ef1a",
    "label": "emitted just before the current value",
    "options": [
      "2884"
    ]
  },
  "b182": {
    "id": "b182",
    "label": "distinct"
  },
  "e590": {
    "id": "e590",
    "label": "according to value equality",
    "options": [
      "ef1a",
      "9602"
    ]
  },
  "92a0": {
    "id": "92a0",
    "label": "distinctUntilKeyChanged"
  },
  "5d78": {
    "id": "5d78",
    "label": "emitted just before the current value",
    "options": [
      "92a0"
    ]
  },
  "8fcf": {
    "id": "8fcf",
    "label": "according to a key or object property",
    "options": [
      "5d78"
    ]
  },
  "f14f": {
    "id": "f14f",
    "label": "that match some previous value",
    "options": [
      "e590",
      "8fcf"
    ]
  },
  "e998": {
    "id": "e998",
    "label": "throttle"
  },
  "3a91": {
    "id": "3a91",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e998"
    ]
  },
  "c743": {
    "id": "c743",
    "label": "throttleTime"
  },
  "f164": {
    "id": "f164",
    "label": "where time windows are determined by a time duration",
    "options": [
      "c743"
    ]
  },
  "4ad7": {
    "id": "4ad7",
    "label": "audit"
  },
  "bcce": {
    "id": "bcce",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "4ad7"
    ]
  },
  "1c6d": {
    "id": "1c6d",
    "label": "auditTime"
  },
  "8c33": {
    "id": "8c33",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1c6d"
    ]
  },
  "ea39": {
    "id": "ea39",
    "label": "by emitting the last value in each time window",
    "options": [
      "bcce",
      "8c33"
    ]
  },
  "c4c3": {
    "id": "c4c3",
    "label": "debounce"
  },
  "88cc": {
    "id": "88cc",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "c4c3"
    ]
  },
  "07cf": {
    "id": "07cf",
    "label": "debounceTime"
  },
  "ff0b": {
    "id": "ff0b",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "07cf"
    ]
  },
  "ecc1": {
    "id": "ecc1",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "88cc",
      "ff0b"
    ]
  },
  "b1e6": {
    "id": "b1e6",
    "label": "that occur too frequently",
    "options": [
      "3549",
      "ea39",
      "ecc1"
    ]
  },
  "53d4": {
    "id": "53d4",
    "label": "I want to ignore values",
    "options": [
      "ae55",
      "ff77",
      "5d2a",
      "1d3f",
      "f14f",
      "b1e6"
    ]
  },
  "67c1": {
    "id": "67c1",
    "label": "reduce"
  },
  "b66a": {
    "id": "b66a",
    "label": "and only output the final computed value",
    "options": [
      "67c1"
    ]
  },
  "899d": {
    "id": "899d",
    "label": "scan"
  },
  "0345": {
    "id": "0345",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "899d"
    ]
  },
  "e294": {
    "id": "e294",
    "label": "mergeScan"
  },
  "96e5": {
    "id": "96e5",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "b66a",
      "0345",
      "4854"
    ]
  },
  "d267": {
    "id": "d267",
    "label": "materialize"
  },
  "e66d": {
    "id": "e66d",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "5309"
    ]
  },
  "969e": {
    "id": "969e",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "4278",
      "e66d"
    ]
  },
  "262d": {
    "id": "262d",
    "label": "timeout"
  },
  "fcee": {
    "id": "fcee",
    "label": "I want to throw an error",
    "options": [
      "262d"
    ]
  },
  "fe69": {
    "id": "fe69",
    "label": "timeoutWith"
  },
  "f107": {
    "id": "f107",
    "label": "I want to switch to another Observable",
    "options": [
      "fe69"
    ]
  },
  "0418": {
    "id": "0418",
    "label": "after a period of inactivity",
    "options": [
      "fcee",
      "f107"
    ]
  },
  "e583": {
    "id": "e583",
    "label": "single"
  },
  "1b07": {
    "id": "1b07",
    "label": "I want to ensure there is only one value",
    "options": [
      "e583"
    ]
  },
  "576a": {
    "id": "576a",
    "label": "count"
  },
  "cab0": {
    "id": "cab0",
    "label": "I want to know how many values it emits",
    "options": [
      "576a"
    ]
  },
  "b52a": {
    "id": "b52a",
    "label": "I want to prepend one value",
    "options": [
      "4772"
    ]
  },
  "149d": {
    "id": "149d",
    "label": "based on a given amount of time",
    "options": [
      "4098"
    ]
  },
  "d554": {
    "id": "d554",
    "label": "delayWhen"
  },
  "ab25": {
    "id": "ab25",
    "label": "based on the emissions of another Observable",
    "options": [
      "d554"
    ]
  },
  "cc87": {
    "id": "cc87",
    "label": "toArray"
  },
  "4a7d": {
    "id": "4a7d",
    "label": "Observable",
    "method": "toPromise"
  },
  "b49c": {
    "id": "b49c",
    "label": "and convert to a Promise",
    "options": [
      "4a7d"
    ]
  },
  "e209": {
    "id": "e209",
    "label": "until the Observable completes",
    "options": [
      "6546",
      "b49c"
    ]
  },
  "779f": {
    "id": "779f",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "6272"
    ]
  },
  "a811": {
    "id": "a811",
    "label": "partition"
  },
  "b057": {
    "id": "b057",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "a811"
    ]
  },
  "67ad": {
    "id": "67ad",
    "label": "bufferCount"
  },
  "837c": {
    "id": "837c",
    "label": "and emit the group as an array",
    "options": [
      "67ad"
    ]
  },
  "29fc": {
    "id": "29fc",
    "label": "windowCount"
  },
  "fac7": {
    "id": "fac7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "29fc"
    ]
  },
  "a393": {
    "id": "a393",
    "label": "bufferTime"
  },
  "113b": {
    "id": "113b",
    "label": "and emit the group as an array",
    "options": [
      "a393"
    ]
  },
  "52f2": {
    "id": "52f2",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5989"
    ]
  },
  "819f": {
    "id": "819f",
    "label": "based on time",
    "options": [
      "113b",
      "52f2"
    ]
  },
  "85e5": {
    "id": "85e5",
    "label": "and emit the group as an array",
    "options": [
      "5445"
    ]
  },
  "a840": {
    "id": "a840",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5738"
    ]
  },
  "4a06": {
    "id": "4a06",
    "label": "until another Observable emits",
    "options": [
      "85e5",
      "a840"
    ]
  },
  "0427": {
    "id": "0427",
    "label": "and emit the group as an array",
    "options": [
      "7313"
    ]
  },
  "c01a": {
    "id": "c01a",
    "label": "windowWhen"
  },
  "a1be": {
    "id": "a1be",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c01a"
    ]
  },
  "e92c": {
    "id": "e92c",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "0427",
      "a1be"
    ]
  },
  "09ea": {
    "id": "09ea",
    "label": "bufferToggle"
  },
  "c410": {
    "id": "c410",
    "label": "and emit the group as an array",
    "options": [
      "09ea"
    ]
  },
  "d041": {
    "id": "d041",
    "label": "windowToggle"
  },
  "971e": {
    "id": "971e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d041"
    ]
  },
  "3d2f": {
    "id": "3d2f",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "c410",
      "971e"
    ]
  },
  "282f": {
    "id": "282f",
    "label": "groupBy"
  },
  "edae": {
    "id": "edae",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "282f"
    ]
  },
  "eb08": {
    "id": "eb08",
    "label": "mergeMapTo"
  },
  "a89c": {
    "id": "a89c",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "eb08"
    ]
  },
  "23da": {
    "id": "23da",
    "label": "mergeMap"
  },
  "fe0f": {
    "id": "fe0f",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "23da"
    ]
  },
  "24c1": {
    "id": "24c1",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "a89c",
      "fe0f"
    ]
  },
  "79fe": {
    "id": "79fe",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2958"
    ]
  },
  "046f": {
    "id": "046f",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "6463"
    ]
  },
  "e48f": {
    "id": "e48f",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "79fe",
      "046f"
    ]
  },
  "17b6": {
    "id": "17b6",
    "label": "switchMapTo"
  },
  "b628": {
    "id": "b628",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "17b6"
    ]
  },
  "b153": {
    "id": "b153",
    "label": "switchMap"
  },
  "7e65": {
    "id": "7e65",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "b628",
      "2981"
    ]
  },
  "22c0": {
    "id": "22c0",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "8537"
    ]
  },
  "3a36": {
    "id": "3a36",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "5856"
    ]
  },
  "54a3": {
    "id": "54a3",
    "label": "I want to start a new Observable for each value",
    "options": [
      "24c1",
      "e48f",
      "7e65",
      "22c0",
      "3a36"
    ]
  },
  "078a": {
    "id": "078a",
    "label": "pipe"
  },
  "3da0": {
    "id": "3da0",
    "label": "share"
  },
  "0a23": {
    "id": "0a23",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "3da0"
    ]
  },
  "5c82": {
    "id": "5c82",
    "label": "publish"
  },
  "c0b4": {
    "id": "c0b4",
    "label": "and start it manually or imperatively",
    "options": [
      "5c82"
    ]
  },
  "67b4": {
    "id": "67b4",
    "label": "using a conventional Subject",
    "options": [
      "0a23",
      "c0b4"
    ]
  },
  "aab9": {
    "id": "aab9",
    "label": "publishBehavior"
  },
  "bd09": {
    "id": "bd09",
    "label": "publishReplay"
  },
  "53ed": {
    "id": "53ed",
    "label": "multicast"
  },
  "a008": {
    "id": "a008",
    "label": "using a specific subject implementation",
    "options": [
      "53ed"
    ]
  },
  "4c2c": {
    "id": "4c2c",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "67b4",
      "8517",
      "9664",
      "4185",
      "a008"
    ]
  },
  "3e36": {
    "id": "3e36",
    "label": "retry"
  },
  "01e1": {
    "id": "01e1",
    "label": "immediately",
    "options": [
      "3e36"
    ]
  },
  "89c6": {
    "id": "89c6",
    "label": "retryWhen"
  },
  "9e19": {
    "id": "9e19",
    "label": "when another Observable emits",
    "options": [
      "89c6"
    ]
  },
  "7c32": {
    "id": "7c32",
    "label": "I want to re-subscribe",
    "options": [
      "01e1",
      "9e19"
    ]
  },
  "382b": {
    "id": "382b",
    "label": "repeat"
  },
  "196d": {
    "id": "196d",
    "label": "immediately",
    "options": [
      "382b"
    ]
  },
  "dd1e": {
    "id": "dd1e",
    "label": "repeatWhen"
  },
  "d00e": {
    "id": "d00e",
    "label": "when another Observable emits",
    "options": [
      "dd1e"
    ]
  },
  "ccff": {
    "id": "ccff",
    "label": "I want to re-subscribe",
    "options": [
      "196d",
      "d00e"
    ]
  },
  "a714": {
    "id": "a714",
    "label": "concat"
  },
  "d684": {
    "id": "d684",
    "label": "I want to start a new Observable",
    "options": [
      "a714"
    ]
  },
  "c2ce": {
    "id": "c2ce",
    "label": "finalize"
  },
  "fd81": {
    "id": "fd81",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c2ce"
    ]
  },
  "1f14": {
    "id": "1f14",
    "label": "subscribeOn"
  },
  "834d": {
    "id": "834d",
    "label": "that routes calls to subscribe",
    "options": [
      "1f14"
    ]
  },
  "54ad": {
    "id": "54ad",
    "label": "observeOn"
  },
  "0e3f": {
    "id": "0e3f",
    "label": "that routes values to observers",
    "options": [
      "54ad"
    ]
  },
  "8d63": {
    "id": "8d63",
    "label": "race"
  },
  "8dcc": {
    "id": "8dcc",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8d63"
    ]
  },
  "ce84": {
    "id": "ce84",
    "label": "I want to output the values from either of them",
    "options": [
      "5674"
    ]
  },
  "0de4": {
    "id": "0de4",
    "label": "combineLatest"
  },
  "a6ae": {
    "id": "a6ae",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "0de4"
    ]
  },
  "ad3a": {
    "id": "ad3a",
    "label": "withLatestFrom"
  },
  "e0de": {
    "id": "e0de",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "ad3a"
    ]
  },
  "22b3": {
    "id": "22b3",
    "label": "using each source value only once",
    "options": [
      "4083"
    ]
  },
  "d701": {
    "id": "d701",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a6ae",
      "e0de",
      "22b3"
    ]
  },
  "3ffc": {
    "id": "3ffc",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8dcc",
      "ce84",
      "d701"
    ]
  },
  "7ddb": {
    "id": "7ddb",
    "label": "I have one existing Observable, and",
    "options": [
      "75dc",
      "4e30",
      "ac1c",
      "cfa6",
      "53d4",
      "96e5",
      "969e",
      "0418",
      "1b07",
      "cab0",
      "b52a",
      "1083",
      "5835",
      "54a3",
      "5389",
      "4c2c",
      "2321",
      "5261",
      "fd81",
      "5965",
      "3ffc"
    ]
  },
  "04f1": {
    "id": "04f1",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "3689"
    ]
  },
  "796e": {
    "id": "796e",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "1761"
    ]
  },
  "778a": {
    "id": "778a",
    "label": "merge"
  },
  "cd26": {
    "id": "cd26",
    "label": "I want to output the values from either of them",
    "options": [
      "778a"
    ]
  },
  "ac5d": {
    "id": "ac5d",
    "label": "combineLatest"
  },
  "a706": {
    "id": "a706",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ac5d"
    ]
  },
  "b470": {
    "id": "b470",
    "label": "zip"
  },
  "74d5": {
    "id": "74d5",
    "label": "using each source value only once",
    "options": [
      "b470"
    ]
  },
  "02e5": {
    "id": "02e5",
    "label": "concat"
  },
  "7e98": {
    "id": "7e98",
    "label": "I want to subscribe to each in order",
    "options": [
      "02e5"
    ]
  },
  "33e6": {
    "id": "33e6",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "04f1",
      "796e",
      "cd26",
      "5871",
      "7e98"
    ]
  },
  "de3f": {
    "id": "de3f",
    "label": "Observable",
    "method": "create"
  },
  "76eb": {
    "id": "76eb",
    "label": "using custom logic",
    "options": [
      "de3f"
    ]
  },
  "76c8": {
    "id": "76c8",
    "label": "generate"
  },
  "9c0d": {
    "id": "9c0d",
    "label": "using a state machine similar to a for loop",
    "options": [
      "76c8"
    ]
  },
  "bfc2": {
    "id": "bfc2",
    "label": "throwError"
  },
  "de2a": {
    "id": "de2a",
    "label": "that throws an error",
    "options": [
      "bfc2"
    ]
  },
  "c716": {
    "id": "c716",
    "label": "that just completes, without emitting values",
    "options": [
      "5518"
    ]
  },
  "57a3": {
    "id": "57a3",
    "label": "NEVER"
  },
  "af50": {
    "id": "af50",
    "label": "that never emits anything",
    "options": [
      "57a3"
    ]
  },
  "ec9c": {
    "id": "ec9c",
    "label": "fromEvent"
  },
  "018a": {
    "id": "018a",
    "label": "fromEventPattern"
  },
  "6ac7": {
    "id": "6ac7",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "018a"
    ]
  },
  "12c9": {
    "id": "12c9",
    "label": "from an existing source of events",
    "options": [
      "1358",
      "6ac7"
    ]
  },
  "d87b": {
    "id": "d87b",
    "label": "from"
  },
  "12f4": {
    "id": "12f4",
    "label": "from a Promise or an event source",
    "options": [
      "d87b"
    ]
  },
  "8fb3": {
    "id": "8fb3",
    "label": "from"
  },
  "a03e": {
    "id": "a03e",
    "label": "over the values in an array",
    "options": [
      "8fb3"
    ]
  },
  "8e20": {
    "id": "8e20",
    "label": "range"
  },
  "47d9": {
    "id": "47d9",
    "label": "over values in a numeric range",
    "options": [
      "8e20"
    ]
  },
  "01a6": {
    "id": "01a6",
    "label": "of"
  },
  "c8ac": {
    "id": "c8ac",
    "label": "over prefined values given as arguments",
    "options": [
      "01a6"
    ]
  },
  "2c5f": {
    "id": "2c5f",
    "label": "that iterates",
    "options": [
      "a03e",
      "47d9",
      "c8ac"
    ]
  },
  "8d7b": {
    "id": "8d7b",
    "label": "interval"
  },
  "a12a": {
    "id": "a12a",
    "label": "regularly",
    "options": [
      "8d7b"
    ]
  },
  "d443": {
    "id": "d443",
    "label": "timer"
  },
  "b3d8": {
    "id": "b3d8",
    "label": "with an optional initial delay",
    "options": [
      "d443"
    ]
  },
  "db33": {
    "id": "db33",
    "label": "that emits values on a timer",
    "options": [
      "a12a",
      "b3d8"
    ]
  },
  "42f0": {
    "id": "42f0",
    "label": "which is built on demand when subscribed",
    "options": [
      "8653"
    ]
  },
  "8a57": {
    "id": "8a57",
    "label": "I want to create a new Observable",
    "options": [
      "76eb",
      "9c0d",
      "de2a",
      "c716",
      "af50",
      "12c9",
      "12f4",
      "2c5f",
      "db33",
      "42f0"
    ]
  },
  "b066": {
    "id": "b066",
    "label": "bindCallback"
  },
  "35b9": {
    "id": "35b9",
    "label": "supporting a conventional callback API",
    "options": [
      "b066"
    ]
  },
  "1dfc": {
    "id": "1dfc",
    "label": "supporting Node.js callback style API",
    "options": [
      "1307"
    ]
  },
  "a96e": {
    "id": "a96e",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "35b9",
      "1dfc"
    ]
  },
  "281f": {
    "id": "281f",
    "label": "I have no Observables yet, and",
    "options": [
      "8a57",
      "a96e"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "7ddb",
      "33e6",
      "281f"
    ]
  }
}