{
  "1125": {
    "id": "1125",
    "label": "toArray"
  },
  "1350": {
    "id": "1350",
    "label": "publishLast"
  },
  "1366": {
    "id": "1366",
    "label": "from an existing source of events",
    "options": [
      "d602",
      "c20b"
    ]
  },
  "1705": {
    "id": "1705",
    "label": "merge"
  },
  "2187": {
    "id": "2187",
    "label": "using each source value only once",
    "options": [
      "8c82"
    ]
  },
  "2373": {
    "id": "2373",
    "label": "from a Promise or an event source",
    "options": [
      "68f1"
    ]
  },
  "2519": {
    "id": "2519",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "1ce5",
      "364d"
    ]
  },
  "2586": {
    "id": "2586",
    "label": "retry"
  },
  "2587": {
    "id": "2587",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "b0df"
    ]
  },
  "2985": {
    "id": "2985",
    "label": "and only the last value",
    "options": [
      "3576"
    ]
  },
  "3154": {
    "id": "3154",
    "label": "fromEvent"
  },
  "3381": {
    "id": "3381",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7b62"
    ]
  },
  "3576": {
    "id": "3576",
    "label": "last"
  },
  "4141": {
    "id": "4141",
    "label": "range"
  },
  "4213": {
    "id": "4213",
    "label": "I want to prepend one value",
    "options": [
      "fd76"
    ]
  },
  "4260": {
    "id": "4260",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "94e8",
      "0845",
      "5a43"
    ]
  },
  "4366": {
    "id": "4366",
    "label": "I want to perform custom operations",
    "options": [
      "3ae7"
    ]
  },
  "4373": {
    "id": "4373",
    "label": "mapTo"
  },
  "4463": {
    "id": "4463",
    "label": "from the start of the Observable",
    "options": [
      "9d8a",
      "2fe8"
    ]
  },
  "4578": {
    "id": "4578",
    "label": "of"
  },
  "4665": {
    "id": "4665",
    "label": "debounceTime"
  },
  "4674": {
    "id": "4674",
    "label": "switchMapTo"
  },
  "5211": {
    "id": "5211",
    "label": "I want to throw an error",
    "options": [
      "0a80"
    ]
  },
  "5645": {
    "id": "5645",
    "label": "filter"
  },
  "6079": {
    "id": "6079",
    "label": "according to a key or object property",
    "options": [
      "fd50"
    ]
  },
  "6717": {
    "id": "6717",
    "label": "over prefined values given as arguments",
    "options": [
      "4578"
    ]
  },
  "7297": {
    "id": "7297",
    "label": "I want to create a new Observable",
    "options": [
      "2db5",
      "0487",
      "6f84",
      "7e06",
      "269c",
      "1366",
      "2373",
      "61f0",
      "713d",
      "a21e"
    ]
  },
  "7893": {
    "id": "7893",
    "label": "to be a constant value",
    "options": [
      "4373"
    ]
  },
  "8119": {
    "id": "8119",
    "label": "distinctUntilKeyChanged"
  },
  "8540": {
    "id": "8540",
    "label": "and emit the group as an array",
    "options": [
      "8a63"
    ]
  },
  "9549": {
    "id": "9549",
    "label": "I want to ensure there is only one value",
    "options": [
      "87da"
    ]
  },
  "9592": {
    "id": "9592",
    "label": "I want to know how many values it emits",
    "options": [
      "1a18"
    ]
  },
  "9610": {
    "id": "9610",
    "label": "I have no Observables yet, and",
    "options": [
      "7297",
      "bc3d"
    ]
  },
  "9693": {
    "id": "9693",
    "label": "I want to output the values from either of them",
    "options": [
      "1705"
    ]
  },
  "9767": {
    "id": "9767",
    "label": "emitted some time in the past",
    "options": [
      "51ca"
    ]
  },
  "9878": {
    "id": "9878",
    "label": "first"
  },
  "dc20": {
    "id": "dc20",
    "label": "map"
  },
  "a7a2": {
    "id": "a7a2",
    "label": "to be a value calculated through a formula",
    "options": [
      "dc20"
    ]
  },
  "faf3": {
    "id": "faf3",
    "label": "I want to change each emitted value",
    "options": [
      "7893",
      "a7a2"
    ]
  },
  "c0d4": {
    "id": "c0d4",
    "label": "pluck"
  },
  "ca39": {
    "id": "ca39",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "c0d4"
    ]
  },
  "e9ac": {
    "id": "e9ac",
    "label": "tap"
  },
  "f4f6": {
    "id": "f4f6",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "e9ac"
    ]
  },
  "f575": {
    "id": "f575",
    "label": "based on custom logic",
    "options": [
      "5645"
    ]
  },
  "731c": {
    "id": "731c",
    "label": "and only the first value",
    "options": [
      "9878"
    ]
  },
  "e99e": {
    "id": "e99e",
    "label": "take"
  },
  "4c25": {
    "id": "4c25",
    "label": "based on a given amount",
    "options": [
      "e99e"
    ]
  },
  "4c6a": {
    "id": "4c6a",
    "label": "takeWhile"
  },
  "2c2e": {
    "id": "2c2e",
    "label": "based on custom logic",
    "options": [
      "4c6a"
    ]
  },
  "f616": {
    "id": "f616",
    "label": "if they are at the start of the Observable",
    "options": [
      "731c",
      "4c25",
      "2c2e"
    ]
  },
  "ba3d": {
    "id": "ba3d",
    "label": "elementAt"
  },
  "e733": {
    "id": "e733",
    "label": "if they are exactly the n-th emission",
    "options": [
      "ba3d"
    ]
  },
  "5f05": {
    "id": "5f05",
    "label": "takeLast"
  },
  "e42f": {
    "id": "e42f",
    "label": "based on a given amount",
    "options": [
      "5f05"
    ]
  },
  "e673": {
    "id": "e673",
    "label": "if they are at the end of the Observable",
    "options": [
      "2985",
      "e42f"
    ]
  },
  "dc24": {
    "id": "dc24",
    "label": "takeUntil"
  },
  "aec5": {
    "id": "aec5",
    "label": "until another Observable emits a value",
    "options": [
      "dc24"
    ]
  },
  "03f8": {
    "id": "03f8",
    "label": "I want to allow some values to pass",
    "options": [
      "f575",
      "f616",
      "e733",
      "e673",
      "aec5"
    ]
  },
  "e1d3": {
    "id": "e1d3",
    "label": "ignoreElements"
  },
  "993d": {
    "id": "993d",
    "label": "altogether",
    "options": [
      "e1d3"
    ]
  },
  "cf8e": {
    "id": "cf8e",
    "label": "skip"
  },
  "9d8a": {
    "id": "9d8a",
    "label": "based on a given amount",
    "options": [
      "cf8e"
    ]
  },
  "037e": {
    "id": "037e",
    "label": "skipWhile"
  },
  "2fe8": {
    "id": "2fe8",
    "label": "based on custom logic",
    "options": [
      "037e"
    ]
  },
  "dd15": {
    "id": "dd15",
    "label": "skipLast"
  },
  "dad2": {
    "id": "dad2",
    "label": "from the end of the Observable",
    "options": [
      "dd15"
    ]
  },
  "181d": {
    "id": "181d",
    "label": "skipUntil"
  },
  "b564": {
    "id": "b564",
    "label": "until another Observable emits a value",
    "options": [
      "181d"
    ]
  },
  "48ea": {
    "id": "48ea",
    "label": "distinctUntilChanged"
  },
  "888c": {
    "id": "888c",
    "label": "emitted just before the current value",
    "options": [
      "48ea"
    ]
  },
  "51ca": {
    "id": "51ca",
    "label": "distinct"
  },
  "a082": {
    "id": "a082",
    "label": "according to value equality",
    "options": [
      "888c",
      "9767"
    ]
  },
  "fd50": {
    "id": "fd50",
    "label": "emitted just before the current value",
    "options": [
      "8119"
    ]
  },
  "0659": {
    "id": "0659",
    "label": "that match some previous value",
    "options": [
      "a082",
      "6079"
    ]
  },
  "bcbf": {
    "id": "bcbf",
    "label": "throttle"
  },
  "05bd": {
    "id": "05bd",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "bcbf"
    ]
  },
  "a41e": {
    "id": "a41e",
    "label": "throttleTime"
  },
  "ee02": {
    "id": "ee02",
    "label": "where time windows are determined by a time duration",
    "options": [
      "a41e"
    ]
  },
  "858d": {
    "id": "858d",
    "label": "by emitting the first value in each time window",
    "options": [
      "05bd",
      "ee02"
    ]
  },
  "9f60": {
    "id": "9f60",
    "label": "audit"
  },
  "0739": {
    "id": "0739",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "9f60"
    ]
  },
  "c617": {
    "id": "c617",
    "label": "auditTime"
  },
  "c912": {
    "id": "c912",
    "label": "where time windows are determined by a time duration",
    "options": [
      "c617"
    ]
  },
  "647e": {
    "id": "647e",
    "label": "by emitting the last value in each time window",
    "options": [
      "0739",
      "c912"
    ]
  },
  "4d62": {
    "id": "4d62",
    "label": "debounce"
  },
  "d230": {
    "id": "d230",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "4d62"
    ]
  },
  "e392": {
    "id": "e392",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "4665"
    ]
  },
  "dd16": {
    "id": "dd16",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "d230",
      "e392"
    ]
  },
  "76cd": {
    "id": "76cd",
    "label": "that occur too frequently",
    "options": [
      "858d",
      "647e",
      "dd16"
    ]
  },
  "3b87": {
    "id": "3b87",
    "label": "I want to ignore values",
    "options": [
      "993d",
      "4463",
      "dad2",
      "b564",
      "0659",
      "76cd"
    ]
  },
  "d053": {
    "id": "d053",
    "label": "reduce"
  },
  "0ea9": {
    "id": "0ea9",
    "label": "and only output the final computed value",
    "options": [
      "d053"
    ]
  },
  "25d4": {
    "id": "25d4",
    "label": "scan"
  },
  "2ba6": {
    "id": "2ba6",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "25d4"
    ]
  },
  "e1da": {
    "id": "e1da",
    "label": "mergeScan"
  },
  "d88e": {
    "id": "d88e",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "e1da"
    ]
  },
  "79a7": {
    "id": "79a7",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "0ea9",
      "2ba6",
      "d88e"
    ]
  },
  "1f1a": {
    "id": "1f1a",
    "label": "materialize"
  },
  "b34e": {
    "id": "b34e",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "1f1a"
    ]
  },
  "cf8c": {
    "id": "cf8c",
    "label": "timeInterval"
  },
  "093c": {
    "id": "093c",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "cf8c"
    ]
  },
  "c9bc": {
    "id": "c9bc",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "b34e",
      "093c"
    ]
  },
  "0a80": {
    "id": "0a80",
    "label": "timeout"
  },
  "e6b7": {
    "id": "e6b7",
    "label": "timeoutWith"
  },
  "b404": {
    "id": "b404",
    "label": "I want to switch to another Observable",
    "options": [
      "e6b7"
    ]
  },
  "95de": {
    "id": "95de",
    "label": "after a period of inactivity",
    "options": [
      "5211",
      "b404"
    ]
  },
  "87da": {
    "id": "87da",
    "label": "single"
  },
  "1a18": {
    "id": "1a18",
    "label": "count"
  },
  "fd76": {
    "id": "fd76",
    "label": "startWith"
  },
  "639e": {
    "id": "639e",
    "label": "delay"
  },
  "6c27": {
    "id": "6c27",
    "label": "based on a given amount of time",
    "options": [
      "639e"
    ]
  },
  "b8fd": {
    "id": "b8fd",
    "label": "delayWhen"
  },
  "c40f": {
    "id": "c40f",
    "label": "based on the emissions of another Observable",
    "options": [
      "b8fd"
    ]
  },
  "1fa0": {
    "id": "1fa0",
    "label": "I want to delay the emissions",
    "options": [
      "6c27",
      "c40f"
    ]
  },
  "9ec2": {
    "id": "9ec2",
    "label": "and convert to an array",
    "options": [
      "1125"
    ]
  },
  "089d": {
    "id": "089d",
    "label": "Observable",
    "method": "toPromise"
  },
  "c982": {
    "id": "c982",
    "label": "and convert to a Promise",
    "options": [
      "089d"
    ]
  },
  "062e": {
    "id": "062e",
    "label": "until the Observable completes",
    "options": [
      "9ec2",
      "c982"
    ]
  },
  "2cd6": {
    "id": "2cd6",
    "label": "pairwise"
  },
  "300f": {
    "id": "300f",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "2cd6"
    ]
  },
  "f7ca": {
    "id": "f7ca",
    "label": "partition"
  },
  "f9d3": {
    "id": "f9d3",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "f7ca"
    ]
  },
  "c284": {
    "id": "c284",
    "label": "bufferCount"
  },
  "e584": {
    "id": "e584",
    "label": "and emit the group as an array",
    "options": [
      "c284"
    ]
  },
  "fadd": {
    "id": "fadd",
    "label": "windowCount"
  },
  "e501": {
    "id": "e501",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fadd"
    ]
  },
  "eda1": {
    "id": "eda1",
    "label": "in batches of a particular size",
    "options": [
      "e584",
      "e501"
    ]
  },
  "8a63": {
    "id": "8a63",
    "label": "bufferTime"
  },
  "7b62": {
    "id": "7b62",
    "label": "concatMapTo"
  },
  "830e": {
    "id": "830e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7b62"
    ]
  },
  "d820": {
    "id": "d820",
    "label": "based on time",
    "options": [
      "8540",
      "830e"
    ]
  },
  "61e6": {
    "id": "61e6",
    "label": "buffer"
  },
  "02a6": {
    "id": "02a6",
    "label": "and emit the group as an array",
    "options": [
      "61e6"
    ]
  },
  "86e4": {
    "id": "86e4",
    "label": "window"
  },
  "0e37": {
    "id": "0e37",
    "label": "and emit the group as a nested Observable",
    "options": [
      "86e4"
    ]
  },
  "25c7": {
    "id": "25c7",
    "label": "until another Observable emits",
    "options": [
      "02a6",
      "0e37"
    ]
  },
  "766a": {
    "id": "766a",
    "label": "bufferWhen"
  },
  "12cd": {
    "id": "12cd",
    "label": "and emit the group as an array",
    "options": [
      "766a"
    ]
  },
  "c843": {
    "id": "c843",
    "label": "windowWhen"
  },
  "325a": {
    "id": "325a",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c843"
    ]
  },
  "6dce": {
    "id": "6dce",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "12cd",
      "325a"
    ]
  },
  "559c": {
    "id": "559c",
    "label": "bufferToggle"
  },
  "2c57": {
    "id": "2c57",
    "label": "and emit the group as an array",
    "options": [
      "559c"
    ]
  },
  "0b70": {
    "id": "0b70",
    "label": "windowToggle"
  },
  "4d38": {
    "id": "4d38",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0b70"
    ]
  },
  "e678": {
    "id": "e678",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "2c57",
      "4d38"
    ]
  },
  "0e6d": {
    "id": "0e6d",
    "label": "groupBy"
  },
  "8be0": {
    "id": "8be0",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "0e6d"
    ]
  },
  "e327": {
    "id": "e327",
    "label": "I want to group the values",
    "options": [
      "062e",
      "300f",
      "f9d3",
      "eda1",
      "d820",
      "25c7",
      "6dce",
      "e678",
      "8be0"
    ]
  },
  "2a2a": {
    "id": "2a2a",
    "label": "mergeMapTo"
  },
  "d36c": {
    "id": "d36c",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2a2a"
    ]
  },
  "aa97": {
    "id": "aa97",
    "label": "mergeMap"
  },
  "ef31": {
    "id": "ef31",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "aa97"
    ]
  },
  "c571": {
    "id": "c571",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "d36c",
      "ef31"
    ]
  },
  "1bf5": {
    "id": "1bf5",
    "label": "concatMap"
  },
  "67bb": {
    "id": "67bb",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1bf5"
    ]
  },
  "e1cf": {
    "id": "e1cf",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "3381",
      "67bb"
    ]
  },
  "1ce5": {
    "id": "1ce5",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "4674"
    ]
  },
  "7d46": {
    "id": "7d46",
    "label": "switchMap"
  },
  "364d": {
    "id": "364d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7d46"
    ]
  },
  "dcc6": {
    "id": "dcc6",
    "label": "exhaustMap"
  },
  "ba0c": {
    "id": "ba0c",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "dcc6"
    ]
  },
  "4c7f": {
    "id": "4c7f",
    "label": "expand"
  },
  "dc9d": {
    "id": "dc9d",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "4c7f"
    ]
  },
  "e14e": {
    "id": "e14e",
    "label": "I want to start a new Observable for each value",
    "options": [
      "c571",
      "e1cf",
      "2519",
      "ba0c",
      "dc9d"
    ]
  },
  "3ae7": {
    "id": "3ae7",
    "label": "pipe"
  },
  "196c": {
    "id": "196c",
    "label": "share"
  },
  "e5d1": {
    "id": "e5d1",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "196c"
    ]
  },
  "281f": {
    "id": "281f",
    "label": "publish"
  },
  "68d8": {
    "id": "68d8",
    "label": "and start it manually or imperatively",
    "options": [
      "281f"
    ]
  },
  "a82d": {
    "id": "a82d",
    "label": "using a conventional Subject",
    "options": [
      "e5d1",
      "68d8"
    ]
  },
  "0bdd": {
    "id": "0bdd",
    "label": "publishBehavior"
  },
  "917e": {
    "id": "917e",
    "label": "using a BehaviorSubject",
    "options": [
      "0bdd"
    ]
  },
  "251d": {
    "id": "251d",
    "label": "publishReplay"
  },
  "9b13": {
    "id": "9b13",
    "label": "using a ReplaySubject",
    "options": [
      "251d"
    ]
  },
  "ac1f": {
    "id": "ac1f",
    "label": "using an AsyncSubject",
    "options": [
      "1350"
    ]
  },
  "d94a": {
    "id": "d94a",
    "label": "multicast"
  },
  "907a": {
    "id": "907a",
    "label": "using a specific subject implementation",
    "options": [
      "d94a"
    ]
  },
  "fb5c": {
    "id": "fb5c",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "a82d",
      "917e",
      "9b13",
      "ac1f",
      "907a"
    ]
  },
  "0f5f": {
    "id": "0f5f",
    "label": "catchError"
  },
  "5fb5": {
    "id": "5fb5",
    "label": "I want to start a new Observable",
    "options": [
      "0f5f"
    ]
  },
  "bc80": {
    "id": "bc80",
    "label": "immediately",
    "options": [
      "2586"
    ]
  },
  "de9a": {
    "id": "de9a",
    "label": "retryWhen"
  },
  "37b5": {
    "id": "37b5",
    "label": "when another Observable emits",
    "options": [
      "de9a"
    ]
  },
  "6cbd": {
    "id": "6cbd",
    "label": "I want to re-subscribe",
    "options": [
      "bc80",
      "37b5"
    ]
  },
  "eed9": {
    "id": "eed9",
    "label": "when an error occurs",
    "options": [
      "5fb5",
      "6cbd"
    ]
  },
  "45c7": {
    "id": "45c7",
    "label": "repeat"
  },
  "23c8": {
    "id": "23c8",
    "label": "immediately",
    "options": [
      "45c7"
    ]
  },
  "27a6": {
    "id": "27a6",
    "label": "repeatWhen"
  },
  "6b32": {
    "id": "6b32",
    "label": "when another Observable emits",
    "options": [
      "27a6"
    ]
  },
  "0290": {
    "id": "0290",
    "label": "I want to re-subscribe",
    "options": [
      "23c8",
      "6b32"
    ]
  },
  "1df7": {
    "id": "1df7",
    "label": "concat"
  },
  "e135": {
    "id": "e135",
    "label": "I want to start a new Observable",
    "options": [
      "1df7"
    ]
  },
  "96eb": {
    "id": "96eb",
    "label": "when it completes",
    "options": [
      "0290",
      "e135"
    ]
  },
  "21c9": {
    "id": "21c9",
    "label": "finalize"
  },
  "e71b": {
    "id": "e71b",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "21c9"
    ]
  },
  "b4af": {
    "id": "b4af",
    "label": "subscribeOn"
  },
  "c14c": {
    "id": "c14c",
    "label": "that routes calls to subscribe",
    "options": [
      "b4af"
    ]
  },
  "bd4c": {
    "id": "bd4c",
    "label": "observeOn"
  },
  "55f5": {
    "id": "55f5",
    "label": "that routes values to observers",
    "options": [
      "bd4c"
    ]
  },
  "34fa": {
    "id": "34fa",
    "label": "I want to change the scheduler",
    "options": [
      "c14c",
      "55f5"
    ]
  },
  "b7e0": {
    "id": "b7e0",
    "label": "race"
  },
  "2c1e": {
    "id": "2c1e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "b7e0"
    ]
  },
  "e909": {
    "id": "e909",
    "label": "merge"
  },
  "c4a8": {
    "id": "c4a8",
    "label": "I want to output the values from either of them",
    "options": [
      "e909"
    ]
  },
  "a3c5": {
    "id": "a3c5",
    "label": "combineLatest"
  },
  "94e8": {
    "id": "94e8",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "a3c5"
    ]
  },
  "e66f": {
    "id": "e66f",
    "label": "withLatestFrom"
  },
  "0845": {
    "id": "0845",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "e66f"
    ]
  },
  "2ef7": {
    "id": "2ef7",
    "label": "zip"
  },
  "5a43": {
    "id": "5a43",
    "label": "using each source value only once",
    "options": [
      "2ef7"
    ]
  },
  "7da1": {
    "id": "7da1",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "2c1e",
      "c4a8",
      "4260"
    ]
  },
  "a348": {
    "id": "a348",
    "label": "I have one existing Observable, and",
    "options": [
      "faf3",
      "ca39",
      "f4f6",
      "03f8",
      "3b87",
      "79a7",
      "c9bc",
      "95de",
      "9549",
      "9592",
      "4213",
      "1fa0",
      "e327",
      "e14e",
      "4366",
      "fb5c",
      "eed9",
      "96eb",
      "e71b",
      "34fa",
      "7da1"
    ]
  },
  "d71e": {
    "id": "d71e",
    "label": "race"
  },
  "f7d0": {
    "id": "f7d0",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "d71e"
    ]
  },
  "b0df": {
    "id": "b0df",
    "label": "forkJoin"
  },
  "5f35": {
    "id": "5f35",
    "label": "combineLatest"
  },
  "5f40": {
    "id": "5f40",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5f35"
    ]
  },
  "8c82": {
    "id": "8c82",
    "label": "zip"
  },
  "021b": {
    "id": "021b",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "5f40",
      "2187"
    ]
  },
  "f9d1": {
    "id": "f9d1",
    "label": "concat"
  },
  "e0e7": {
    "id": "e0e7",
    "label": "I want to subscribe to each in order",
    "options": [
      "f9d1"
    ]
  },
  "ba3e": {
    "id": "ba3e",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "f7d0",
      "2587",
      "9693",
      "021b",
      "e0e7"
    ]
  },
  "acc4": {
    "id": "acc4",
    "label": "Observable",
    "method": "create"
  },
  "2db5": {
    "id": "2db5",
    "label": "using custom logic",
    "options": [
      "acc4"
    ]
  },
  "36c8": {
    "id": "36c8",
    "label": "generate"
  },
  "0487": {
    "id": "0487",
    "label": "using a state machine similar to a for loop",
    "options": [
      "36c8"
    ]
  },
  "a844": {
    "id": "a844",
    "label": "throwError"
  },
  "6f84": {
    "id": "6f84",
    "label": "that throws an error",
    "options": [
      "a844"
    ]
  },
  "5c42": {
    "id": "5c42",
    "label": "EMPTY"
  },
  "7e06": {
    "id": "7e06",
    "label": "that just completes, without emitting values",
    "options": [
      "5c42"
    ]
  },
  "ab32": {
    "id": "ab32",
    "label": "NEVER"
  },
  "269c": {
    "id": "269c",
    "label": "that never emits anything",
    "options": [
      "ab32"
    ]
  },
  "d602": {
    "id": "d602",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "3154"
    ]
  },
  "fb07": {
    "id": "fb07",
    "label": "fromEventPattern"
  },
  "c20b": {
    "id": "c20b",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "fb07"
    ]
  },
  "68f1": {
    "id": "68f1",
    "label": "from"
  },
  "5f5c": {
    "id": "5f5c",
    "label": "from"
  },
  "52b2": {
    "id": "52b2",
    "label": "over the values in an array",
    "options": [
      "5f5c"
    ]
  },
  "6a24": {
    "id": "6a24",
    "label": "over values in a numeric range",
    "options": [
      "4141"
    ]
  },
  "61f0": {
    "id": "61f0",
    "label": "that iterates",
    "options": [
      "52b2",
      "6a24",
      "6717"
    ]
  },
  "b6bd": {
    "id": "b6bd",
    "label": "interval"
  },
  "07e0": {
    "id": "07e0",
    "label": "regularly",
    "options": [
      "b6bd"
    ]
  },
  "7b7e": {
    "id": "7b7e",
    "label": "timer"
  },
  "83ac": {
    "id": "83ac",
    "label": "with an optional initial delay",
    "options": [
      "7b7e"
    ]
  },
  "713d": {
    "id": "713d",
    "label": "that emits values on a timer",
    "options": [
      "07e0",
      "83ac"
    ]
  },
  "f462": {
    "id": "f462",
    "label": "defer"
  },
  "a21e": {
    "id": "a21e",
    "label": "which is built on demand when subscribed",
    "options": [
      "f462"
    ]
  },
  "79e3": {
    "id": "79e3",
    "label": "bindCallback"
  },
  "4b8c": {
    "id": "4b8c",
    "label": "supporting a conventional callback API",
    "options": [
      "79e3"
    ]
  },
  "6f68": {
    "id": "6f68",
    "label": "bindNodeCallback"
  },
  "f671": {
    "id": "f671",
    "label": "supporting Node.js callback style API",
    "options": [
      "6f68"
    ]
  },
  "bc3d": {
    "id": "bc3d",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4b8c",
      "f671"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "a348",
      "ba3e",
      "9610"
    ]
  }
}