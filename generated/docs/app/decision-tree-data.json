{
  "1073": {
    "id": "1073",
    "label": "using a state machine similar to a for loop",
    "options": [
      "f49a"
    ]
  },
  "1074": {
    "id": "1074",
    "label": "zip"
  },
  "1817": {
    "id": "1817",
    "label": "publishLast"
  },
  "1941": {
    "id": "1941",
    "label": "map"
  },
  "2196": {
    "id": "2196",
    "label": "based on custom logic",
    "options": [
      "038b"
    ]
  },
  "2248": {
    "id": "2248",
    "label": "according to a key or object property",
    "options": [
      "da41"
    ]
  },
  "2427": {
    "id": "2427",
    "label": "withLatestFrom"
  },
  "2492": {
    "id": "2492",
    "label": "based on a given amount",
    "options": [
      "84e2"
    ]
  },
  "2504": {
    "id": "2504",
    "label": "single"
  },
  "3164": {
    "id": "3164",
    "label": "subscribeOn"
  },
  "3293": {
    "id": "3293",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "75b8"
    ]
  },
  "3696": {
    "id": "3696",
    "label": "pluck"
  },
  "3797": {
    "id": "3797",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5335"
    ]
  },
  "4115": {
    "id": "4115",
    "label": "to be a constant value",
    "options": [
      "edd7"
    ]
  },
  "4421": {
    "id": "4421",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "67e7"
    ]
  },
  "4875": {
    "id": "4875",
    "label": "supporting a conventional callback API",
    "options": [
      "2bc6"
    ]
  },
  "5264": {
    "id": "5264",
    "label": "that iterates",
    "options": [
      "a9aa",
      "8b78",
      "f3fc"
    ]
  },
  "5335": {
    "id": "5335",
    "label": "combineLatest"
  },
  "5563": {
    "id": "5563",
    "label": "and emit the group as an array",
    "options": [
      "7b20"
    ]
  },
  "5831": {
    "id": "5831",
    "label": "I want to start a new Observable",
    "options": [
      "c498"
    ]
  },
  "6079": {
    "id": "6079",
    "label": "based on custom logic",
    "options": [
      "5b02"
    ]
  },
  "6145": {
    "id": "6145",
    "label": "delayWhen"
  },
  "6256": {
    "id": "6256",
    "label": "using a BehaviorSubject",
    "options": [
      "2bdf"
    ]
  },
  "6365": {
    "id": "6365",
    "label": "skipWhile"
  },
  "6772": {
    "id": "6772",
    "label": "I want to ignore values",
    "options": [
      "9b7d",
      "a654",
      "cb47",
      "46af",
      "17da",
      "af7e"
    ]
  },
  "7379": {
    "id": "7379",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "b82e"
    ]
  },
  "7671": {
    "id": "7671",
    "label": "I want to know how many values it emits",
    "options": [
      "d743"
    ]
  },
  "8333": {
    "id": "8333",
    "label": "until another Observable emits a value",
    "options": [
      "cd96"
    ]
  },
  "8386": {
    "id": "8386",
    "label": "immediately",
    "options": [
      "faa8"
    ]
  },
  "9348": {
    "id": "9348",
    "label": "I want to ensure there is only one value",
    "options": [
      "2504"
    ]
  },
  "9470": {
    "id": "9470",
    "label": "I want to start a new Observable",
    "options": [
      "6afb"
    ]
  },
  "edd7": {
    "id": "edd7",
    "label": "mapTo"
  },
  "e98f": {
    "id": "e98f",
    "label": "to be a value calculated through a formula",
    "options": [
      "1941"
    ]
  },
  "c8d7": {
    "id": "c8d7",
    "label": "I want to change each emitted value",
    "options": [
      "4115",
      "e98f"
    ]
  },
  "66eb": {
    "id": "66eb",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "3696"
    ]
  },
  "f03a": {
    "id": "f03a",
    "label": "tap"
  },
  "b89f": {
    "id": "b89f",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "f03a"
    ]
  },
  "5b02": {
    "id": "5b02",
    "label": "filter"
  },
  "39b2": {
    "id": "39b2",
    "label": "first"
  },
  "b5a8": {
    "id": "b5a8",
    "label": "and only the first value",
    "options": [
      "39b2"
    ]
  },
  "84e2": {
    "id": "84e2",
    "label": "take"
  },
  "038b": {
    "id": "038b",
    "label": "takeWhile"
  },
  "f84a": {
    "id": "f84a",
    "label": "if they are at the start of the Observable",
    "options": [
      "b5a8",
      "2492",
      "2196"
    ]
  },
  "f911": {
    "id": "f911",
    "label": "elementAt"
  },
  "c418": {
    "id": "c418",
    "label": "if they are exactly the n-th emission",
    "options": [
      "f911"
    ]
  },
  "0d91": {
    "id": "0d91",
    "label": "last"
  },
  "110c": {
    "id": "110c",
    "label": "and only the last value",
    "options": [
      "0d91"
    ]
  },
  "1a05": {
    "id": "1a05",
    "label": "takeLast"
  },
  "b086": {
    "id": "b086",
    "label": "based on a given amount",
    "options": [
      "1a05"
    ]
  },
  "0514": {
    "id": "0514",
    "label": "if they are at the end of the Observable",
    "options": [
      "110c",
      "b086"
    ]
  },
  "cd96": {
    "id": "cd96",
    "label": "takeUntil"
  },
  "f712": {
    "id": "f712",
    "label": "I want to allow some values to pass",
    "options": [
      "6079",
      "f84a",
      "c418",
      "0514",
      "8333"
    ]
  },
  "0e45": {
    "id": "0e45",
    "label": "ignoreElements"
  },
  "9b7d": {
    "id": "9b7d",
    "label": "altogether",
    "options": [
      "0e45"
    ]
  },
  "0048": {
    "id": "0048",
    "label": "skip"
  },
  "a998": {
    "id": "a998",
    "label": "based on a given amount",
    "options": [
      "0048"
    ]
  },
  "292e": {
    "id": "292e",
    "label": "based on custom logic",
    "options": [
      "6365"
    ]
  },
  "a654": {
    "id": "a654",
    "label": "from the start of the Observable",
    "options": [
      "a998",
      "292e"
    ]
  },
  "30a5": {
    "id": "30a5",
    "label": "skipLast"
  },
  "cb47": {
    "id": "cb47",
    "label": "from the end of the Observable",
    "options": [
      "30a5"
    ]
  },
  "9cde": {
    "id": "9cde",
    "label": "skipUntil"
  },
  "46af": {
    "id": "46af",
    "label": "until another Observable emits a value",
    "options": [
      "9cde"
    ]
  },
  "3b5a": {
    "id": "3b5a",
    "label": "distinctUntilChanged"
  },
  "0784": {
    "id": "0784",
    "label": "emitted just before the current value",
    "options": [
      "3b5a"
    ]
  },
  "380b": {
    "id": "380b",
    "label": "distinct"
  },
  "dd42": {
    "id": "dd42",
    "label": "emitted some time in the past",
    "options": [
      "380b"
    ]
  },
  "b183": {
    "id": "b183",
    "label": "according to value equality",
    "options": [
      "0784",
      "dd42"
    ]
  },
  "68e1": {
    "id": "68e1",
    "label": "distinctUntilKeyChanged"
  },
  "da41": {
    "id": "da41",
    "label": "emitted just before the current value",
    "options": [
      "68e1"
    ]
  },
  "17da": {
    "id": "17da",
    "label": "that match some previous value",
    "options": [
      "b183",
      "2248"
    ]
  },
  "b13a": {
    "id": "b13a",
    "label": "throttle"
  },
  "972e": {
    "id": "972e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "b13a"
    ]
  },
  "1f39": {
    "id": "1f39",
    "label": "throttleTime"
  },
  "3f96": {
    "id": "3f96",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1f39"
    ]
  },
  "31ec": {
    "id": "31ec",
    "label": "by emitting the first value in each time window",
    "options": [
      "972e",
      "3f96"
    ]
  },
  "a7a0": {
    "id": "a7a0",
    "label": "audit"
  },
  "e263": {
    "id": "e263",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a7a0"
    ]
  },
  "7f15": {
    "id": "7f15",
    "label": "auditTime"
  },
  "78ee": {
    "id": "78ee",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7f15"
    ]
  },
  "53a6": {
    "id": "53a6",
    "label": "by emitting the last value in each time window",
    "options": [
      "e263",
      "78ee"
    ]
  },
  "a122": {
    "id": "a122",
    "label": "debounce"
  },
  "da4c": {
    "id": "da4c",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "a122"
    ]
  },
  "7fea": {
    "id": "7fea",
    "label": "debounceTime"
  },
  "c57f": {
    "id": "c57f",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "7fea"
    ]
  },
  "5afe": {
    "id": "5afe",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "da4c",
      "c57f"
    ]
  },
  "af7e": {
    "id": "af7e",
    "label": "that occur too frequently",
    "options": [
      "31ec",
      "53a6",
      "5afe"
    ]
  },
  "e77f": {
    "id": "e77f",
    "label": "reduce"
  },
  "465b": {
    "id": "465b",
    "label": "and only output the final computed value",
    "options": [
      "e77f"
    ]
  },
  "443b": {
    "id": "443b",
    "label": "scan"
  },
  "4c8b": {
    "id": "4c8b",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "443b"
    ]
  },
  "c72b": {
    "id": "c72b",
    "label": "mergeScan"
  },
  "4f6e": {
    "id": "4f6e",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "c72b"
    ]
  },
  "acc6": {
    "id": "acc6",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "465b",
      "4c8b",
      "4f6e"
    ]
  },
  "b82e": {
    "id": "b82e",
    "label": "materialize"
  },
  "47b0": {
    "id": "47b0",
    "label": "timeInterval"
  },
  "ec12": {
    "id": "ec12",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "47b0"
    ]
  },
  "6eb6": {
    "id": "6eb6",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "7379",
      "ec12"
    ]
  },
  "c734": {
    "id": "c734",
    "label": "timeout"
  },
  "b4cc": {
    "id": "b4cc",
    "label": "I want to throw an error",
    "options": [
      "c734"
    ]
  },
  "c558": {
    "id": "c558",
    "label": "timeoutWith"
  },
  "db2b": {
    "id": "db2b",
    "label": "I want to switch to another Observable",
    "options": [
      "c558"
    ]
  },
  "b8eb": {
    "id": "b8eb",
    "label": "after a period of inactivity",
    "options": [
      "b4cc",
      "db2b"
    ]
  },
  "d743": {
    "id": "d743",
    "label": "count"
  },
  "103d": {
    "id": "103d",
    "label": "startWith"
  },
  "3a33": {
    "id": "3a33",
    "label": "I want to prepend one value",
    "options": [
      "103d"
    ]
  },
  "376d": {
    "id": "376d",
    "label": "delay"
  },
  "35b4": {
    "id": "35b4",
    "label": "based on a given amount of time",
    "options": [
      "376d"
    ]
  },
  "47a2": {
    "id": "47a2",
    "label": "based on the emissions of another Observable",
    "options": [
      "6145"
    ]
  },
  "6a1a": {
    "id": "6a1a",
    "label": "I want to delay the emissions",
    "options": [
      "35b4",
      "47a2"
    ]
  },
  "79eb": {
    "id": "79eb",
    "label": "toArray"
  },
  "9c2a": {
    "id": "9c2a",
    "label": "and convert to an array",
    "options": [
      "79eb"
    ]
  },
  "03d1": {
    "id": "03d1",
    "label": "Observable",
    "method": "toPromise"
  },
  "1f78": {
    "id": "1f78",
    "label": "and convert to a Promise",
    "options": [
      "03d1"
    ]
  },
  "fdcf": {
    "id": "fdcf",
    "label": "until the Observable completes",
    "options": [
      "9c2a",
      "1f78"
    ]
  },
  "ad5d": {
    "id": "ad5d",
    "label": "pairwise"
  },
  "e4b3": {
    "id": "e4b3",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "ad5d"
    ]
  },
  "c19b": {
    "id": "c19b",
    "label": "partition"
  },
  "20a5": {
    "id": "20a5",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "c19b"
    ]
  },
  "7fe1": {
    "id": "7fe1",
    "label": "bufferCount"
  },
  "a631": {
    "id": "a631",
    "label": "and emit the group as an array",
    "options": [
      "7fe1"
    ]
  },
  "107b": {
    "id": "107b",
    "label": "windowCount"
  },
  "5ec0": {
    "id": "5ec0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "107b"
    ]
  },
  "ea8f": {
    "id": "ea8f",
    "label": "in batches of a particular size",
    "options": [
      "a631",
      "5ec0"
    ]
  },
  "0ee6": {
    "id": "0ee6",
    "label": "bufferTime"
  },
  "0cd2": {
    "id": "0cd2",
    "label": "and emit the group as an array",
    "options": [
      "0ee6"
    ]
  },
  "0a1e": {
    "id": "0a1e",
    "label": "windowTime"
  },
  "d55d": {
    "id": "d55d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0a1e"
    ]
  },
  "eb12": {
    "id": "eb12",
    "label": "based on time",
    "options": [
      "0cd2",
      "d55d"
    ]
  },
  "349e": {
    "id": "349e",
    "label": "buffer"
  },
  "dbe1": {
    "id": "dbe1",
    "label": "and emit the group as an array",
    "options": [
      "349e"
    ]
  },
  "dfef": {
    "id": "dfef",
    "label": "window"
  },
  "2d77": {
    "id": "2d77",
    "label": "and emit the group as a nested Observable",
    "options": [
      "dfef"
    ]
  },
  "1d31": {
    "id": "1d31",
    "label": "until another Observable emits",
    "options": [
      "dbe1",
      "2d77"
    ]
  },
  "fa66": {
    "id": "fa66",
    "label": "bufferWhen"
  },
  "908f": {
    "id": "908f",
    "label": "and emit the group as an array",
    "options": [
      "fa66"
    ]
  },
  "9fc4": {
    "id": "9fc4",
    "label": "windowWhen"
  },
  "003f": {
    "id": "003f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9fc4"
    ]
  },
  "a2c1": {
    "id": "a2c1",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "908f",
      "003f"
    ]
  },
  "7b20": {
    "id": "7b20",
    "label": "bufferToggle"
  },
  "044f": {
    "id": "044f",
    "label": "windowToggle"
  },
  "fb5d": {
    "id": "fb5d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "044f"
    ]
  },
  "d4df": {
    "id": "d4df",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5563",
      "fb5d"
    ]
  },
  "729a": {
    "id": "729a",
    "label": "groupBy"
  },
  "e463": {
    "id": "e463",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "729a"
    ]
  },
  "e5c1": {
    "id": "e5c1",
    "label": "I want to group the values",
    "options": [
      "fdcf",
      "e4b3",
      "20a5",
      "ea8f",
      "eb12",
      "1d31",
      "a2c1",
      "d4df",
      "e463"
    ]
  },
  "0656": {
    "id": "0656",
    "label": "mergeMapTo"
  },
  "3d22": {
    "id": "3d22",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "0656"
    ]
  },
  "85ba": {
    "id": "85ba",
    "label": "mergeMap"
  },
  "def5": {
    "id": "def5",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "85ba"
    ]
  },
  "f5ef": {
    "id": "f5ef",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3d22",
      "def5"
    ]
  },
  "6c39": {
    "id": "6c39",
    "label": "concatMapTo"
  },
  "cc92": {
    "id": "cc92",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6c39"
    ]
  },
  "eb2c": {
    "id": "eb2c",
    "label": "concatMap"
  },
  "55f1": {
    "id": "55f1",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "eb2c"
    ]
  },
  "3e11": {
    "id": "3e11",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "cc92",
      "55f1"
    ]
  },
  "e2c6": {
    "id": "e2c6",
    "label": "switchMapTo"
  },
  "4b63": {
    "id": "4b63",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e2c6"
    ]
  },
  "75b8": {
    "id": "75b8",
    "label": "switchMap"
  },
  "73fa": {
    "id": "73fa",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "4b63",
      "3293"
    ]
  },
  "aa1b": {
    "id": "aa1b",
    "label": "exhaustMap"
  },
  "30df": {
    "id": "30df",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "aa1b"
    ]
  },
  "d8e3": {
    "id": "d8e3",
    "label": "expand"
  },
  "5f8d": {
    "id": "5f8d",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "d8e3"
    ]
  },
  "0c5e": {
    "id": "0c5e",
    "label": "I want to start a new Observable for each value",
    "options": [
      "f5ef",
      "3e11",
      "73fa",
      "30df",
      "5f8d"
    ]
  },
  "9ac5": {
    "id": "9ac5",
    "label": "pipe"
  },
  "0d00": {
    "id": "0d00",
    "label": "I want to perform custom operations",
    "options": [
      "9ac5"
    ]
  },
  "a653": {
    "id": "a653",
    "label": "share"
  },
  "8b53": {
    "id": "8b53",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "a653"
    ]
  },
  "0f79": {
    "id": "0f79",
    "label": "publish"
  },
  "da1c": {
    "id": "da1c",
    "label": "and start it manually or imperatively",
    "options": [
      "0f79"
    ]
  },
  "7eb0": {
    "id": "7eb0",
    "label": "using a conventional Subject",
    "options": [
      "8b53",
      "da1c"
    ]
  },
  "2bdf": {
    "id": "2bdf",
    "label": "publishBehavior"
  },
  "2b03": {
    "id": "2b03",
    "label": "publishReplay"
  },
  "1bf2": {
    "id": "1bf2",
    "label": "using a ReplaySubject",
    "options": [
      "2b03"
    ]
  },
  "0e6d": {
    "id": "0e6d",
    "label": "using an AsyncSubject",
    "options": [
      "1817"
    ]
  },
  "d1d3": {
    "id": "d1d3",
    "label": "multicast"
  },
  "49ac": {
    "id": "49ac",
    "label": "using a specific subject implementation",
    "options": [
      "d1d3"
    ]
  },
  "0018": {
    "id": "0018",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "7eb0",
      "6256",
      "1bf2",
      "0e6d",
      "49ac"
    ]
  },
  "c498": {
    "id": "c498",
    "label": "catchError"
  },
  "96da": {
    "id": "96da",
    "label": "retry"
  },
  "0b30": {
    "id": "0b30",
    "label": "immediately",
    "options": [
      "96da"
    ]
  },
  "66e8": {
    "id": "66e8",
    "label": "retryWhen"
  },
  "1c1c": {
    "id": "1c1c",
    "label": "when another Observable emits",
    "options": [
      "66e8"
    ]
  },
  "5efe": {
    "id": "5efe",
    "label": "I want to re-subscribe",
    "options": [
      "0b30",
      "1c1c"
    ]
  },
  "290d": {
    "id": "290d",
    "label": "when an error occurs",
    "options": [
      "5831",
      "5efe"
    ]
  },
  "faa8": {
    "id": "faa8",
    "label": "repeat"
  },
  "e438": {
    "id": "e438",
    "label": "repeatWhen"
  },
  "340c": {
    "id": "340c",
    "label": "when another Observable emits",
    "options": [
      "e438"
    ]
  },
  "bac1": {
    "id": "bac1",
    "label": "I want to re-subscribe",
    "options": [
      "8386",
      "340c"
    ]
  },
  "6afb": {
    "id": "6afb",
    "label": "concat"
  },
  "0b24": {
    "id": "0b24",
    "label": "when it completes",
    "options": [
      "bac1",
      "9470"
    ]
  },
  "f793": {
    "id": "f793",
    "label": "finalize"
  },
  "a9d1": {
    "id": "a9d1",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "f793"
    ]
  },
  "e8b9": {
    "id": "e8b9",
    "label": "that routes calls to subscribe",
    "options": [
      "3164"
    ]
  },
  "2f20": {
    "id": "2f20",
    "label": "observeOn"
  },
  "90bd": {
    "id": "90bd",
    "label": "that routes values to observers",
    "options": [
      "2f20"
    ]
  },
  "c85c": {
    "id": "c85c",
    "label": "I want to change the scheduler",
    "options": [
      "e8b9",
      "90bd"
    ]
  },
  "060d": {
    "id": "060d",
    "label": "race"
  },
  "538c": {
    "id": "538c",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "060d"
    ]
  },
  "b11d": {
    "id": "b11d",
    "label": "merge"
  },
  "0c5d": {
    "id": "0c5d",
    "label": "I want to output the values from either of them",
    "options": [
      "b11d"
    ]
  },
  "7e3a": {
    "id": "7e3a",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "2427"
    ]
  },
  "156a": {
    "id": "156a",
    "label": "using each source value only once",
    "options": [
      "1074"
    ]
  },
  "089a": {
    "id": "089a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "3797",
      "7e3a",
      "156a"
    ]
  },
  "aa78": {
    "id": "aa78",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "538c",
      "0c5d",
      "089a"
    ]
  },
  "4c09": {
    "id": "4c09",
    "label": "I have one existing Observable, and",
    "options": [
      "c8d7",
      "66eb",
      "b89f",
      "f712",
      "6772",
      "acc6",
      "6eb6",
      "b8eb",
      "9348",
      "7671",
      "3a33",
      "6a1a",
      "e5c1",
      "0c5e",
      "0d00",
      "0018",
      "290d",
      "0b24",
      "a9d1",
      "c85c",
      "aa78"
    ]
  },
  "c968": {
    "id": "c968",
    "label": "race"
  },
  "c446": {
    "id": "c446",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "c968"
    ]
  },
  "67e7": {
    "id": "67e7",
    "label": "forkJoin"
  },
  "db90": {
    "id": "db90",
    "label": "merge"
  },
  "904b": {
    "id": "904b",
    "label": "I want to output the values from either of them",
    "options": [
      "db90"
    ]
  },
  "cc96": {
    "id": "cc96",
    "label": "combineLatest"
  },
  "c5c8": {
    "id": "c5c8",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "cc96"
    ]
  },
  "f5cb": {
    "id": "f5cb",
    "label": "zip"
  },
  "41f3": {
    "id": "41f3",
    "label": "using each source value only once",
    "options": [
      "f5cb"
    ]
  },
  "01e4": {
    "id": "01e4",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "c5c8",
      "41f3"
    ]
  },
  "3c30": {
    "id": "3c30",
    "label": "concat"
  },
  "c7af": {
    "id": "c7af",
    "label": "I want to subscribe to each in order",
    "options": [
      "3c30"
    ]
  },
  "c388": {
    "id": "c388",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "c446",
      "4421",
      "904b",
      "01e4",
      "c7af"
    ]
  },
  "a306": {
    "id": "a306",
    "label": "Observable",
    "method": "create"
  },
  "834e": {
    "id": "834e",
    "label": "using custom logic",
    "options": [
      "a306"
    ]
  },
  "f49a": {
    "id": "f49a",
    "label": "generate"
  },
  "c666": {
    "id": "c666",
    "label": "throwError"
  },
  "d7a8": {
    "id": "d7a8",
    "label": "that throws an error",
    "options": [
      "c666"
    ]
  },
  "aee7": {
    "id": "aee7",
    "label": "EMPTY"
  },
  "4da7": {
    "id": "4da7",
    "label": "that just completes, without emitting values",
    "options": [
      "aee7"
    ]
  },
  "500d": {
    "id": "500d",
    "label": "NEVER"
  },
  "d255": {
    "id": "d255",
    "label": "that never emits anything",
    "options": [
      "500d"
    ]
  },
  "1a33": {
    "id": "1a33",
    "label": "fromEvent"
  },
  "e043": {
    "id": "e043",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "1a33"
    ]
  },
  "308d": {
    "id": "308d",
    "label": "fromEventPattern"
  },
  "94bc": {
    "id": "94bc",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "308d"
    ]
  },
  "408c": {
    "id": "408c",
    "label": "from an existing source of events",
    "options": [
      "e043",
      "94bc"
    ]
  },
  "4ef9": {
    "id": "4ef9",
    "label": "from"
  },
  "89aa": {
    "id": "89aa",
    "label": "from a Promise or an event source",
    "options": [
      "4ef9"
    ]
  },
  "b385": {
    "id": "b385",
    "label": "from"
  },
  "a9aa": {
    "id": "a9aa",
    "label": "over the values in an array",
    "options": [
      "b385"
    ]
  },
  "00bd": {
    "id": "00bd",
    "label": "range"
  },
  "8b78": {
    "id": "8b78",
    "label": "over values in a numeric range",
    "options": [
      "00bd"
    ]
  },
  "99b5": {
    "id": "99b5",
    "label": "of"
  },
  "f3fc": {
    "id": "f3fc",
    "label": "over prefined values given as arguments",
    "options": [
      "99b5"
    ]
  },
  "37b3": {
    "id": "37b3",
    "label": "interval"
  },
  "2b8b": {
    "id": "2b8b",
    "label": "regularly",
    "options": [
      "37b3"
    ]
  },
  "3dcc": {
    "id": "3dcc",
    "label": "timer"
  },
  "f26b": {
    "id": "f26b",
    "label": "with an optional initial delay",
    "options": [
      "3dcc"
    ]
  },
  "befb": {
    "id": "befb",
    "label": "that emits values on a timer",
    "options": [
      "2b8b",
      "f26b"
    ]
  },
  "216f": {
    "id": "216f",
    "label": "defer"
  },
  "4a9c": {
    "id": "4a9c",
    "label": "which is built on demand when subscribed",
    "options": [
      "216f"
    ]
  },
  "7d0a": {
    "id": "7d0a",
    "label": "I want to create a new Observable",
    "options": [
      "834e",
      "1073",
      "d7a8",
      "4da7",
      "d255",
      "408c",
      "89aa",
      "5264",
      "befb",
      "4a9c"
    ]
  },
  "2bc6": {
    "id": "2bc6",
    "label": "bindCallback"
  },
  "d3ae": {
    "id": "d3ae",
    "label": "bindNodeCallback"
  },
  "1e5c": {
    "id": "1e5c",
    "label": "supporting Node.js callback style API",
    "options": [
      "d3ae"
    ]
  },
  "aeee": {
    "id": "aeee",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4875",
      "1e5c"
    ]
  },
  "70d0": {
    "id": "70d0",
    "label": "I have no Observables yet, and",
    "options": [
      "7d0a",
      "aeee"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "4c09",
      "c388",
      "70d0"
    ]
  }
}