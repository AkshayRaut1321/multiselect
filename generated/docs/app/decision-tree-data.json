{
  "1290": {
    "id": "1290",
    "label": "which is built on demand when subscribed",
    "options": [
      "7278"
    ]
  },
  "1313": {
    "id": "1313",
    "label": "by emitting the last value in each time window",
    "options": [
      "6c9c",
      "353c"
    ]
  },
  "1610": {
    "id": "1610",
    "label": "observeOn"
  },
  "1670": {
    "id": "1670",
    "label": "if they are at the start of the Observable",
    "options": [
      "df4d",
      "56cc",
      "3878"
    ]
  },
  "1678": {
    "id": "1678",
    "label": "mapTo"
  },
  "2212": {
    "id": "2212",
    "label": "based on time",
    "options": [
      "858a",
      "8c65"
    ]
  },
  "2427": {
    "id": "2427",
    "label": "that routes calls to subscribe",
    "options": [
      "3cd7"
    ]
  },
  "2712": {
    "id": "2712",
    "label": "that routes values to observers",
    "options": [
      "1610"
    ]
  },
  "2757": {
    "id": "2757",
    "label": "based on a given amount",
    "options": [
      "e547"
    ]
  },
  "2959": {
    "id": "2959",
    "label": "emitted some time in the past",
    "options": [
      "a152"
    ]
  },
  "3098": {
    "id": "3098",
    "label": "from"
  },
  "3878": {
    "id": "3878",
    "label": "based on custom logic",
    "options": [
      "2c65"
    ]
  },
  "4112": {
    "id": "4112",
    "label": "using a state machine similar to a for loop",
    "options": [
      "6569"
    ]
  },
  "4216": {
    "id": "4216",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "3deb"
    ]
  },
  "4666": {
    "id": "4666",
    "label": "zip"
  },
  "5016": {
    "id": "5016",
    "label": "I want to prepend one value",
    "options": [
      "0a67"
    ]
  },
  "5126": {
    "id": "5126",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "f070",
      "67ef",
      "1e33"
    ]
  },
  "5257": {
    "id": "5257",
    "label": "race"
  },
  "5487": {
    "id": "5487",
    "label": "to be a value calculated through a formula",
    "options": [
      "de49"
    ]
  },
  "5640": {
    "id": "5640",
    "label": "and emit the group as an array",
    "options": [
      "a1b1"
    ]
  },
  "5959": {
    "id": "5959",
    "label": "that emits values on a timer",
    "options": [
      "b9ad",
      "cdd8"
    ]
  },
  "6353": {
    "id": "6353",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "c653"
    ]
  },
  "6559": {
    "id": "6559",
    "label": "skipWhile"
  },
  "6565": {
    "id": "6565",
    "label": "groupBy"
  },
  "6569": {
    "id": "6569",
    "label": "generate"
  },
  "7043": {
    "id": "7043",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "efe7"
    ]
  },
  "7045": {
    "id": "7045",
    "label": "switchMap"
  },
  "7278": {
    "id": "7278",
    "label": "defer"
  },
  "7351": {
    "id": "7351",
    "label": "I want to ensure there is only one value",
    "options": [
      "9a78"
    ]
  },
  "8239": {
    "id": "8239",
    "label": "bindNodeCallback"
  },
  "8489": {
    "id": "8489",
    "label": "publishReplay"
  },
  "8684": {
    "id": "8684",
    "label": "EMPTY"
  },
  "8793": {
    "id": "8793",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "a4b7",
      "b7fc"
    ]
  },
  "8891": {
    "id": "8891",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "108b",
      "f0fc"
    ]
  },
  "9094": {
    "id": "9094",
    "label": "debounceTime"
  },
  "9425": {
    "id": "9425",
    "label": "fromEventPattern"
  },
  "9759": {
    "id": "9759",
    "label": "merge"
  },
  "0258": {
    "id": "0258",
    "label": "to be a constant value",
    "options": [
      "1678"
    ]
  },
  "de49": {
    "id": "de49",
    "label": "map"
  },
  "bf80": {
    "id": "bf80",
    "label": "I want to change each emitted value",
    "options": [
      "0258",
      "5487"
    ]
  },
  "71ae": {
    "id": "71ae",
    "label": "pluck"
  },
  "a786": {
    "id": "a786",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "71ae"
    ]
  },
  "28d3": {
    "id": "28d3",
    "label": "tap"
  },
  "77a7": {
    "id": "77a7",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "28d3"
    ]
  },
  "01a1": {
    "id": "01a1",
    "label": "filter"
  },
  "02b9": {
    "id": "02b9",
    "label": "based on custom logic",
    "options": [
      "01a1"
    ]
  },
  "0b06": {
    "id": "0b06",
    "label": "first"
  },
  "df4d": {
    "id": "df4d",
    "label": "and only the first value",
    "options": [
      "0b06"
    ]
  },
  "098b": {
    "id": "098b",
    "label": "take"
  },
  "56cc": {
    "id": "56cc",
    "label": "based on a given amount",
    "options": [
      "098b"
    ]
  },
  "2c65": {
    "id": "2c65",
    "label": "takeWhile"
  },
  "fc1a": {
    "id": "fc1a",
    "label": "elementAt"
  },
  "b614": {
    "id": "b614",
    "label": "if they are exactly the n-th emission",
    "options": [
      "fc1a"
    ]
  },
  "a2ed": {
    "id": "a2ed",
    "label": "last"
  },
  "733a": {
    "id": "733a",
    "label": "and only the last value",
    "options": [
      "a2ed"
    ]
  },
  "e547": {
    "id": "e547",
    "label": "takeLast"
  },
  "f3bf": {
    "id": "f3bf",
    "label": "if they are at the end of the Observable",
    "options": [
      "733a",
      "2757"
    ]
  },
  "0838": {
    "id": "0838",
    "label": "takeUntil"
  },
  "9d22": {
    "id": "9d22",
    "label": "until another Observable emits a value",
    "options": [
      "0838"
    ]
  },
  "42f0": {
    "id": "42f0",
    "label": "I want to allow some values to pass",
    "options": [
      "02b9",
      "1670",
      "b614",
      "f3bf",
      "9d22"
    ]
  },
  "20e8": {
    "id": "20e8",
    "label": "ignoreElements"
  },
  "b736": {
    "id": "b736",
    "label": "altogether",
    "options": [
      "20e8"
    ]
  },
  "c046": {
    "id": "c046",
    "label": "skip"
  },
  "e8d6": {
    "id": "e8d6",
    "label": "based on a given amount",
    "options": [
      "c046"
    ]
  },
  "85f2": {
    "id": "85f2",
    "label": "based on custom logic",
    "options": [
      "6559"
    ]
  },
  "c321": {
    "id": "c321",
    "label": "from the start of the Observable",
    "options": [
      "e8d6",
      "85f2"
    ]
  },
  "3f28": {
    "id": "3f28",
    "label": "skipLast"
  },
  "d8b8": {
    "id": "d8b8",
    "label": "from the end of the Observable",
    "options": [
      "3f28"
    ]
  },
  "2bb2": {
    "id": "2bb2",
    "label": "skipUntil"
  },
  "e04c": {
    "id": "e04c",
    "label": "until another Observable emits a value",
    "options": [
      "2bb2"
    ]
  },
  "1e63": {
    "id": "1e63",
    "label": "distinctUntilChanged"
  },
  "cb05": {
    "id": "cb05",
    "label": "emitted just before the current value",
    "options": [
      "1e63"
    ]
  },
  "a152": {
    "id": "a152",
    "label": "distinct"
  },
  "24e4": {
    "id": "24e4",
    "label": "according to value equality",
    "options": [
      "cb05",
      "2959"
    ]
  },
  "f512": {
    "id": "f512",
    "label": "distinctUntilKeyChanged"
  },
  "e42a": {
    "id": "e42a",
    "label": "emitted just before the current value",
    "options": [
      "f512"
    ]
  },
  "c768": {
    "id": "c768",
    "label": "according to a key or object property",
    "options": [
      "e42a"
    ]
  },
  "536c": {
    "id": "536c",
    "label": "that match some previous value",
    "options": [
      "24e4",
      "c768"
    ]
  },
  "b49f": {
    "id": "b49f",
    "label": "throttle"
  },
  "94d3": {
    "id": "94d3",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "b49f"
    ]
  },
  "1a43": {
    "id": "1a43",
    "label": "throttleTime"
  },
  "596d": {
    "id": "596d",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1a43"
    ]
  },
  "3c42": {
    "id": "3c42",
    "label": "by emitting the first value in each time window",
    "options": [
      "94d3",
      "596d"
    ]
  },
  "afd8": {
    "id": "afd8",
    "label": "audit"
  },
  "6c9c": {
    "id": "6c9c",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "afd8"
    ]
  },
  "25a7": {
    "id": "25a7",
    "label": "auditTime"
  },
  "353c": {
    "id": "353c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "25a7"
    ]
  },
  "0ac1": {
    "id": "0ac1",
    "label": "debounce"
  },
  "503f": {
    "id": "503f",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "0ac1"
    ]
  },
  "d984": {
    "id": "d984",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "9094"
    ]
  },
  "afbf": {
    "id": "afbf",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "503f",
      "d984"
    ]
  },
  "997b": {
    "id": "997b",
    "label": "that occur too frequently",
    "options": [
      "3c42",
      "1313",
      "afbf"
    ]
  },
  "d2e8": {
    "id": "d2e8",
    "label": "I want to ignore values",
    "options": [
      "b736",
      "c321",
      "d8b8",
      "e04c",
      "536c",
      "997b"
    ]
  },
  "7e79": {
    "id": "7e79",
    "label": "reduce"
  },
  "f070": {
    "id": "f070",
    "label": "and only output the final computed value",
    "options": [
      "7e79"
    ]
  },
  "9d1f": {
    "id": "9d1f",
    "label": "scan"
  },
  "67ef": {
    "id": "67ef",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "9d1f"
    ]
  },
  "64e5": {
    "id": "64e5",
    "label": "mergeScan"
  },
  "1e33": {
    "id": "1e33",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "64e5"
    ]
  },
  "efe7": {
    "id": "efe7",
    "label": "materialize"
  },
  "e8d1": {
    "id": "e8d1",
    "label": "timeInterval"
  },
  "e17e": {
    "id": "e17e",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "e8d1"
    ]
  },
  "f3bc": {
    "id": "f3bc",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "7043",
      "e17e"
    ]
  },
  "46b0": {
    "id": "46b0",
    "label": "timeout"
  },
  "ca4b": {
    "id": "ca4b",
    "label": "I want to throw an error",
    "options": [
      "46b0"
    ]
  },
  "6d10": {
    "id": "6d10",
    "label": "timeoutWith"
  },
  "10bb": {
    "id": "10bb",
    "label": "I want to switch to another Observable",
    "options": [
      "6d10"
    ]
  },
  "8fd2": {
    "id": "8fd2",
    "label": "after a period of inactivity",
    "options": [
      "ca4b",
      "10bb"
    ]
  },
  "9a78": {
    "id": "9a78",
    "label": "single"
  },
  "d5be": {
    "id": "d5be",
    "label": "count"
  },
  "e4a8": {
    "id": "e4a8",
    "label": "I want to know how many values it emits",
    "options": [
      "d5be"
    ]
  },
  "0a67": {
    "id": "0a67",
    "label": "startWith"
  },
  "32a1": {
    "id": "32a1",
    "label": "delay"
  },
  "0158": {
    "id": "0158",
    "label": "based on a given amount of time",
    "options": [
      "32a1"
    ]
  },
  "ba65": {
    "id": "ba65",
    "label": "delayWhen"
  },
  "366a": {
    "id": "366a",
    "label": "based on the emissions of another Observable",
    "options": [
      "ba65"
    ]
  },
  "dfd5": {
    "id": "dfd5",
    "label": "I want to delay the emissions",
    "options": [
      "0158",
      "366a"
    ]
  },
  "130d": {
    "id": "130d",
    "label": "toArray"
  },
  "d6a1": {
    "id": "d6a1",
    "label": "and convert to an array",
    "options": [
      "130d"
    ]
  },
  "4d0a": {
    "id": "4d0a",
    "label": "Observable",
    "method": "toPromise"
  },
  "ed4f": {
    "id": "ed4f",
    "label": "and convert to a Promise",
    "options": [
      "4d0a"
    ]
  },
  "7ca2": {
    "id": "7ca2",
    "label": "until the Observable completes",
    "options": [
      "d6a1",
      "ed4f"
    ]
  },
  "e8a5": {
    "id": "e8a5",
    "label": "pairwise"
  },
  "c3c4": {
    "id": "c3c4",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "e8a5"
    ]
  },
  "c653": {
    "id": "c653",
    "label": "partition"
  },
  "304e": {
    "id": "304e",
    "label": "bufferCount"
  },
  "0393": {
    "id": "0393",
    "label": "and emit the group as an array",
    "options": [
      "304e"
    ]
  },
  "b9d1": {
    "id": "b9d1",
    "label": "windowCount"
  },
  "fe83": {
    "id": "fe83",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b9d1"
    ]
  },
  "df1f": {
    "id": "df1f",
    "label": "in batches of a particular size",
    "options": [
      "0393",
      "fe83"
    ]
  },
  "1c8e": {
    "id": "1c8e",
    "label": "bufferTime"
  },
  "858a": {
    "id": "858a",
    "label": "and emit the group as an array",
    "options": [
      "1c8e"
    ]
  },
  "2edf": {
    "id": "2edf",
    "label": "windowTime"
  },
  "8c65": {
    "id": "8c65",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2edf"
    ]
  },
  "bea4": {
    "id": "bea4",
    "label": "buffer"
  },
  "48cb": {
    "id": "48cb",
    "label": "and emit the group as an array",
    "options": [
      "bea4"
    ]
  },
  "9f9a": {
    "id": "9f9a",
    "label": "window"
  },
  "6b15": {
    "id": "6b15",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9f9a"
    ]
  },
  "d00a": {
    "id": "d00a",
    "label": "until another Observable emits",
    "options": [
      "48cb",
      "6b15"
    ]
  },
  "f7b1": {
    "id": "f7b1",
    "label": "bufferWhen"
  },
  "a4b7": {
    "id": "a4b7",
    "label": "and emit the group as an array",
    "options": [
      "f7b1"
    ]
  },
  "c9e8": {
    "id": "c9e8",
    "label": "windowWhen"
  },
  "b7fc": {
    "id": "b7fc",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c9e8"
    ]
  },
  "a1b1": {
    "id": "a1b1",
    "label": "bufferToggle"
  },
  "f834": {
    "id": "f834",
    "label": "windowToggle"
  },
  "f141": {
    "id": "f141",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f834"
    ]
  },
  "96c6": {
    "id": "96c6",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5640",
      "f141"
    ]
  },
  "a343": {
    "id": "a343",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6565"
    ]
  },
  "b50a": {
    "id": "b50a",
    "label": "I want to group the values",
    "options": [
      "7ca2",
      "c3c4",
      "6353",
      "df1f",
      "2212",
      "d00a",
      "8793",
      "96c6",
      "a343"
    ]
  },
  "f33a": {
    "id": "f33a",
    "label": "mergeMapTo"
  },
  "108b": {
    "id": "108b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "f33a"
    ]
  },
  "140e": {
    "id": "140e",
    "label": "mergeMap"
  },
  "f0fc": {
    "id": "f0fc",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "140e"
    ]
  },
  "5d24": {
    "id": "5d24",
    "label": "concatMapTo"
  },
  "fc05": {
    "id": "fc05",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "5d24"
    ]
  },
  "b5e9": {
    "id": "b5e9",
    "label": "concatMap"
  },
  "d30e": {
    "id": "d30e",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b5e9"
    ]
  },
  "ec7d": {
    "id": "ec7d",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "fc05",
      "d30e"
    ]
  },
  "c397": {
    "id": "c397",
    "label": "switchMapTo"
  },
  "83d9": {
    "id": "83d9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c397"
    ]
  },
  "0c76": {
    "id": "0c76",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7045"
    ]
  },
  "da01": {
    "id": "da01",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "83d9",
      "0c76"
    ]
  },
  "3deb": {
    "id": "3deb",
    "label": "exhaustMap"
  },
  "2e0b": {
    "id": "2e0b",
    "label": "expand"
  },
  "c59f": {
    "id": "c59f",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "2e0b"
    ]
  },
  "dd93": {
    "id": "dd93",
    "label": "I want to start a new Observable for each value",
    "options": [
      "8891",
      "ec7d",
      "da01",
      "4216",
      "c59f"
    ]
  },
  "83da": {
    "id": "83da",
    "label": "pipe"
  },
  "7dc3": {
    "id": "7dc3",
    "label": "I want to perform custom operations",
    "options": [
      "83da"
    ]
  },
  "5c6a": {
    "id": "5c6a",
    "label": "share"
  },
  "fa6a": {
    "id": "fa6a",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "5c6a"
    ]
  },
  "e36a": {
    "id": "e36a",
    "label": "publish"
  },
  "b78a": {
    "id": "b78a",
    "label": "and start it manually or imperatively",
    "options": [
      "e36a"
    ]
  },
  "27ee": {
    "id": "27ee",
    "label": "using a conventional Subject",
    "options": [
      "fa6a",
      "b78a"
    ]
  },
  "112b": {
    "id": "112b",
    "label": "publishBehavior"
  },
  "3c1f": {
    "id": "3c1f",
    "label": "using a BehaviorSubject",
    "options": [
      "112b"
    ]
  },
  "53fc": {
    "id": "53fc",
    "label": "using a ReplaySubject",
    "options": [
      "8489"
    ]
  },
  "efa3": {
    "id": "efa3",
    "label": "publishLast"
  },
  "5a0d": {
    "id": "5a0d",
    "label": "using an AsyncSubject",
    "options": [
      "efa3"
    ]
  },
  "e416": {
    "id": "e416",
    "label": "multicast"
  },
  "0141": {
    "id": "0141",
    "label": "using a specific subject implementation",
    "options": [
      "e416"
    ]
  },
  "e4e7": {
    "id": "e4e7",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "27ee",
      "3c1f",
      "53fc",
      "5a0d",
      "0141"
    ]
  },
  "96b3": {
    "id": "96b3",
    "label": "catchError"
  },
  "328a": {
    "id": "328a",
    "label": "I want to start a new Observable",
    "options": [
      "96b3"
    ]
  },
  "8f6c": {
    "id": "8f6c",
    "label": "retry"
  },
  "cc68": {
    "id": "cc68",
    "label": "immediately",
    "options": [
      "8f6c"
    ]
  },
  "7c02": {
    "id": "7c02",
    "label": "retryWhen"
  },
  "cce5": {
    "id": "cce5",
    "label": "when another Observable emits",
    "options": [
      "7c02"
    ]
  },
  "57f1": {
    "id": "57f1",
    "label": "I want to re-subscribe",
    "options": [
      "cc68",
      "cce5"
    ]
  },
  "4ef9": {
    "id": "4ef9",
    "label": "when an error occurs",
    "options": [
      "328a",
      "57f1"
    ]
  },
  "0c8b": {
    "id": "0c8b",
    "label": "repeat"
  },
  "531f": {
    "id": "531f",
    "label": "immediately",
    "options": [
      "0c8b"
    ]
  },
  "34a1": {
    "id": "34a1",
    "label": "repeatWhen"
  },
  "d0bf": {
    "id": "d0bf",
    "label": "when another Observable emits",
    "options": [
      "34a1"
    ]
  },
  "f00a": {
    "id": "f00a",
    "label": "I want to re-subscribe",
    "options": [
      "531f",
      "d0bf"
    ]
  },
  "131e": {
    "id": "131e",
    "label": "concat"
  },
  "da1f": {
    "id": "da1f",
    "label": "I want to start a new Observable",
    "options": [
      "131e"
    ]
  },
  "1d51": {
    "id": "1d51",
    "label": "when it completes",
    "options": [
      "f00a",
      "da1f"
    ]
  },
  "0763": {
    "id": "0763",
    "label": "finalize"
  },
  "8e27": {
    "id": "8e27",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "0763"
    ]
  },
  "3cd7": {
    "id": "3cd7",
    "label": "subscribeOn"
  },
  "be4e": {
    "id": "be4e",
    "label": "I want to change the scheduler",
    "options": [
      "2427",
      "2712"
    ]
  },
  "1b76": {
    "id": "1b76",
    "label": "race"
  },
  "0ea9": {
    "id": "0ea9",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "1b76"
    ]
  },
  "0c72": {
    "id": "0c72",
    "label": "merge"
  },
  "d193": {
    "id": "d193",
    "label": "I want to output the values from either of them",
    "options": [
      "0c72"
    ]
  },
  "d9ad": {
    "id": "d9ad",
    "label": "combineLatest"
  },
  "b1fa": {
    "id": "b1fa",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "d9ad"
    ]
  },
  "8bcd": {
    "id": "8bcd",
    "label": "withLatestFrom"
  },
  "9a8e": {
    "id": "9a8e",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "8bcd"
    ]
  },
  "b40c": {
    "id": "b40c",
    "label": "using each source value only once",
    "options": [
      "4666"
    ]
  },
  "d83b": {
    "id": "d83b",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b1fa",
      "9a8e",
      "b40c"
    ]
  },
  "06ee": {
    "id": "06ee",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "0ea9",
      "d193",
      "d83b"
    ]
  },
  "f7b2": {
    "id": "f7b2",
    "label": "I have one existing Observable, and",
    "options": [
      "bf80",
      "a786",
      "77a7",
      "42f0",
      "d2e8",
      "5126",
      "f3bc",
      "8fd2",
      "7351",
      "e4a8",
      "5016",
      "dfd5",
      "b50a",
      "dd93",
      "7dc3",
      "e4e7",
      "4ef9",
      "1d51",
      "8e27",
      "be4e",
      "06ee"
    ]
  },
  "dbd5": {
    "id": "dbd5",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "5257"
    ]
  },
  "d6ad": {
    "id": "d6ad",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "9425"
    ]
  },
  "42fc": {
    "id": "42fc",
    "label": "I want to output the values from either of them",
    "options": [
      "9759"
    ]
  },
  "7fd0": {
    "id": "7fd0",
    "label": "combineLatest"
  },
  "ac5a": {
    "id": "ac5a",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "7fd0"
    ]
  },
  "72f1": {
    "id": "72f1",
    "label": "zip"
  },
  "ef3c": {
    "id": "ef3c",
    "label": "using each source value only once",
    "options": [
      "72f1"
    ]
  },
  "12dc": {
    "id": "12dc",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ac5a",
      "ef3c"
    ]
  },
  "5e31": {
    "id": "5e31",
    "label": "concat"
  },
  "845f": {
    "id": "845f",
    "label": "I want to subscribe to each in order",
    "options": [
      "5e31"
    ]
  },
  "6f29": {
    "id": "6f29",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "dbd5",
      "d6ad",
      "42fc",
      "12dc",
      "845f"
    ]
  },
  "d779": {
    "id": "d779",
    "label": "Observable",
    "method": "create"
  },
  "8e3e": {
    "id": "8e3e",
    "label": "using custom logic",
    "options": [
      "d779"
    ]
  },
  "a9d6": {
    "id": "a9d6",
    "label": "throwError"
  },
  "e836": {
    "id": "e836",
    "label": "that throws an error",
    "options": [
      "a9d6"
    ]
  },
  "eb75": {
    "id": "eb75",
    "label": "that just completes, without emitting values",
    "options": [
      "8684"
    ]
  },
  "0e54": {
    "id": "0e54",
    "label": "NEVER"
  },
  "1daa": {
    "id": "1daa",
    "label": "that never emits anything",
    "options": [
      "0e54"
    ]
  },
  "c810": {
    "id": "c810",
    "label": "fromEvent"
  },
  "688d": {
    "id": "688d",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "c810"
    ]
  },
  "9eca": {
    "id": "9eca",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "9425"
    ]
  },
  "688e": {
    "id": "688e",
    "label": "from an existing source of events",
    "options": [
      "688d",
      "9eca"
    ]
  },
  "f830": {
    "id": "f830",
    "label": "from"
  },
  "bb53": {
    "id": "bb53",
    "label": "from a Promise or an event source",
    "options": [
      "f830"
    ]
  },
  "b636": {
    "id": "b636",
    "label": "over the values in an array",
    "options": [
      "3098"
    ]
  },
  "92dd": {
    "id": "92dd",
    "label": "range"
  },
  "6c10": {
    "id": "6c10",
    "label": "over values in a numeric range",
    "options": [
      "92dd"
    ]
  },
  "52a1": {
    "id": "52a1",
    "label": "of"
  },
  "50be": {
    "id": "50be",
    "label": "over prefined values given as arguments",
    "options": [
      "52a1"
    ]
  },
  "e17d": {
    "id": "e17d",
    "label": "that iterates",
    "options": [
      "b636",
      "6c10",
      "50be"
    ]
  },
  "dcec": {
    "id": "dcec",
    "label": "interval"
  },
  "b9ad": {
    "id": "b9ad",
    "label": "regularly",
    "options": [
      "dcec"
    ]
  },
  "fc61": {
    "id": "fc61",
    "label": "timer"
  },
  "cdd8": {
    "id": "cdd8",
    "label": "with an optional initial delay",
    "options": [
      "fc61"
    ]
  },
  "d785": {
    "id": "d785",
    "label": "I want to create a new Observable",
    "options": [
      "8e3e",
      "4112",
      "e836",
      "eb75",
      "1daa",
      "688e",
      "bb53",
      "e17d",
      "5959",
      "1290"
    ]
  },
  "5ade": {
    "id": "5ade",
    "label": "bindCallback"
  },
  "2c18": {
    "id": "2c18",
    "label": "supporting a conventional callback API",
    "options": [
      "5ade"
    ]
  },
  "cc9a": {
    "id": "cc9a",
    "label": "supporting Node.js callback style API",
    "options": [
      "8239"
    ]
  },
  "732b": {
    "id": "732b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "2c18",
      "cc9a"
    ]
  },
  "a47b": {
    "id": "a47b",
    "label": "I have no Observables yet, and",
    "options": [
      "d785",
      "732b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "f7b2",
      "6f29",
      "a47b"
    ]
  }
}