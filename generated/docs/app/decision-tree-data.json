{
  "1104": {
    "id": "1104",
    "label": "based on a given amount",
    "options": [
      "4e53"
    ]
  },
  "1210": {
    "id": "1210",
    "label": "if they are at the end of the Observable",
    "options": [
      "a5a3",
      "6106"
    ]
  },
  "1947": {
    "id": "1947",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "f794",
      "6a31"
    ]
  },
  "2054": {
    "id": "2054",
    "label": "distinctUntilKeyChanged"
  },
  "2357": {
    "id": "2357",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "eac9",
      "c617"
    ]
  },
  "2436": {
    "id": "2436",
    "label": "zip"
  },
  "2928": {
    "id": "2928",
    "label": "forkJoin"
  },
  "3444": {
    "id": "3444",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9059"
    ]
  },
  "3880": {
    "id": "3880",
    "label": "if they are exactly the n-th emission",
    "options": [
      "0529"
    ]
  },
  "4065": {
    "id": "4065",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "3b31"
    ]
  },
  "4301": {
    "id": "4301",
    "label": "if they are at the start of the Observable",
    "options": [
      "cfbc",
      "1104",
      "bde1"
    ]
  },
  "4608": {
    "id": "4608",
    "label": "and emit the group as a nested Observable",
    "options": [
      "cee7"
    ]
  },
  "4635": {
    "id": "4635",
    "label": "immediately",
    "options": [
      "42cf"
    ]
  },
  "5240": {
    "id": "5240",
    "label": "using custom logic",
    "options": [
      "f634"
    ]
  },
  "5260": {
    "id": "5260",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3ef5"
    ]
  },
  "5690": {
    "id": "5690",
    "label": "race"
  },
  "6069": {
    "id": "6069",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "9d16"
    ]
  },
  "6106": {
    "id": "6106",
    "label": "based on a given amount",
    "options": [
      "a0fc"
    ]
  },
  "6150": {
    "id": "6150",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "5a7c"
    ]
  },
  "6414": {
    "id": "6414",
    "label": "mergeScan"
  },
  "6448": {
    "id": "6448",
    "label": "generate"
  },
  "8003": {
    "id": "8003",
    "label": "which is built on demand when subscribed",
    "options": [
      "7e51"
    ]
  },
  "8127": {
    "id": "8127",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "d7d1"
    ]
  },
  "8475": {
    "id": "8475",
    "label": "expand"
  },
  "8680": {
    "id": "8680",
    "label": "I want to switch to another Observable",
    "options": [
      "20a4"
    ]
  },
  "9059": {
    "id": "9059",
    "label": "window"
  },
  "9542": {
    "id": "9542",
    "label": "delay"
  },
  "9830": {
    "id": "9830",
    "label": "emitted just before the current value",
    "options": [
      "e865"
    ]
  },
  "0dc4": {
    "id": "0dc4",
    "label": "mapTo"
  },
  "35c5": {
    "id": "35c5",
    "label": "to be a constant value",
    "options": [
      "0dc4"
    ]
  },
  "32f3": {
    "id": "32f3",
    "label": "map"
  },
  "c04b": {
    "id": "c04b",
    "label": "to be a value calculated through a formula",
    "options": [
      "32f3"
    ]
  },
  "d970": {
    "id": "d970",
    "label": "I want to change each emitted value",
    "options": [
      "35c5",
      "c04b"
    ]
  },
  "8bc5": {
    "id": "8bc5",
    "label": "pluck"
  },
  "c6c6": {
    "id": "c6c6",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "8bc5"
    ]
  },
  "ad23": {
    "id": "ad23",
    "label": "tap"
  },
  "1c35": {
    "id": "1c35",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "ad23"
    ]
  },
  "b7d0": {
    "id": "b7d0",
    "label": "filter"
  },
  "19f3": {
    "id": "19f3",
    "label": "based on custom logic",
    "options": [
      "b7d0"
    ]
  },
  "4f49": {
    "id": "4f49",
    "label": "first"
  },
  "cfbc": {
    "id": "cfbc",
    "label": "and only the first value",
    "options": [
      "4f49"
    ]
  },
  "4e53": {
    "id": "4e53",
    "label": "take"
  },
  "b2c1": {
    "id": "b2c1",
    "label": "takeWhile"
  },
  "bde1": {
    "id": "bde1",
    "label": "based on custom logic",
    "options": [
      "b2c1"
    ]
  },
  "0529": {
    "id": "0529",
    "label": "elementAt"
  },
  "8d4a": {
    "id": "8d4a",
    "label": "last"
  },
  "a5a3": {
    "id": "a5a3",
    "label": "and only the last value",
    "options": [
      "8d4a"
    ]
  },
  "a0fc": {
    "id": "a0fc",
    "label": "takeLast"
  },
  "ae9d": {
    "id": "ae9d",
    "label": "takeUntil"
  },
  "3dad": {
    "id": "3dad",
    "label": "until another Observable emits a value",
    "options": [
      "ae9d"
    ]
  },
  "eabd": {
    "id": "eabd",
    "label": "I want to allow some values to pass",
    "options": [
      "19f3",
      "4301",
      "3880",
      "1210",
      "3dad"
    ]
  },
  "f431": {
    "id": "f431",
    "label": "ignoreElements"
  },
  "21ec": {
    "id": "21ec",
    "label": "altogether",
    "options": [
      "f431"
    ]
  },
  "de0b": {
    "id": "de0b",
    "label": "skip"
  },
  "af25": {
    "id": "af25",
    "label": "based on a given amount",
    "options": [
      "de0b"
    ]
  },
  "a767": {
    "id": "a767",
    "label": "skipWhile"
  },
  "1cdd": {
    "id": "1cdd",
    "label": "based on custom logic",
    "options": [
      "a767"
    ]
  },
  "8c30": {
    "id": "8c30",
    "label": "from the start of the Observable",
    "options": [
      "af25",
      "1cdd"
    ]
  },
  "f15e": {
    "id": "f15e",
    "label": "skipLast"
  },
  "709a": {
    "id": "709a",
    "label": "from the end of the Observable",
    "options": [
      "f15e"
    ]
  },
  "2b25": {
    "id": "2b25",
    "label": "skipUntil"
  },
  "e865": {
    "id": "e865",
    "label": "distinctUntilChanged"
  },
  "e056": {
    "id": "e056",
    "label": "distinct"
  },
  "705c": {
    "id": "705c",
    "label": "emitted some time in the past",
    "options": [
      "e056"
    ]
  },
  "2e5e": {
    "id": "2e5e",
    "label": "according to value equality",
    "options": [
      "9830",
      "705c"
    ]
  },
  "3efb": {
    "id": "3efb",
    "label": "emitted just before the current value",
    "options": [
      "2054"
    ]
  },
  "7dd5": {
    "id": "7dd5",
    "label": "according to a key or object property",
    "options": [
      "3efb"
    ]
  },
  "3c8f": {
    "id": "3c8f",
    "label": "that match some previous value",
    "options": [
      "2e5e",
      "7dd5"
    ]
  },
  "dc1c": {
    "id": "dc1c",
    "label": "throttle"
  },
  "dc63": {
    "id": "dc63",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "dc1c"
    ]
  },
  "81d1": {
    "id": "81d1",
    "label": "throttleTime"
  },
  "fae4": {
    "id": "fae4",
    "label": "where time windows are determined by a time duration",
    "options": [
      "81d1"
    ]
  },
  "457c": {
    "id": "457c",
    "label": "by emitting the first value in each time window",
    "options": [
      "dc63",
      "fae4"
    ]
  },
  "3ef5": {
    "id": "3ef5",
    "label": "audit"
  },
  "1d78": {
    "id": "1d78",
    "label": "auditTime"
  },
  "bb9c": {
    "id": "bb9c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1d78"
    ]
  },
  "a2d8": {
    "id": "a2d8",
    "label": "by emitting the last value in each time window",
    "options": [
      "5260",
      "bb9c"
    ]
  },
  "b0ad": {
    "id": "b0ad",
    "label": "debounce"
  },
  "6b87": {
    "id": "6b87",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "b0ad"
    ]
  },
  "31ff": {
    "id": "31ff",
    "label": "debounceTime"
  },
  "5b36": {
    "id": "5b36",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "31ff"
    ]
  },
  "eb31": {
    "id": "eb31",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "6b87",
      "5b36"
    ]
  },
  "da3b": {
    "id": "da3b",
    "label": "that occur too frequently",
    "options": [
      "457c",
      "a2d8",
      "eb31"
    ]
  },
  "01a4": {
    "id": "01a4",
    "label": "I want to ignore values",
    "options": [
      "21ec",
      "8c30",
      "709a",
      "4065",
      "3c8f",
      "da3b"
    ]
  },
  "dd81": {
    "id": "dd81",
    "label": "reduce"
  },
  "d6d1": {
    "id": "d6d1",
    "label": "and only output the final computed value",
    "options": [
      "dd81"
    ]
  },
  "5a7c": {
    "id": "5a7c",
    "label": "scan"
  },
  "306d": {
    "id": "306d",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "6414"
    ]
  },
  "6e43": {
    "id": "6e43",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "d6d1",
      "6150",
      "306d"
    ]
  },
  "8e7f": {
    "id": "8e7f",
    "label": "materialize"
  },
  "493f": {
    "id": "493f",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "8e7f"
    ]
  },
  "9d16": {
    "id": "9d16",
    "label": "timeInterval"
  },
  "b153": {
    "id": "b153",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "493f",
      "6069"
    ]
  },
  "7f36": {
    "id": "7f36",
    "label": "timeout"
  },
  "f101": {
    "id": "f101",
    "label": "I want to throw an error",
    "options": [
      "7f36"
    ]
  },
  "20a4": {
    "id": "20a4",
    "label": "timeoutWith"
  },
  "726d": {
    "id": "726d",
    "label": "after a period of inactivity",
    "options": [
      "f101",
      "8680"
    ]
  },
  "8d8c": {
    "id": "8d8c",
    "label": "single"
  },
  "57d6": {
    "id": "57d6",
    "label": "I want to ensure there is only one value",
    "options": [
      "8d8c"
    ]
  },
  "e6ae": {
    "id": "e6ae",
    "label": "count"
  },
  "ba5b": {
    "id": "ba5b",
    "label": "I want to know how many values it emits",
    "options": [
      "e6ae"
    ]
  },
  "7ea9": {
    "id": "7ea9",
    "label": "startWith"
  },
  "0537": {
    "id": "0537",
    "label": "I want to prepend one value",
    "options": [
      "7ea9"
    ]
  },
  "2f08": {
    "id": "2f08",
    "label": "based on a given amount of time",
    "options": [
      "9542"
    ]
  },
  "8cc4": {
    "id": "8cc4",
    "label": "delayWhen"
  },
  "c7de": {
    "id": "c7de",
    "label": "based on the emissions of another Observable",
    "options": [
      "8cc4"
    ]
  },
  "259b": {
    "id": "259b",
    "label": "I want to delay the emissions",
    "options": [
      "2f08",
      "c7de"
    ]
  },
  "4bbf": {
    "id": "4bbf",
    "label": "toArray"
  },
  "6f9d": {
    "id": "6f9d",
    "label": "and convert to an array",
    "options": [
      "4bbf"
    ]
  },
  "d60f": {
    "id": "d60f",
    "label": "Observable",
    "method": "toPromise"
  },
  "c674": {
    "id": "c674",
    "label": "and convert to a Promise",
    "options": [
      "d60f"
    ]
  },
  "f241": {
    "id": "f241",
    "label": "until the Observable completes",
    "options": [
      "6f9d",
      "c674"
    ]
  },
  "49f7": {
    "id": "49f7",
    "label": "pairwise"
  },
  "2cbd": {
    "id": "2cbd",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "49f7"
    ]
  },
  "7f98": {
    "id": "7f98",
    "label": "partition"
  },
  "0dc7": {
    "id": "0dc7",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "7f98"
    ]
  },
  "236a": {
    "id": "236a",
    "label": "bufferCount"
  },
  "1b59": {
    "id": "1b59",
    "label": "and emit the group as an array",
    "options": [
      "236a"
    ]
  },
  "408d": {
    "id": "408d",
    "label": "windowCount"
  },
  "6eda": {
    "id": "6eda",
    "label": "and emit the group as a nested Observable",
    "options": [
      "408d"
    ]
  },
  "db17": {
    "id": "db17",
    "label": "in batches of a particular size",
    "options": [
      "1b59",
      "6eda"
    ]
  },
  "89fc": {
    "id": "89fc",
    "label": "bufferTime"
  },
  "0379": {
    "id": "0379",
    "label": "and emit the group as an array",
    "options": [
      "89fc"
    ]
  },
  "6d46": {
    "id": "6d46",
    "label": "windowTime"
  },
  "5e6b": {
    "id": "5e6b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6d46"
    ]
  },
  "88d5": {
    "id": "88d5",
    "label": "based on time",
    "options": [
      "0379",
      "5e6b"
    ]
  },
  "3f53": {
    "id": "3f53",
    "label": "buffer"
  },
  "19ab": {
    "id": "19ab",
    "label": "and emit the group as an array",
    "options": [
      "3f53"
    ]
  },
  "7bf8": {
    "id": "7bf8",
    "label": "until another Observable emits",
    "options": [
      "19ab",
      "3444"
    ]
  },
  "9c7a": {
    "id": "9c7a",
    "label": "bufferWhen"
  },
  "06e8": {
    "id": "06e8",
    "label": "and emit the group as an array",
    "options": [
      "9c7a"
    ]
  },
  "cee7": {
    "id": "cee7",
    "label": "windowWhen"
  },
  "a045": {
    "id": "a045",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "06e8",
      "4608"
    ]
  },
  "4b9d": {
    "id": "4b9d",
    "label": "bufferToggle"
  },
  "a590": {
    "id": "a590",
    "label": "and emit the group as an array",
    "options": [
      "4b9d"
    ]
  },
  "3db5": {
    "id": "3db5",
    "label": "windowToggle"
  },
  "5c19": {
    "id": "5c19",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3db5"
    ]
  },
  "7c14": {
    "id": "7c14",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "a590",
      "5c19"
    ]
  },
  "d95c": {
    "id": "d95c",
    "label": "groupBy"
  },
  "a2a7": {
    "id": "a2a7",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "d95c"
    ]
  },
  "cd05": {
    "id": "cd05",
    "label": "I want to group the values",
    "options": [
      "f241",
      "2cbd",
      "0dc7",
      "db17",
      "88d5",
      "7bf8",
      "a045",
      "7c14",
      "a2a7"
    ]
  },
  "a88c": {
    "id": "a88c",
    "label": "mergeMapTo"
  },
  "680d": {
    "id": "680d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a88c"
    ]
  },
  "ef7e": {
    "id": "ef7e",
    "label": "mergeMap"
  },
  "bed0": {
    "id": "bed0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "ef7e"
    ]
  },
  "0c48": {
    "id": "0c48",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "680d",
      "bed0"
    ]
  },
  "5ee8": {
    "id": "5ee8",
    "label": "concatMapTo"
  },
  "2f0f": {
    "id": "2f0f",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "5ee8"
    ]
  },
  "c8fb": {
    "id": "c8fb",
    "label": "concatMap"
  },
  "7db6": {
    "id": "7db6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c8fb"
    ]
  },
  "0def": {
    "id": "0def",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "2f0f",
      "7db6"
    ]
  },
  "eb23": {
    "id": "eb23",
    "label": "switchMapTo"
  },
  "eac9": {
    "id": "eac9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "eb23"
    ]
  },
  "2e19": {
    "id": "2e19",
    "label": "switchMap"
  },
  "c617": {
    "id": "c617",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2e19"
    ]
  },
  "c090": {
    "id": "c090",
    "label": "exhaustMap"
  },
  "dc9d": {
    "id": "dc9d",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "c090"
    ]
  },
  "b6b6": {
    "id": "b6b6",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "8475"
    ]
  },
  "0420": {
    "id": "0420",
    "label": "I want to start a new Observable for each value",
    "options": [
      "0c48",
      "0def",
      "2357",
      "dc9d",
      "b6b6"
    ]
  },
  "107b": {
    "id": "107b",
    "label": "pipe"
  },
  "3c2d": {
    "id": "3c2d",
    "label": "I want to perform custom operations",
    "options": [
      "107b"
    ]
  },
  "7c2a": {
    "id": "7c2a",
    "label": "share"
  },
  "da7a": {
    "id": "da7a",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "7c2a"
    ]
  },
  "7dde": {
    "id": "7dde",
    "label": "publish"
  },
  "672c": {
    "id": "672c",
    "label": "and start it manually or imperatively",
    "options": [
      "7dde"
    ]
  },
  "042f": {
    "id": "042f",
    "label": "using a conventional Subject",
    "options": [
      "da7a",
      "672c"
    ]
  },
  "f13e": {
    "id": "f13e",
    "label": "publishBehavior"
  },
  "bf95": {
    "id": "bf95",
    "label": "using a BehaviorSubject",
    "options": [
      "f13e"
    ]
  },
  "1a34": {
    "id": "1a34",
    "label": "publishReplay"
  },
  "75aa": {
    "id": "75aa",
    "label": "using a ReplaySubject",
    "options": [
      "1a34"
    ]
  },
  "a1af": {
    "id": "a1af",
    "label": "publishLast"
  },
  "b461": {
    "id": "b461",
    "label": "using an AsyncSubject",
    "options": [
      "a1af"
    ]
  },
  "c06a": {
    "id": "c06a",
    "label": "multicast"
  },
  "a1be": {
    "id": "a1be",
    "label": "using a specific subject implementation",
    "options": [
      "c06a"
    ]
  },
  "4df7": {
    "id": "4df7",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "042f",
      "bf95",
      "75aa",
      "b461",
      "a1be"
    ]
  },
  "49af": {
    "id": "49af",
    "label": "catchError"
  },
  "fc99": {
    "id": "fc99",
    "label": "I want to start a new Observable",
    "options": [
      "49af"
    ]
  },
  "42cf": {
    "id": "42cf",
    "label": "retry"
  },
  "07df": {
    "id": "07df",
    "label": "retryWhen"
  },
  "1b1e": {
    "id": "1b1e",
    "label": "when another Observable emits",
    "options": [
      "07df"
    ]
  },
  "cc1d": {
    "id": "cc1d",
    "label": "I want to re-subscribe",
    "options": [
      "4635",
      "1b1e"
    ]
  },
  "ac90": {
    "id": "ac90",
    "label": "when an error occurs",
    "options": [
      "fc99",
      "cc1d"
    ]
  },
  "3b20": {
    "id": "3b20",
    "label": "repeat"
  },
  "3a6a": {
    "id": "3a6a",
    "label": "immediately",
    "options": [
      "3b20"
    ]
  },
  "982d": {
    "id": "982d",
    "label": "repeatWhen"
  },
  "98d1": {
    "id": "98d1",
    "label": "when another Observable emits",
    "options": [
      "982d"
    ]
  },
  "77d9": {
    "id": "77d9",
    "label": "I want to re-subscribe",
    "options": [
      "3a6a",
      "98d1"
    ]
  },
  "144b": {
    "id": "144b",
    "label": "concat"
  },
  "c6f2": {
    "id": "c6f2",
    "label": "I want to start a new Observable",
    "options": [
      "144b"
    ]
  },
  "f6d0": {
    "id": "f6d0",
    "label": "when it completes",
    "options": [
      "77d9",
      "c6f2"
    ]
  },
  "d4e8": {
    "id": "d4e8",
    "label": "finalize"
  },
  "59ef": {
    "id": "59ef",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "d4e8"
    ]
  },
  "8fa0": {
    "id": "8fa0",
    "label": "subscribeOn"
  },
  "8bac": {
    "id": "8bac",
    "label": "that routes calls to subscribe",
    "options": [
      "8fa0"
    ]
  },
  "e9d5": {
    "id": "e9d5",
    "label": "observeOn"
  },
  "1c96": {
    "id": "1c96",
    "label": "that routes values to observers",
    "options": [
      "e9d5"
    ]
  },
  "48c1": {
    "id": "48c1",
    "label": "I want to change the scheduler",
    "options": [
      "8bac",
      "1c96"
    ]
  },
  "21b1": {
    "id": "21b1",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "5690"
    ]
  },
  "987e": {
    "id": "987e",
    "label": "merge"
  },
  "677f": {
    "id": "677f",
    "label": "I want to output the values from either of them",
    "options": [
      "987e"
    ]
  },
  "9f08": {
    "id": "9f08",
    "label": "combineLatest"
  },
  "472a": {
    "id": "472a",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "9f08"
    ]
  },
  "e7c5": {
    "id": "e7c5",
    "label": "withLatestFrom"
  },
  "d205": {
    "id": "d205",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "e7c5"
    ]
  },
  "a98b": {
    "id": "a98b",
    "label": "using each source value only once",
    "options": [
      "2436"
    ]
  },
  "ec01": {
    "id": "ec01",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "472a",
      "d205",
      "a98b"
    ]
  },
  "88fc": {
    "id": "88fc",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "21b1",
      "677f",
      "ec01"
    ]
  },
  "ed18": {
    "id": "ed18",
    "label": "I have one existing Observable, and",
    "options": [
      "d970",
      "c6c6",
      "1c35",
      "eabd",
      "01a4",
      "6e43",
      "b153",
      "726d",
      "57d6",
      "ba5b",
      "0537",
      "259b",
      "cd05",
      "0420",
      "3c2d",
      "4df7",
      "ac90",
      "f6d0",
      "59ef",
      "48c1",
      "88fc"
    ]
  },
  "404b": {
    "id": "404b",
    "label": "race"
  },
  "c67f": {
    "id": "c67f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "404b"
    ]
  },
  "d110": {
    "id": "d110",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "2928"
    ]
  },
  "9a33": {
    "id": "9a33",
    "label": "merge"
  },
  "f67f": {
    "id": "f67f",
    "label": "I want to output the values from either of them",
    "options": [
      "9a33"
    ]
  },
  "5cd8": {
    "id": "5cd8",
    "label": "combineLatest"
  },
  "4b14": {
    "id": "4b14",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5cd8"
    ]
  },
  "8d1b": {
    "id": "8d1b",
    "label": "zip"
  },
  "9b8b": {
    "id": "9b8b",
    "label": "using each source value only once",
    "options": [
      "8d1b"
    ]
  },
  "a81a": {
    "id": "a81a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "4b14",
      "9b8b"
    ]
  },
  "51e1": {
    "id": "51e1",
    "label": "concat"
  },
  "ea12": {
    "id": "ea12",
    "label": "I want to subscribe to each in order",
    "options": [
      "51e1"
    ]
  },
  "cdde": {
    "id": "cdde",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "c67f",
      "d110",
      "f67f",
      "a81a",
      "ea12"
    ]
  },
  "f634": {
    "id": "f634",
    "label": "Observable",
    "method": "create"
  },
  "f9c1": {
    "id": "f9c1",
    "label": "using a state machine similar to a for loop",
    "options": [
      "6448"
    ]
  },
  "47ab": {
    "id": "47ab",
    "label": "throwError"
  },
  "cc63": {
    "id": "cc63",
    "label": "that throws an error",
    "options": [
      "47ab"
    ]
  },
  "3a48": {
    "id": "3a48",
    "label": "EMPTY"
  },
  "ebc6": {
    "id": "ebc6",
    "label": "that just completes, without emitting values",
    "options": [
      "3a48"
    ]
  },
  "5df1": {
    "id": "5df1",
    "label": "NEVER"
  },
  "715c": {
    "id": "715c",
    "label": "that never emits anything",
    "options": [
      "5df1"
    ]
  },
  "d7d1": {
    "id": "d7d1",
    "label": "fromEvent"
  },
  "3b31": {
    "id": "3b31",
    "label": "fromEventPattern"
  },
  "b64d": {
    "id": "b64d",
    "label": "from an existing source of events",
    "options": [
      "8127",
      "4065"
    ]
  },
  "1b7d": {
    "id": "1b7d",
    "label": "from"
  },
  "82d5": {
    "id": "82d5",
    "label": "from a Promise or an event source",
    "options": [
      "1b7d"
    ]
  },
  "28a7": {
    "id": "28a7",
    "label": "from"
  },
  "45bb": {
    "id": "45bb",
    "label": "over the values in an array",
    "options": [
      "28a7"
    ]
  },
  "8adc": {
    "id": "8adc",
    "label": "range"
  },
  "22b8": {
    "id": "22b8",
    "label": "over values in a numeric range",
    "options": [
      "8adc"
    ]
  },
  "c4f0": {
    "id": "c4f0",
    "label": "of"
  },
  "0c3b": {
    "id": "0c3b",
    "label": "over prefined values given as arguments",
    "options": [
      "c4f0"
    ]
  },
  "1fef": {
    "id": "1fef",
    "label": "that iterates",
    "options": [
      "45bb",
      "22b8",
      "0c3b"
    ]
  },
  "24f9": {
    "id": "24f9",
    "label": "interval"
  },
  "01b7": {
    "id": "01b7",
    "label": "regularly",
    "options": [
      "24f9"
    ]
  },
  "f439": {
    "id": "f439",
    "label": "timer"
  },
  "cfa2": {
    "id": "cfa2",
    "label": "with an optional initial delay",
    "options": [
      "f439"
    ]
  },
  "84f9": {
    "id": "84f9",
    "label": "that emits values on a timer",
    "options": [
      "01b7",
      "cfa2"
    ]
  },
  "7e51": {
    "id": "7e51",
    "label": "defer"
  },
  "1bae": {
    "id": "1bae",
    "label": "I want to create a new Observable",
    "options": [
      "5240",
      "f9c1",
      "cc63",
      "ebc6",
      "715c",
      "b64d",
      "82d5",
      "1fef",
      "84f9",
      "8003"
    ]
  },
  "4ecf": {
    "id": "4ecf",
    "label": "bindCallback"
  },
  "f794": {
    "id": "f794",
    "label": "supporting a conventional callback API",
    "options": [
      "4ecf"
    ]
  },
  "82a3": {
    "id": "82a3",
    "label": "bindNodeCallback"
  },
  "6a31": {
    "id": "6a31",
    "label": "supporting Node.js callback style API",
    "options": [
      "82a3"
    ]
  },
  "808c": {
    "id": "808c",
    "label": "I have no Observables yet, and",
    "options": [
      "1bae",
      "1947"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ed18",
      "cdde",
      "808c"
    ]
  }
}