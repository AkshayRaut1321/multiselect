{
  "1271": {
    "id": "1271",
    "label": "throttleTime"
  },
  "1336": {
    "id": "1336",
    "label": "emitted just before the current value",
    "options": [
      "a0b0"
    ]
  },
  "1659": {
    "id": "1659",
    "label": "skip"
  },
  "1800": {
    "id": "1800",
    "label": "that throws an error",
    "options": [
      "2ce2"
    ]
  },
  "1824": {
    "id": "1824",
    "label": "in batches of a particular size",
    "options": [
      "ce0f",
      "22a8"
    ]
  },
  "1905": {
    "id": "1905",
    "label": "until another Observable emits",
    "options": [
      "fac2",
      "3aa9"
    ]
  },
  "2329": {
    "id": "2329",
    "label": "based on a given amount",
    "options": [
      "3902"
    ]
  },
  "2392": {
    "id": "2392",
    "label": "EMPTY"
  },
  "2586": {
    "id": "2586",
    "label": "partition"
  },
  "3516": {
    "id": "3516",
    "label": "based on time",
    "options": [
      "0163",
      "cad9"
    ]
  },
  "3765": {
    "id": "3765",
    "label": "debounceTime"
  },
  "3831": {
    "id": "3831",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "5efd",
      "15d2"
    ]
  },
  "3902": {
    "id": "3902",
    "label": "takeLast"
  },
  "4096": {
    "id": "4096",
    "label": "windowCount"
  },
  "4311": {
    "id": "4311",
    "label": "skipWhile"
  },
  "4437": {
    "id": "4437",
    "label": "according to a key or object property",
    "options": [
      "1336"
    ]
  },
  "5150": {
    "id": "5150",
    "label": "observeOn"
  },
  "5450": {
    "id": "5450",
    "label": "using an AsyncSubject",
    "options": [
      "fd9e"
    ]
  },
  "5758": {
    "id": "5758",
    "label": "concat"
  },
  "5919": {
    "id": "5919",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "11af",
      "c2a7"
    ]
  },
  "5925": {
    "id": "5925",
    "label": "I want to ensure there is only one value",
    "options": [
      "f150"
    ]
  },
  "6114": {
    "id": "6114",
    "label": "I want to allow some values to pass",
    "options": [
      "346f",
      "928a",
      "b4a2",
      "b481",
      "9d27"
    ]
  },
  "6749": {
    "id": "6749",
    "label": "from a Promise or an event source",
    "options": [
      "e0c8"
    ]
  },
  "7069": {
    "id": "7069",
    "label": "generate"
  },
  "7305": {
    "id": "7305",
    "label": "bufferWhen"
  },
  "7663": {
    "id": "7663",
    "label": "supporting Node.js callback style API",
    "options": [
      "b1e4"
    ]
  },
  "7959": {
    "id": "7959",
    "label": "using a state machine similar to a for loop",
    "options": [
      "7069"
    ]
  },
  "8462": {
    "id": "8462",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "9125"
    ]
  },
  "8474": {
    "id": "8474",
    "label": "materialize"
  },
  "9125": {
    "id": "9125",
    "label": "pluck"
  },
  "9449": {
    "id": "9449",
    "label": "I want to start a new Observable",
    "options": [
      "5758"
    ]
  },
  "9547": {
    "id": "9547",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "bbd2"
    ]
  },
  "9791": {
    "id": "9791",
    "label": "defer"
  },
  "994d": {
    "id": "994d",
    "label": "mapTo"
  },
  "59e9": {
    "id": "59e9",
    "label": "to be a constant value",
    "options": [
      "994d"
    ]
  },
  "d355": {
    "id": "d355",
    "label": "map"
  },
  "ae26": {
    "id": "ae26",
    "label": "to be a value calculated through a formula",
    "options": [
      "d355"
    ]
  },
  "4e59": {
    "id": "4e59",
    "label": "I want to change each emitted value",
    "options": [
      "59e9",
      "ae26"
    ]
  },
  "1e84": {
    "id": "1e84",
    "label": "tap"
  },
  "23a7": {
    "id": "23a7",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "1e84"
    ]
  },
  "6e33": {
    "id": "6e33",
    "label": "filter"
  },
  "346f": {
    "id": "346f",
    "label": "based on custom logic",
    "options": [
      "6e33"
    ]
  },
  "3d57": {
    "id": "3d57",
    "label": "first"
  },
  "9ae5": {
    "id": "9ae5",
    "label": "and only the first value",
    "options": [
      "3d57"
    ]
  },
  "e876": {
    "id": "e876",
    "label": "take"
  },
  "a875": {
    "id": "a875",
    "label": "based on a given amount",
    "options": [
      "e876"
    ]
  },
  "9ee8": {
    "id": "9ee8",
    "label": "takeWhile"
  },
  "a121": {
    "id": "a121",
    "label": "based on custom logic",
    "options": [
      "9ee8"
    ]
  },
  "928a": {
    "id": "928a",
    "label": "if they are at the start of the Observable",
    "options": [
      "9ae5",
      "a875",
      "a121"
    ]
  },
  "ad28": {
    "id": "ad28",
    "label": "elementAt"
  },
  "b4a2": {
    "id": "b4a2",
    "label": "if they are exactly the n-th emission",
    "options": [
      "ad28"
    ]
  },
  "a61a": {
    "id": "a61a",
    "label": "last"
  },
  "dbcb": {
    "id": "dbcb",
    "label": "and only the last value",
    "options": [
      "a61a"
    ]
  },
  "b481": {
    "id": "b481",
    "label": "if they are at the end of the Observable",
    "options": [
      "dbcb",
      "2329"
    ]
  },
  "1ebc": {
    "id": "1ebc",
    "label": "takeUntil"
  },
  "9d27": {
    "id": "9d27",
    "label": "until another Observable emits a value",
    "options": [
      "1ebc"
    ]
  },
  "c81d": {
    "id": "c81d",
    "label": "ignoreElements"
  },
  "ffc7": {
    "id": "ffc7",
    "label": "altogether",
    "options": [
      "c81d"
    ]
  },
  "d0d5": {
    "id": "d0d5",
    "label": "based on a given amount",
    "options": [
      "1659"
    ]
  },
  "c42d": {
    "id": "c42d",
    "label": "based on custom logic",
    "options": [
      "4311"
    ]
  },
  "ad56": {
    "id": "ad56",
    "label": "from the start of the Observable",
    "options": [
      "d0d5",
      "c42d"
    ]
  },
  "b07c": {
    "id": "b07c",
    "label": "skipLast"
  },
  "80ba": {
    "id": "80ba",
    "label": "from the end of the Observable",
    "options": [
      "b07c"
    ]
  },
  "e675": {
    "id": "e675",
    "label": "skipUntil"
  },
  "1c01": {
    "id": "1c01",
    "label": "until another Observable emits a value",
    "options": [
      "e675"
    ]
  },
  "2ea5": {
    "id": "2ea5",
    "label": "distinctUntilChanged"
  },
  "1b71": {
    "id": "1b71",
    "label": "emitted just before the current value",
    "options": [
      "2ea5"
    ]
  },
  "c03d": {
    "id": "c03d",
    "label": "distinct"
  },
  "d966": {
    "id": "d966",
    "label": "emitted some time in the past",
    "options": [
      "c03d"
    ]
  },
  "296b": {
    "id": "296b",
    "label": "according to value equality",
    "options": [
      "1b71",
      "d966"
    ]
  },
  "a0b0": {
    "id": "a0b0",
    "label": "distinctUntilKeyChanged"
  },
  "d6fe": {
    "id": "d6fe",
    "label": "that match some previous value",
    "options": [
      "296b",
      "4437"
    ]
  },
  "cc9b": {
    "id": "cc9b",
    "label": "throttle"
  },
  "17dd": {
    "id": "17dd",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "cc9b"
    ]
  },
  "317c": {
    "id": "317c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1271"
    ]
  },
  "b082": {
    "id": "b082",
    "label": "by emitting the first value in each time window",
    "options": [
      "17dd",
      "317c"
    ]
  },
  "8be6": {
    "id": "8be6",
    "label": "audit"
  },
  "dd3b": {
    "id": "dd3b",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "8be6"
    ]
  },
  "f11d": {
    "id": "f11d",
    "label": "auditTime"
  },
  "c651": {
    "id": "c651",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f11d"
    ]
  },
  "f546": {
    "id": "f546",
    "label": "by emitting the last value in each time window",
    "options": [
      "dd3b",
      "c651"
    ]
  },
  "6fc1": {
    "id": "6fc1",
    "label": "debounce"
  },
  "e1b6": {
    "id": "e1b6",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "6fc1"
    ]
  },
  "d4d9": {
    "id": "d4d9",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "3765"
    ]
  },
  "fbb2": {
    "id": "fbb2",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "e1b6",
      "d4d9"
    ]
  },
  "29e8": {
    "id": "29e8",
    "label": "that occur too frequently",
    "options": [
      "b082",
      "f546",
      "fbb2"
    ]
  },
  "0757": {
    "id": "0757",
    "label": "I want to ignore values",
    "options": [
      "ffc7",
      "ad56",
      "80ba",
      "1c01",
      "d6fe",
      "29e8"
    ]
  },
  "e591": {
    "id": "e591",
    "label": "reduce"
  },
  "9ba2": {
    "id": "9ba2",
    "label": "and only output the final computed value",
    "options": [
      "e591"
    ]
  },
  "f6bc": {
    "id": "f6bc",
    "label": "scan"
  },
  "bb54": {
    "id": "bb54",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "f6bc"
    ]
  },
  "6c18": {
    "id": "6c18",
    "label": "mergeScan"
  },
  "3f7f": {
    "id": "3f7f",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "6c18"
    ]
  },
  "85ad": {
    "id": "85ad",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "9ba2",
      "bb54",
      "3f7f"
    ]
  },
  "612f": {
    "id": "612f",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "8474"
    ]
  },
  "3fe9": {
    "id": "3fe9",
    "label": "timeInterval"
  },
  "722c": {
    "id": "722c",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "3fe9"
    ]
  },
  "cc56": {
    "id": "cc56",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "612f",
      "722c"
    ]
  },
  "1d98": {
    "id": "1d98",
    "label": "timeout"
  },
  "e107": {
    "id": "e107",
    "label": "I want to throw an error",
    "options": [
      "1d98"
    ]
  },
  "4bfc": {
    "id": "4bfc",
    "label": "timeoutWith"
  },
  "3f87": {
    "id": "3f87",
    "label": "I want to switch to another Observable",
    "options": [
      "4bfc"
    ]
  },
  "8eb6": {
    "id": "8eb6",
    "label": "after a period of inactivity",
    "options": [
      "e107",
      "3f87"
    ]
  },
  "f150": {
    "id": "f150",
    "label": "single"
  },
  "da92": {
    "id": "da92",
    "label": "count"
  },
  "f542": {
    "id": "f542",
    "label": "I want to know how many values it emits",
    "options": [
      "da92"
    ]
  },
  "3b83": {
    "id": "3b83",
    "label": "startWith"
  },
  "e462": {
    "id": "e462",
    "label": "I want to prepend one value",
    "options": [
      "3b83"
    ]
  },
  "bce1": {
    "id": "bce1",
    "label": "delay"
  },
  "0628": {
    "id": "0628",
    "label": "based on a given amount of time",
    "options": [
      "bce1"
    ]
  },
  "531b": {
    "id": "531b",
    "label": "delayWhen"
  },
  "b679": {
    "id": "b679",
    "label": "based on the emissions of another Observable",
    "options": [
      "531b"
    ]
  },
  "e40a": {
    "id": "e40a",
    "label": "I want to delay the emissions",
    "options": [
      "0628",
      "b679"
    ]
  },
  "cd2b": {
    "id": "cd2b",
    "label": "toArray"
  },
  "70ff": {
    "id": "70ff",
    "label": "and convert to an array",
    "options": [
      "cd2b"
    ]
  },
  "fb33": {
    "id": "fb33",
    "label": "Observable",
    "method": "toPromise"
  },
  "9c10": {
    "id": "9c10",
    "label": "and convert to a Promise",
    "options": [
      "fb33"
    ]
  },
  "dee9": {
    "id": "dee9",
    "label": "until the Observable completes",
    "options": [
      "70ff",
      "9c10"
    ]
  },
  "748e": {
    "id": "748e",
    "label": "pairwise"
  },
  "0467": {
    "id": "0467",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "748e"
    ]
  },
  "0f8e": {
    "id": "0f8e",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "2586"
    ]
  },
  "aa4c": {
    "id": "aa4c",
    "label": "bufferCount"
  },
  "ce0f": {
    "id": "ce0f",
    "label": "and emit the group as an array",
    "options": [
      "aa4c"
    ]
  },
  "22a8": {
    "id": "22a8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4096"
    ]
  },
  "c3e0": {
    "id": "c3e0",
    "label": "bufferTime"
  },
  "0163": {
    "id": "0163",
    "label": "and emit the group as an array",
    "options": [
      "c3e0"
    ]
  },
  "b94e": {
    "id": "b94e",
    "label": "windowTime"
  },
  "cad9": {
    "id": "cad9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b94e"
    ]
  },
  "2c8a": {
    "id": "2c8a",
    "label": "buffer"
  },
  "fac2": {
    "id": "fac2",
    "label": "and emit the group as an array",
    "options": [
      "2c8a"
    ]
  },
  "7c6c": {
    "id": "7c6c",
    "label": "window"
  },
  "3aa9": {
    "id": "3aa9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7c6c"
    ]
  },
  "11af": {
    "id": "11af",
    "label": "and emit the group as an array",
    "options": [
      "7305"
    ]
  },
  "960e": {
    "id": "960e",
    "label": "windowWhen"
  },
  "c2a7": {
    "id": "c2a7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "960e"
    ]
  },
  "9a8c": {
    "id": "9a8c",
    "label": "bufferToggle"
  },
  "ae0c": {
    "id": "ae0c",
    "label": "and emit the group as an array",
    "options": [
      "9a8c"
    ]
  },
  "17f2": {
    "id": "17f2",
    "label": "windowToggle"
  },
  "ade5": {
    "id": "ade5",
    "label": "and emit the group as a nested Observable",
    "options": [
      "17f2"
    ]
  },
  "7e6b": {
    "id": "7e6b",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "ae0c",
      "ade5"
    ]
  },
  "a2d6": {
    "id": "a2d6",
    "label": "groupBy"
  },
  "735e": {
    "id": "735e",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "a2d6"
    ]
  },
  "fbc7": {
    "id": "fbc7",
    "label": "I want to group the values",
    "options": [
      "dee9",
      "0467",
      "0f8e",
      "1824",
      "3516",
      "1905",
      "5919",
      "7e6b",
      "735e"
    ]
  },
  "e70d": {
    "id": "e70d",
    "label": "mergeMapTo"
  },
  "93b5": {
    "id": "93b5",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e70d"
    ]
  },
  "bcf0": {
    "id": "bcf0",
    "label": "mergeMap"
  },
  "ecb3": {
    "id": "ecb3",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "bcf0"
    ]
  },
  "84a1": {
    "id": "84a1",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "93b5",
      "ecb3"
    ]
  },
  "e62c": {
    "id": "e62c",
    "label": "concatMapTo"
  },
  "bfb9": {
    "id": "bfb9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e62c"
    ]
  },
  "10c4": {
    "id": "10c4",
    "label": "concatMap"
  },
  "34d0": {
    "id": "34d0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "10c4"
    ]
  },
  "d5b5": {
    "id": "d5b5",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "bfb9",
      "34d0"
    ]
  },
  "8b1b": {
    "id": "8b1b",
    "label": "switchMapTo"
  },
  "5efd": {
    "id": "5efd",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "8b1b"
    ]
  },
  "a53f": {
    "id": "a53f",
    "label": "switchMap"
  },
  "15d2": {
    "id": "15d2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a53f"
    ]
  },
  "f53c": {
    "id": "f53c",
    "label": "exhaustMap"
  },
  "844d": {
    "id": "844d",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "f53c"
    ]
  },
  "6cd6": {
    "id": "6cd6",
    "label": "expand"
  },
  "666c": {
    "id": "666c",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "6cd6"
    ]
  },
  "5f2b": {
    "id": "5f2b",
    "label": "I want to start a new Observable for each value",
    "options": [
      "84a1",
      "d5b5",
      "3831",
      "844d",
      "666c"
    ]
  },
  "a0c2": {
    "id": "a0c2",
    "label": "pipe"
  },
  "4b62": {
    "id": "4b62",
    "label": "I want to perform custom operations",
    "options": [
      "a0c2"
    ]
  },
  "bbd2": {
    "id": "bbd2",
    "label": "share"
  },
  "eb41": {
    "id": "eb41",
    "label": "publish"
  },
  "95a6": {
    "id": "95a6",
    "label": "and start it manually or imperatively",
    "options": [
      "eb41"
    ]
  },
  "cb98": {
    "id": "cb98",
    "label": "using a conventional Subject",
    "options": [
      "9547",
      "95a6"
    ]
  },
  "78bb": {
    "id": "78bb",
    "label": "publishBehavior"
  },
  "49c2": {
    "id": "49c2",
    "label": "using a BehaviorSubject",
    "options": [
      "78bb"
    ]
  },
  "83cd": {
    "id": "83cd",
    "label": "publishReplay"
  },
  "9bc9": {
    "id": "9bc9",
    "label": "using a ReplaySubject",
    "options": [
      "83cd"
    ]
  },
  "fd9e": {
    "id": "fd9e",
    "label": "publishLast"
  },
  "b3ac": {
    "id": "b3ac",
    "label": "multicast"
  },
  "f47f": {
    "id": "f47f",
    "label": "supporting a conventional callback API",
    "options": [
      "5f8b"
    ]
  },
  "ccb3": {
    "id": "ccb3",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "cb98",
      "49c2",
      "9bc9",
      "5450",
      "f47f"
    ]
  },
  "28bb": {
    "id": "28bb",
    "label": "catchError"
  },
  "2e14": {
    "id": "2e14",
    "label": "I want to start a new Observable",
    "options": [
      "28bb"
    ]
  },
  "59e4": {
    "id": "59e4",
    "label": "retry"
  },
  "7d84": {
    "id": "7d84",
    "label": "immediately",
    "options": [
      "59e4"
    ]
  },
  "897e": {
    "id": "897e",
    "label": "retryWhen"
  },
  "f2a4": {
    "id": "f2a4",
    "label": "when another Observable emits",
    "options": [
      "897e"
    ]
  },
  "e169": {
    "id": "e169",
    "label": "I want to re-subscribe",
    "options": [
      "7d84",
      "f2a4"
    ]
  },
  "f1b9": {
    "id": "f1b9",
    "label": "when an error occurs",
    "options": [
      "2e14",
      "e169"
    ]
  },
  "ec6e": {
    "id": "ec6e",
    "label": "repeat"
  },
  "9c62": {
    "id": "9c62",
    "label": "immediately",
    "options": [
      "ec6e"
    ]
  },
  "3d94": {
    "id": "3d94",
    "label": "repeatWhen"
  },
  "b64d": {
    "id": "b64d",
    "label": "when another Observable emits",
    "options": [
      "3d94"
    ]
  },
  "d551": {
    "id": "d551",
    "label": "I want to re-subscribe",
    "options": [
      "9c62",
      "b64d"
    ]
  },
  "4c7c": {
    "id": "4c7c",
    "label": "when it completes",
    "options": [
      "d551",
      "9449"
    ]
  },
  "4fb3": {
    "id": "4fb3",
    "label": "finalize"
  },
  "2b59": {
    "id": "2b59",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "4fb3"
    ]
  },
  "b92b": {
    "id": "b92b",
    "label": "subscribeOn"
  },
  "b46b": {
    "id": "b46b",
    "label": "that routes calls to subscribe",
    "options": [
      "b92b"
    ]
  },
  "57e5": {
    "id": "57e5",
    "label": "that routes values to observers",
    "options": [
      "5150"
    ]
  },
  "90a3": {
    "id": "90a3",
    "label": "I want to change the scheduler",
    "options": [
      "b46b",
      "57e5"
    ]
  },
  "e1fb": {
    "id": "e1fb",
    "label": "race"
  },
  "a116": {
    "id": "a116",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "e1fb"
    ]
  },
  "7dc2": {
    "id": "7dc2",
    "label": "merge"
  },
  "8d72": {
    "id": "8d72",
    "label": "I want to output the values from either of them",
    "options": [
      "7dc2"
    ]
  },
  "0293": {
    "id": "0293",
    "label": "combineLatest"
  },
  "25f2": {
    "id": "25f2",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "0293"
    ]
  },
  "c2be": {
    "id": "c2be",
    "label": "withLatestFrom"
  },
  "b9cd": {
    "id": "b9cd",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "c2be"
    ]
  },
  "0046": {
    "id": "0046",
    "label": "zip"
  },
  "2c8b": {
    "id": "2c8b",
    "label": "using each source value only once",
    "options": [
      "0046"
    ]
  },
  "7f3c": {
    "id": "7f3c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "25f2",
      "b9cd",
      "2c8b"
    ]
  },
  "f4f4": {
    "id": "f4f4",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "a116",
      "8d72",
      "7f3c"
    ]
  },
  "d724": {
    "id": "d724",
    "label": "I have one existing Observable, and",
    "options": [
      "4e59",
      "8462",
      "23a7",
      "6114",
      "0757",
      "85ad",
      "cc56",
      "8eb6",
      "5925",
      "f542",
      "e462",
      "e40a",
      "fbc7",
      "5f2b",
      "4b62",
      "ccb3",
      "f1b9",
      "4c7c",
      "2b59",
      "90a3",
      "f4f4"
    ]
  },
  "00e8": {
    "id": "00e8",
    "label": "race"
  },
  "bc2d": {
    "id": "bc2d",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "00e8"
    ]
  },
  "0c77": {
    "id": "0c77",
    "label": "forkJoin"
  },
  "9d26": {
    "id": "9d26",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "0c77"
    ]
  },
  "cc0f": {
    "id": "cc0f",
    "label": "merge"
  },
  "4ec7": {
    "id": "4ec7",
    "label": "I want to output the values from either of them",
    "options": [
      "cc0f"
    ]
  },
  "54cb": {
    "id": "54cb",
    "label": "combineLatest"
  },
  "912f": {
    "id": "912f",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "54cb"
    ]
  },
  "bdc0": {
    "id": "bdc0",
    "label": "zip"
  },
  "581b": {
    "id": "581b",
    "label": "using each source value only once",
    "options": [
      "bdc0"
    ]
  },
  "5d7f": {
    "id": "5d7f",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "912f",
      "581b"
    ]
  },
  "90a1": {
    "id": "90a1",
    "label": "concat"
  },
  "e867": {
    "id": "e867",
    "label": "I want to subscribe to each in order",
    "options": [
      "90a1"
    ]
  },
  "b263": {
    "id": "b263",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "bc2d",
      "9d26",
      "4ec7",
      "5d7f",
      "e867"
    ]
  },
  "f358": {
    "id": "f358",
    "label": "Observable",
    "method": "create"
  },
  "5fd1": {
    "id": "5fd1",
    "label": "using custom logic",
    "options": [
      "f358"
    ]
  },
  "2ce2": {
    "id": "2ce2",
    "label": "throwError"
  },
  "b341": {
    "id": "b341",
    "label": "that just completes, without emitting values",
    "options": [
      "2392"
    ]
  },
  "aa60": {
    "id": "aa60",
    "label": "NEVER"
  },
  "4d33": {
    "id": "4d33",
    "label": "that never emits anything",
    "options": [
      "aa60"
    ]
  },
  "b98f": {
    "id": "b98f",
    "label": "fromEvent"
  },
  "b4aa": {
    "id": "b4aa",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "b98f"
    ]
  },
  "411e": {
    "id": "411e",
    "label": "fromEventPattern"
  },
  "5aec": {
    "id": "5aec",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "411e"
    ]
  },
  "0f3f": {
    "id": "0f3f",
    "label": "from an existing source of events",
    "options": [
      "b4aa",
      "5aec"
    ]
  },
  "e0c8": {
    "id": "e0c8",
    "label": "from"
  },
  "01f2": {
    "id": "01f2",
    "label": "from"
  },
  "e475": {
    "id": "e475",
    "label": "over the values in an array",
    "options": [
      "01f2"
    ]
  },
  "e3aa": {
    "id": "e3aa",
    "label": "range"
  },
  "56f5": {
    "id": "56f5",
    "label": "over values in a numeric range",
    "options": [
      "e3aa"
    ]
  },
  "b8b4": {
    "id": "b8b4",
    "label": "of"
  },
  "62dd": {
    "id": "62dd",
    "label": "over prefined values given as arguments",
    "options": [
      "b8b4"
    ]
  },
  "257a": {
    "id": "257a",
    "label": "that iterates",
    "options": [
      "e475",
      "56f5",
      "62dd"
    ]
  },
  "1e32": {
    "id": "1e32",
    "label": "interval"
  },
  "32b5": {
    "id": "32b5",
    "label": "regularly",
    "options": [
      "1e32"
    ]
  },
  "e2b0": {
    "id": "e2b0",
    "label": "timer"
  },
  "2b76": {
    "id": "2b76",
    "label": "with an optional initial delay",
    "options": [
      "e2b0"
    ]
  },
  "3a22": {
    "id": "3a22",
    "label": "that emits values on a timer",
    "options": [
      "32b5",
      "2b76"
    ]
  },
  "b966": {
    "id": "b966",
    "label": "which is built on demand when subscribed",
    "options": [
      "9791"
    ]
  },
  "f69f": {
    "id": "f69f",
    "label": "I want to create a new Observable",
    "options": [
      "5fd1",
      "7959",
      "1800",
      "b341",
      "4d33",
      "0f3f",
      "6749",
      "257a",
      "3a22",
      "b966"
    ]
  },
  "5f8b": {
    "id": "5f8b",
    "label": "bindCallback"
  },
  "b1e4": {
    "id": "b1e4",
    "label": "bindNodeCallback"
  },
  "0c7f": {
    "id": "0c7f",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "f47f",
      "7663"
    ]
  },
  "db8b": {
    "id": "db8b",
    "label": "I have no Observables yet, and",
    "options": [
      "f69f",
      "0c7f"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "d724",
      "b263",
      "db8b"
    ]
  }
}