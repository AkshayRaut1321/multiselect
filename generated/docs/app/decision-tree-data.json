{
  "1380": {
    "id": "1380",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b567"
    ]
  },
  "1495": {
    "id": "1495",
    "label": "based on custom logic",
    "options": [
      "681f"
    ]
  },
  "1786": {
    "id": "1786",
    "label": "I want to output the values from either of them",
    "options": [
      "80a3"
    ]
  },
  "2063": {
    "id": "2063",
    "label": "window"
  },
  "2742": {
    "id": "2742",
    "label": "using each source value only once",
    "options": [
      "2e91"
    ]
  },
  "2788": {
    "id": "2788",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2063"
    ]
  },
  "2970": {
    "id": "2970",
    "label": "scan"
  },
  "3744": {
    "id": "3744",
    "label": "delay"
  },
  "3928": {
    "id": "3928",
    "label": "switchMap"
  },
  "4188": {
    "id": "4188",
    "label": "when another Observable emits",
    "options": [
      "86c4"
    ]
  },
  "4300": {
    "id": "4300",
    "label": "Observable",
    "method": "toPromise"
  },
  "4764": {
    "id": "4764",
    "label": "publish"
  },
  "4930": {
    "id": "4930",
    "label": "I want to throw an error",
    "options": [
      "337a"
    ]
  },
  "5073": {
    "id": "5073",
    "label": "tap"
  },
  "5107": {
    "id": "5107",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "f13f"
    ]
  },
  "5566": {
    "id": "5566",
    "label": "I want to switch to another Observable",
    "options": [
      "fb1b"
    ]
  },
  "5909": {
    "id": "5909",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e9bb"
    ]
  },
  "5942": {
    "id": "5942",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "37c4"
    ]
  },
  "6130": {
    "id": "6130",
    "label": "publishBehavior"
  },
  "6439": {
    "id": "6439",
    "label": "regularly",
    "options": [
      "8535"
    ]
  },
  "6657": {
    "id": "6657",
    "label": "if they are exactly the n-th emission",
    "options": [
      "e033"
    ]
  },
  "7070": {
    "id": "7070",
    "label": "by emitting the last value in each time window",
    "options": [
      "4c97",
      "aa7b"
    ]
  },
  "7075": {
    "id": "7075",
    "label": "catchError"
  },
  "8014": {
    "id": "8014",
    "label": "using a BehaviorSubject",
    "options": [
      "6130"
    ]
  },
  "8535": {
    "id": "8535",
    "label": "interval"
  },
  "8761": {
    "id": "8761",
    "label": "from an existing source of events",
    "options": [
      "0f99",
      "eada"
    ]
  },
  "9030": {
    "id": "9030",
    "label": "auditTime"
  },
  "9031": {
    "id": "9031",
    "label": "I have no Observables yet, and",
    "options": [
      "13f9",
      "dcd4"
    ]
  },
  "9059": {
    "id": "9059",
    "label": "if they are at the end of the Observable",
    "options": [
      "7bf4",
      "1ce6"
    ]
  },
  "9663": {
    "id": "9663",
    "label": "debounce"
  },
  "036b": {
    "id": "036b",
    "label": "mapTo"
  },
  "c517": {
    "id": "c517",
    "label": "to be a constant value",
    "options": [
      "036b"
    ]
  },
  "8dad": {
    "id": "8dad",
    "label": "and emit the group as a nested Observable",
    "options": [
      "810c"
    ]
  },
  "e774": {
    "id": "e774",
    "label": "to be a value calculated through a formula",
    "options": [
      "8dad"
    ]
  },
  "624f": {
    "id": "624f",
    "label": "I want to change each emitted value",
    "options": [
      "c517",
      "e774"
    ]
  },
  "2b10": {
    "id": "2b10",
    "label": "pluck"
  },
  "56c9": {
    "id": "56c9",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "2b10"
    ]
  },
  "7add": {
    "id": "7add",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "5073"
    ]
  },
  "0465": {
    "id": "0465",
    "label": "filter"
  },
  "721a": {
    "id": "721a",
    "label": "based on custom logic",
    "options": [
      "0465"
    ]
  },
  "36b3": {
    "id": "36b3",
    "label": "first"
  },
  "e8ae": {
    "id": "e8ae",
    "label": "and only the first value",
    "options": [
      "36b3"
    ]
  },
  "320b": {
    "id": "320b",
    "label": "take"
  },
  "ab29": {
    "id": "ab29",
    "label": "based on a given amount",
    "options": [
      "320b"
    ]
  },
  "6b5a": {
    "id": "6b5a",
    "label": "takeWhile"
  },
  "f1fb": {
    "id": "f1fb",
    "label": "based on custom logic",
    "options": [
      "6b5a"
    ]
  },
  "4f58": {
    "id": "4f58",
    "label": "if they are at the start of the Observable",
    "options": [
      "e8ae",
      "ab29",
      "f1fb"
    ]
  },
  "e033": {
    "id": "e033",
    "label": "elementAt"
  },
  "355d": {
    "id": "355d",
    "label": "last"
  },
  "7bf4": {
    "id": "7bf4",
    "label": "and only the last value",
    "options": [
      "355d"
    ]
  },
  "303f": {
    "id": "303f",
    "label": "takeLast"
  },
  "1ce6": {
    "id": "1ce6",
    "label": "based on a given amount",
    "options": [
      "303f"
    ]
  },
  "b086": {
    "id": "b086",
    "label": "takeUntil"
  },
  "c99b": {
    "id": "c99b",
    "label": "until another Observable emits a value",
    "options": [
      "b086"
    ]
  },
  "50be": {
    "id": "50be",
    "label": "I want to allow some values to pass",
    "options": [
      "721a",
      "4f58",
      "6657",
      "9059",
      "c99b"
    ]
  },
  "f69f": {
    "id": "f69f",
    "label": "ignoreElements"
  },
  "a2fc": {
    "id": "a2fc",
    "label": "altogether",
    "options": [
      "f69f"
    ]
  },
  "0dbe": {
    "id": "0dbe",
    "label": "skip"
  },
  "0cd2": {
    "id": "0cd2",
    "label": "based on a given amount",
    "options": [
      "0dbe"
    ]
  },
  "681f": {
    "id": "681f",
    "label": "skipWhile"
  },
  "3f52": {
    "id": "3f52",
    "label": "from the start of the Observable",
    "options": [
      "0cd2",
      "1495"
    ]
  },
  "be04": {
    "id": "be04",
    "label": "skipLast"
  },
  "ef08": {
    "id": "ef08",
    "label": "from the end of the Observable",
    "options": [
      "be04"
    ]
  },
  "46ff": {
    "id": "46ff",
    "label": "skipUntil"
  },
  "82ae": {
    "id": "82ae",
    "label": "until another Observable emits a value",
    "options": [
      "46ff"
    ]
  },
  "9f42": {
    "id": "9f42",
    "label": "distinctUntilChanged"
  },
  "c11e": {
    "id": "c11e",
    "label": "emitted just before the current value",
    "options": [
      "9f42"
    ]
  },
  "87de": {
    "id": "87de",
    "label": "distinct"
  },
  "dc8c": {
    "id": "dc8c",
    "label": "emitted some time in the past",
    "options": [
      "87de"
    ]
  },
  "232b": {
    "id": "232b",
    "label": "according to value equality",
    "options": [
      "c11e",
      "dc8c"
    ]
  },
  "94f1": {
    "id": "94f1",
    "label": "distinctUntilKeyChanged"
  },
  "d6ca": {
    "id": "d6ca",
    "label": "emitted just before the current value",
    "options": [
      "94f1"
    ]
  },
  "ee71": {
    "id": "ee71",
    "label": "according to a key or object property",
    "options": [
      "d6ca"
    ]
  },
  "4b1b": {
    "id": "4b1b",
    "label": "that match some previous value",
    "options": [
      "232b",
      "ee71"
    ]
  },
  "d93f": {
    "id": "d93f",
    "label": "throttle"
  },
  "f0f1": {
    "id": "f0f1",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d93f"
    ]
  },
  "e9bb": {
    "id": "e9bb",
    "label": "throttleTime"
  },
  "337e": {
    "id": "337e",
    "label": "by emitting the first value in each time window",
    "options": [
      "f0f1",
      "5909"
    ]
  },
  "3b32": {
    "id": "3b32",
    "label": "audit"
  },
  "4c97": {
    "id": "4c97",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3b32"
    ]
  },
  "aa7b": {
    "id": "aa7b",
    "label": "where time windows are determined by a time duration",
    "options": [
      "9030"
    ]
  },
  "87b3": {
    "id": "87b3",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "9663"
    ]
  },
  "6df5": {
    "id": "6df5",
    "label": "debounceTime"
  },
  "34b2": {
    "id": "34b2",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "6df5"
    ]
  },
  "efbf": {
    "id": "efbf",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "87b3",
      "34b2"
    ]
  },
  "80ad": {
    "id": "80ad",
    "label": "that occur too frequently",
    "options": [
      "337e",
      "7070",
      "efbf"
    ]
  },
  "878d": {
    "id": "878d",
    "label": "I want to ignore values",
    "options": [
      "a2fc",
      "3f52",
      "ef08",
      "82ae",
      "4b1b",
      "80ad"
    ]
  },
  "4ff8": {
    "id": "4ff8",
    "label": "reduce"
  },
  "3dba": {
    "id": "3dba",
    "label": "and only output the final computed value",
    "options": [
      "4ff8"
    ]
  },
  "f4c2": {
    "id": "f4c2",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "2970"
    ]
  },
  "ff1c": {
    "id": "ff1c",
    "label": "mergeScan"
  },
  "db92": {
    "id": "db92",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "ff1c"
    ]
  },
  "2e1a": {
    "id": "2e1a",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "3dba",
      "f4c2",
      "db92"
    ]
  },
  "ec69": {
    "id": "ec69",
    "label": "materialize"
  },
  "eb08": {
    "id": "eb08",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "ec69"
    ]
  },
  "71fb": {
    "id": "71fb",
    "label": "timeInterval"
  },
  "d86c": {
    "id": "d86c",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "71fb"
    ]
  },
  "a071": {
    "id": "a071",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "eb08",
      "d86c"
    ]
  },
  "337a": {
    "id": "337a",
    "label": "timeout"
  },
  "fb1b": {
    "id": "fb1b",
    "label": "timeoutWith"
  },
  "6c7f": {
    "id": "6c7f",
    "label": "after a period of inactivity",
    "options": [
      "4930",
      "5566"
    ]
  },
  "cf1f": {
    "id": "cf1f",
    "label": "single"
  },
  "41df": {
    "id": "41df",
    "label": "I want to ensure there is only one value",
    "options": [
      "cf1f"
    ]
  },
  "0aa4": {
    "id": "0aa4",
    "label": "count"
  },
  "f312": {
    "id": "f312",
    "label": "I want to know how many values it emits",
    "options": [
      "0aa4"
    ]
  },
  "be0a": {
    "id": "be0a",
    "label": "startWith"
  },
  "bdb1": {
    "id": "bdb1",
    "label": "I want to prepend one value",
    "options": [
      "be0a"
    ]
  },
  "5b9f": {
    "id": "5b9f",
    "label": "based on a given amount of time",
    "options": [
      "3744"
    ]
  },
  "8d76": {
    "id": "8d76",
    "label": "delayWhen"
  },
  "9adf": {
    "id": "9adf",
    "label": "based on the emissions of another Observable",
    "options": [
      "8d76"
    ]
  },
  "17df": {
    "id": "17df",
    "label": "I want to delay the emissions",
    "options": [
      "5b9f",
      "9adf"
    ]
  },
  "aaab": {
    "id": "aaab",
    "label": "toArray"
  },
  "35a8": {
    "id": "35a8",
    "label": "and convert to an array",
    "options": [
      "aaab"
    ]
  },
  "a68a": {
    "id": "a68a",
    "label": "and convert to a Promise",
    "options": [
      "4300"
    ]
  },
  "20cf": {
    "id": "20cf",
    "label": "until the Observable completes",
    "options": [
      "35a8",
      "a68a"
    ]
  },
  "8c51": {
    "id": "8c51",
    "label": "pairwise"
  },
  "0d28": {
    "id": "0d28",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "8c51"
    ]
  },
  "ebc1": {
    "id": "ebc1",
    "label": "partition"
  },
  "95e0": {
    "id": "95e0",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "ebc1"
    ]
  },
  "a169": {
    "id": "a169",
    "label": "bufferCount"
  },
  "ee84": {
    "id": "ee84",
    "label": "and emit the group as an array",
    "options": [
      "a169"
    ]
  },
  "0ea1": {
    "id": "0ea1",
    "label": "windowCount"
  },
  "1f92": {
    "id": "1f92",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0ea1"
    ]
  },
  "aab1": {
    "id": "aab1",
    "label": "in batches of a particular size",
    "options": [
      "ee84",
      "1f92"
    ]
  },
  "9e8b": {
    "id": "9e8b",
    "label": "bufferTime"
  },
  "d4bf": {
    "id": "d4bf",
    "label": "and emit the group as an array",
    "options": [
      "9e8b"
    ]
  },
  "810c": {
    "id": "810c",
    "label": "windowTime"
  },
  "e666": {
    "id": "e666",
    "label": "based on time",
    "options": [
      "d4bf",
      "8dad"
    ]
  },
  "1c80": {
    "id": "1c80",
    "label": "buffer"
  },
  "c7f3": {
    "id": "c7f3",
    "label": "and emit the group as an array",
    "options": [
      "1c80"
    ]
  },
  "e2ae": {
    "id": "e2ae",
    "label": "until another Observable emits",
    "options": [
      "c7f3",
      "2788"
    ]
  },
  "bfae": {
    "id": "bfae",
    "label": "bufferWhen"
  },
  "60ac": {
    "id": "60ac",
    "label": "and emit the group as an array",
    "options": [
      "bfae"
    ]
  },
  "9d9a": {
    "id": "9d9a",
    "label": "windowWhen"
  },
  "e3c4": {
    "id": "e3c4",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9d9a"
    ]
  },
  "0a59": {
    "id": "0a59",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "60ac",
      "e3c4"
    ]
  },
  "63aa": {
    "id": "63aa",
    "label": "bufferToggle"
  },
  "50a8": {
    "id": "50a8",
    "label": "and emit the group as an array",
    "options": [
      "63aa"
    ]
  },
  "bc29": {
    "id": "bc29",
    "label": "windowToggle"
  },
  "3bee": {
    "id": "3bee",
    "label": "and emit the group as a nested Observable",
    "options": [
      "bc29"
    ]
  },
  "d6f4": {
    "id": "d6f4",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "50a8",
      "3bee"
    ]
  },
  "55c6": {
    "id": "55c6",
    "label": "groupBy"
  },
  "8a76": {
    "id": "8a76",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "55c6"
    ]
  },
  "63b3": {
    "id": "63b3",
    "label": "I want to group the values",
    "options": [
      "20cf",
      "0d28",
      "95e0",
      "aab1",
      "e666",
      "e2ae",
      "0a59",
      "d6f4",
      "8a76"
    ]
  },
  "b567": {
    "id": "b567",
    "label": "mergeMapTo"
  },
  "308e": {
    "id": "308e",
    "label": "mergeMap"
  },
  "1aaa": {
    "id": "1aaa",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "308e"
    ]
  },
  "98de": {
    "id": "98de",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "1380",
      "1aaa"
    ]
  },
  "40e4": {
    "id": "40e4",
    "label": "concatMapTo"
  },
  "0ddf": {
    "id": "0ddf",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "40e4"
    ]
  },
  "adae": {
    "id": "adae",
    "label": "concatMap"
  },
  "b9c6": {
    "id": "b9c6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "adae"
    ]
  },
  "aeac": {
    "id": "aeac",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "0ddf",
      "b9c6"
    ]
  },
  "f13f": {
    "id": "f13f",
    "label": "switchMapTo"
  },
  "375f": {
    "id": "375f",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "3928"
    ]
  },
  "a139": {
    "id": "a139",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "5107",
      "375f"
    ]
  },
  "e124": {
    "id": "e124",
    "label": "exhaustMap"
  },
  "00b6": {
    "id": "00b6",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "e124"
    ]
  },
  "7de9": {
    "id": "7de9",
    "label": "expand"
  },
  "2cae": {
    "id": "2cae",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "7de9"
    ]
  },
  "9eff": {
    "id": "9eff",
    "label": "I want to start a new Observable for each value",
    "options": [
      "98de",
      "aeac",
      "a139",
      "00b6",
      "2cae"
    ]
  },
  "57dc": {
    "id": "57dc",
    "label": "pipe"
  },
  "8fd0": {
    "id": "8fd0",
    "label": "I want to perform custom operations",
    "options": [
      "57dc"
    ]
  },
  "a802": {
    "id": "a802",
    "label": "share"
  },
  "0c68": {
    "id": "0c68",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "a802"
    ]
  },
  "a1f9": {
    "id": "a1f9",
    "label": "and start it manually or imperatively",
    "options": [
      "4764"
    ]
  },
  "9cfc": {
    "id": "9cfc",
    "label": "using a conventional Subject",
    "options": [
      "0c68",
      "a1f9"
    ]
  },
  "ade5": {
    "id": "ade5",
    "label": "publishReplay"
  },
  "64e1": {
    "id": "64e1",
    "label": "using a ReplaySubject",
    "options": [
      "ade5"
    ]
  },
  "48bf": {
    "id": "48bf",
    "label": "publishLast"
  },
  "fdbf": {
    "id": "fdbf",
    "label": "using an AsyncSubject",
    "options": [
      "48bf"
    ]
  },
  "890b": {
    "id": "890b",
    "label": "multicast"
  },
  "f244": {
    "id": "f244",
    "label": "using a specific subject implementation",
    "options": [
      "890b"
    ]
  },
  "574b": {
    "id": "574b",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "9cfc",
      "8014",
      "64e1",
      "fdbf",
      "f244"
    ]
  },
  "52bf": {
    "id": "52bf",
    "label": "I want to start a new Observable",
    "options": [
      "7075"
    ]
  },
  "685e": {
    "id": "685e",
    "label": "retry"
  },
  "365c": {
    "id": "365c",
    "label": "immediately",
    "options": [
      "685e"
    ]
  },
  "d4e8": {
    "id": "d4e8",
    "label": "retryWhen"
  },
  "9f3e": {
    "id": "9f3e",
    "label": "when another Observable emits",
    "options": [
      "d4e8"
    ]
  },
  "e535": {
    "id": "e535",
    "label": "I want to re-subscribe",
    "options": [
      "365c",
      "9f3e"
    ]
  },
  "68ca": {
    "id": "68ca",
    "label": "when an error occurs",
    "options": [
      "52bf",
      "e535"
    ]
  },
  "ca03": {
    "id": "ca03",
    "label": "repeat"
  },
  "b104": {
    "id": "b104",
    "label": "immediately",
    "options": [
      "ca03"
    ]
  },
  "86c4": {
    "id": "86c4",
    "label": "repeatWhen"
  },
  "01ad": {
    "id": "01ad",
    "label": "I want to re-subscribe",
    "options": [
      "b104",
      "4188"
    ]
  },
  "f63c": {
    "id": "f63c",
    "label": "concat"
  },
  "49e3": {
    "id": "49e3",
    "label": "I want to start a new Observable",
    "options": [
      "f63c"
    ]
  },
  "c3ad": {
    "id": "c3ad",
    "label": "when it completes",
    "options": [
      "01ad",
      "49e3"
    ]
  },
  "4c7a": {
    "id": "4c7a",
    "label": "finalize"
  },
  "b25b": {
    "id": "b25b",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "4c7a"
    ]
  },
  "eb79": {
    "id": "eb79",
    "label": "subscribeOn"
  },
  "119f": {
    "id": "119f",
    "label": "that routes calls to subscribe",
    "options": [
      "eb79"
    ]
  },
  "402c": {
    "id": "402c",
    "label": "observeOn"
  },
  "bc84": {
    "id": "bc84",
    "label": "that routes values to observers",
    "options": [
      "402c"
    ]
  },
  "bc86": {
    "id": "bc86",
    "label": "I want to change the scheduler",
    "options": [
      "119f",
      "bc84"
    ]
  },
  "200d": {
    "id": "200d",
    "label": "race"
  },
  "c2d6": {
    "id": "c2d6",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "200d"
    ]
  },
  "80a3": {
    "id": "80a3",
    "label": "merge"
  },
  "a996": {
    "id": "a996",
    "label": "combineLatest"
  },
  "ef00": {
    "id": "ef00",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "a996"
    ]
  },
  "37c4": {
    "id": "37c4",
    "label": "withLatestFrom"
  },
  "2e91": {
    "id": "2e91",
    "label": "zip"
  },
  "6d84": {
    "id": "6d84",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ef00",
      "5942",
      "2742"
    ]
  },
  "452e": {
    "id": "452e",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "c2d6",
      "1786",
      "6d84"
    ]
  },
  "42b7": {
    "id": "42b7",
    "label": "I have one existing Observable, and",
    "options": [
      "624f",
      "56c9",
      "7add",
      "50be",
      "878d",
      "2e1a",
      "a071",
      "6c7f",
      "41df",
      "f312",
      "bdb1",
      "17df",
      "63b3",
      "9eff",
      "8fd0",
      "574b",
      "68ca",
      "c3ad",
      "b25b",
      "bc86",
      "452e"
    ]
  },
  "7b0f": {
    "id": "7b0f",
    "label": "race"
  },
  "b35e": {
    "id": "b35e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "7b0f"
    ]
  },
  "d484": {
    "id": "d484",
    "label": "forkJoin"
  },
  "a09e": {
    "id": "a09e",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "d484"
    ]
  },
  "a0be": {
    "id": "a0be",
    "label": "merge"
  },
  "8a10": {
    "id": "8a10",
    "label": "I want to output the values from either of them",
    "options": [
      "a0be"
    ]
  },
  "3ecc": {
    "id": "3ecc",
    "label": "combineLatest"
  },
  "b60f": {
    "id": "b60f",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "3ecc"
    ]
  },
  "454a": {
    "id": "454a",
    "label": "zip"
  },
  "d03a": {
    "id": "d03a",
    "label": "using each source value only once",
    "options": [
      "454a"
    ]
  },
  "abda": {
    "id": "abda",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b60f",
      "d03a"
    ]
  },
  "ece9": {
    "id": "ece9",
    "label": "concat"
  },
  "25a7": {
    "id": "25a7",
    "label": "I want to subscribe to each in order",
    "options": [
      "ece9"
    ]
  },
  "6f1f": {
    "id": "6f1f",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "b35e",
      "a09e",
      "8a10",
      "abda",
      "25a7"
    ]
  },
  "56a8": {
    "id": "56a8",
    "label": "Observable",
    "method": "create"
  },
  "c99f": {
    "id": "c99f",
    "label": "using custom logic",
    "options": [
      "56a8"
    ]
  },
  "3cdd": {
    "id": "3cdd",
    "label": "generate"
  },
  "4cb5": {
    "id": "4cb5",
    "label": "using a state machine similar to a for loop",
    "options": [
      "3cdd"
    ]
  },
  "cfd8": {
    "id": "cfd8",
    "label": "throwError"
  },
  "015e": {
    "id": "015e",
    "label": "that throws an error",
    "options": [
      "cfd8"
    ]
  },
  "348a": {
    "id": "348a",
    "label": "EMPTY"
  },
  "3c9f": {
    "id": "3c9f",
    "label": "that just completes, without emitting values",
    "options": [
      "348a"
    ]
  },
  "3cc9": {
    "id": "3cc9",
    "label": "NEVER"
  },
  "9f48": {
    "id": "9f48",
    "label": "that never emits anything",
    "options": [
      "3cc9"
    ]
  },
  "7ed0": {
    "id": "7ed0",
    "label": "fromEvent"
  },
  "0f99": {
    "id": "0f99",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "7ed0"
    ]
  },
  "e703": {
    "id": "e703",
    "label": "fromEventPattern"
  },
  "eada": {
    "id": "eada",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "e703"
    ]
  },
  "caac": {
    "id": "caac",
    "label": "from"
  },
  "6b68": {
    "id": "6b68",
    "label": "from a Promise or an event source",
    "options": [
      "caac"
    ]
  },
  "90b7": {
    "id": "90b7",
    "label": "from"
  },
  "b495": {
    "id": "b495",
    "label": "over the values in an array",
    "options": [
      "90b7"
    ]
  },
  "32fb": {
    "id": "32fb",
    "label": "range"
  },
  "c84b": {
    "id": "c84b",
    "label": "over values in a numeric range",
    "options": [
      "32fb"
    ]
  },
  "8a88": {
    "id": "8a88",
    "label": "of"
  },
  "a2a7": {
    "id": "a2a7",
    "label": "over prefined values given as arguments",
    "options": [
      "8a88"
    ]
  },
  "e205": {
    "id": "e205",
    "label": "that iterates",
    "options": [
      "b495",
      "c84b",
      "a2a7"
    ]
  },
  "e696": {
    "id": "e696",
    "label": "timer"
  },
  "44c6": {
    "id": "44c6",
    "label": "with an optional initial delay",
    "options": [
      "e696"
    ]
  },
  "71e9": {
    "id": "71e9",
    "label": "that emits values on a timer",
    "options": [
      "6439",
      "44c6"
    ]
  },
  "41f6": {
    "id": "41f6",
    "label": "defer"
  },
  "34aa": {
    "id": "34aa",
    "label": "which is built on demand when subscribed",
    "options": [
      "41f6"
    ]
  },
  "13f9": {
    "id": "13f9",
    "label": "I want to create a new Observable",
    "options": [
      "c99f",
      "4cb5",
      "015e",
      "3c9f",
      "9f48",
      "8761",
      "6b68",
      "e205",
      "71e9",
      "34aa"
    ]
  },
  "c917": {
    "id": "c917",
    "label": "bindCallback"
  },
  "4e01": {
    "id": "4e01",
    "label": "supporting a conventional callback API",
    "options": [
      "c917"
    ]
  },
  "c80a": {
    "id": "c80a",
    "label": "bindNodeCallback"
  },
  "ca72": {
    "id": "ca72",
    "label": "supporting Node.js callback style API",
    "options": [
      "c80a"
    ]
  },
  "dcd4": {
    "id": "dcd4",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4e01",
      "ca72"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "42b7",
      "6f1f",
      "9031"
    ]
  }
}