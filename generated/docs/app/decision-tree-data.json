{
  "1920": {
    "id": "1920",
    "label": "concat"
  },
  "2313": {
    "id": "2313",
    "label": "generate"
  },
  "2338": {
    "id": "2338",
    "label": "using a state machine similar to a for loop",
    "options": [
      "2313"
    ]
  },
  "2394": {
    "id": "2394",
    "label": "if they are exactly the n-th emission",
    "options": [
      "10d3"
    ]
  },
  "2936": {
    "id": "2936",
    "label": "based on a given amount of time",
    "options": [
      "e97f"
    ]
  },
  "3517": {
    "id": "3517",
    "label": "Observable",
    "method": "create"
  },
  "3527": {
    "id": "3527",
    "label": "throttleTime"
  },
  "3624": {
    "id": "3624",
    "label": "based on a given amount",
    "options": [
      "f2be"
    ]
  },
  "3843": {
    "id": "3843",
    "label": "that emits values on a timer",
    "options": [
      "3b55",
      "54b5"
    ]
  },
  "4203": {
    "id": "4203",
    "label": "bindCallback"
  },
  "4223": {
    "id": "4223",
    "label": "takeUntil"
  },
  "4837": {
    "id": "4837",
    "label": "fromEventPattern"
  },
  "5644": {
    "id": "5644",
    "label": "that throws an error",
    "options": [
      "306e"
    ]
  },
  "6163": {
    "id": "6163",
    "label": "and emit the group as an array",
    "options": [
      "b479"
    ]
  },
  "7702": {
    "id": "7702",
    "label": "range"
  },
  "7908": {
    "id": "7908",
    "label": "mergeMap"
  },
  "8069": {
    "id": "8069",
    "label": "using a ReplaySubject",
    "options": [
      "d34d"
    ]
  },
  "8472": {
    "id": "8472",
    "label": "tap"
  },
  "8550": {
    "id": "8550",
    "label": "that match some previous value",
    "options": [
      "698f",
      "b184"
    ]
  },
  "8636": {
    "id": "8636",
    "label": "repeatWhen"
  },
  "9169": {
    "id": "9169",
    "label": "race"
  },
  "9925": {
    "id": "9925",
    "label": "withLatestFrom"
  },
  "b7f0": {
    "id": "b7f0",
    "label": "mapTo"
  },
  "80d6": {
    "id": "80d6",
    "label": "to be a constant value",
    "options": [
      "b7f0"
    ]
  },
  "cbe2": {
    "id": "cbe2",
    "label": "map"
  },
  "31b4": {
    "id": "31b4",
    "label": "to be a value calculated through a formula",
    "options": [
      "cbe2"
    ]
  },
  "cede": {
    "id": "cede",
    "label": "I want to change each emitted value",
    "options": [
      "80d6",
      "31b4"
    ]
  },
  "0a40": {
    "id": "0a40",
    "label": "pluck"
  },
  "ec24": {
    "id": "ec24",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "0a40"
    ]
  },
  "6d2f": {
    "id": "6d2f",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "8472"
    ]
  },
  "ab0c": {
    "id": "ab0c",
    "label": "filter"
  },
  "9f72": {
    "id": "9f72",
    "label": "based on custom logic",
    "options": [
      "ab0c"
    ]
  },
  "ace4": {
    "id": "ace4",
    "label": "first"
  },
  "df1c": {
    "id": "df1c",
    "label": "and only the first value",
    "options": [
      "ace4"
    ]
  },
  "b006": {
    "id": "b006",
    "label": "take"
  },
  "f844": {
    "id": "f844",
    "label": "based on a given amount",
    "options": [
      "b006"
    ]
  },
  "2d2f": {
    "id": "2d2f",
    "label": "takeWhile"
  },
  "bba1": {
    "id": "bba1",
    "label": "based on custom logic",
    "options": [
      "2d2f"
    ]
  },
  "ca40": {
    "id": "ca40",
    "label": "if they are at the start of the Observable",
    "options": [
      "df1c",
      "f844",
      "bba1"
    ]
  },
  "10d3": {
    "id": "10d3",
    "label": "elementAt"
  },
  "f79b": {
    "id": "f79b",
    "label": "last"
  },
  "d7ca": {
    "id": "d7ca",
    "label": "and only the last value",
    "options": [
      "f79b"
    ]
  },
  "e43a": {
    "id": "e43a",
    "label": "takeLast"
  },
  "c0a7": {
    "id": "c0a7",
    "label": "based on a given amount",
    "options": [
      "e43a"
    ]
  },
  "c108": {
    "id": "c108",
    "label": "if they are at the end of the Observable",
    "options": [
      "d7ca",
      "c0a7"
    ]
  },
  "be79": {
    "id": "be79",
    "label": "until another Observable emits a value",
    "options": [
      "4223"
    ]
  },
  "3dde": {
    "id": "3dde",
    "label": "I want to allow some values to pass",
    "options": [
      "9f72",
      "ca40",
      "2394",
      "c108",
      "be79"
    ]
  },
  "017b": {
    "id": "017b",
    "label": "ignoreElements"
  },
  "28d7": {
    "id": "28d7",
    "label": "altogether",
    "options": [
      "017b"
    ]
  },
  "f2be": {
    "id": "f2be",
    "label": "skip"
  },
  "2bbf": {
    "id": "2bbf",
    "label": "skipWhile"
  },
  "87b5": {
    "id": "87b5",
    "label": "based on custom logic",
    "options": [
      "2bbf"
    ]
  },
  "e939": {
    "id": "e939",
    "label": "from the start of the Observable",
    "options": [
      "3624",
      "87b5"
    ]
  },
  "151d": {
    "id": "151d",
    "label": "skipLast"
  },
  "ea41": {
    "id": "ea41",
    "label": "from the end of the Observable",
    "options": [
      "151d"
    ]
  },
  "ab51": {
    "id": "ab51",
    "label": "skipUntil"
  },
  "e60f": {
    "id": "e60f",
    "label": "until another Observable emits a value",
    "options": [
      "ab51"
    ]
  },
  "a276": {
    "id": "a276",
    "label": "distinctUntilChanged"
  },
  "f4d0": {
    "id": "f4d0",
    "label": "emitted just before the current value",
    "options": [
      "a276"
    ]
  },
  "66c8": {
    "id": "66c8",
    "label": "distinct"
  },
  "0cf8": {
    "id": "0cf8",
    "label": "emitted some time in the past",
    "options": [
      "66c8"
    ]
  },
  "698f": {
    "id": "698f",
    "label": "according to value equality",
    "options": [
      "f4d0",
      "0cf8"
    ]
  },
  "96fd": {
    "id": "96fd",
    "label": "distinctUntilKeyChanged"
  },
  "017d": {
    "id": "017d",
    "label": "emitted just before the current value",
    "options": [
      "96fd"
    ]
  },
  "b184": {
    "id": "b184",
    "label": "according to a key or object property",
    "options": [
      "017d"
    ]
  },
  "fd95": {
    "id": "fd95",
    "label": "throttle"
  },
  "cccf": {
    "id": "cccf",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "fd95"
    ]
  },
  "0044": {
    "id": "0044",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3527"
    ]
  },
  "a0db": {
    "id": "a0db",
    "label": "by emitting the first value in each time window",
    "options": [
      "cccf",
      "0044"
    ]
  },
  "667a": {
    "id": "667a",
    "label": "audit"
  },
  "3eb1": {
    "id": "3eb1",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "667a"
    ]
  },
  "40a5": {
    "id": "40a5",
    "label": "auditTime"
  },
  "dfdd": {
    "id": "dfdd",
    "label": "where time windows are determined by a time duration",
    "options": [
      "40a5"
    ]
  },
  "d658": {
    "id": "d658",
    "label": "by emitting the last value in each time window",
    "options": [
      "3eb1",
      "dfdd"
    ]
  },
  "23a0": {
    "id": "23a0",
    "label": "debounce"
  },
  "21d3": {
    "id": "21d3",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "23a0"
    ]
  },
  "ba9a": {
    "id": "ba9a",
    "label": "debounceTime"
  },
  "3a51": {
    "id": "3a51",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "ba9a"
    ]
  },
  "1d1b": {
    "id": "1d1b",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "21d3",
      "3a51"
    ]
  },
  "a91c": {
    "id": "a91c",
    "label": "that occur too frequently",
    "options": [
      "a0db",
      "d658",
      "1d1b"
    ]
  },
  "57ea": {
    "id": "57ea",
    "label": "I want to ignore values",
    "options": [
      "28d7",
      "e939",
      "ea41",
      "e60f",
      "8550",
      "a91c"
    ]
  },
  "5a02": {
    "id": "5a02",
    "label": "reduce"
  },
  "6c52": {
    "id": "6c52",
    "label": "and only output the final computed value",
    "options": [
      "5a02"
    ]
  },
  "0ff1": {
    "id": "0ff1",
    "label": "scan"
  },
  "a7d2": {
    "id": "a7d2",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "0ff1"
    ]
  },
  "b4c8": {
    "id": "b4c8",
    "label": "mergeScan"
  },
  "ed02": {
    "id": "ed02",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "b4c8"
    ]
  },
  "aaee": {
    "id": "aaee",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "6c52",
      "a7d2",
      "ed02"
    ]
  },
  "a785": {
    "id": "a785",
    "label": "materialize"
  },
  "27da": {
    "id": "27da",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "a785"
    ]
  },
  "3c27": {
    "id": "3c27",
    "label": "timeInterval"
  },
  "2d4d": {
    "id": "2d4d",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "3c27"
    ]
  },
  "94ea": {
    "id": "94ea",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "27da",
      "2d4d"
    ]
  },
  "5abc": {
    "id": "5abc",
    "label": "timeout"
  },
  "278e": {
    "id": "278e",
    "label": "I want to throw an error",
    "options": [
      "5abc"
    ]
  },
  "e238": {
    "id": "e238",
    "label": "timeoutWith"
  },
  "b8ef": {
    "id": "b8ef",
    "label": "I want to switch to another Observable",
    "options": [
      "e238"
    ]
  },
  "73eb": {
    "id": "73eb",
    "label": "after a period of inactivity",
    "options": [
      "278e",
      "b8ef"
    ]
  },
  "1da9": {
    "id": "1da9",
    "label": "single"
  },
  "df70": {
    "id": "df70",
    "label": "I want to ensure there is only one value",
    "options": [
      "1da9"
    ]
  },
  "171c": {
    "id": "171c",
    "label": "count"
  },
  "aada": {
    "id": "aada",
    "label": "I want to know how many values it emits",
    "options": [
      "171c"
    ]
  },
  "b84c": {
    "id": "b84c",
    "label": "startWith"
  },
  "62eb": {
    "id": "62eb",
    "label": "I want to prepend one value",
    "options": [
      "b84c"
    ]
  },
  "e97f": {
    "id": "e97f",
    "label": "delay"
  },
  "b421": {
    "id": "b421",
    "label": "delayWhen"
  },
  "42bf": {
    "id": "42bf",
    "label": "based on the emissions of another Observable",
    "options": [
      "b421"
    ]
  },
  "50bc": {
    "id": "50bc",
    "label": "I want to delay the emissions",
    "options": [
      "2936",
      "42bf"
    ]
  },
  "33ab": {
    "id": "33ab",
    "label": "toArray"
  },
  "64bc": {
    "id": "64bc",
    "label": "and convert to an array",
    "options": [
      "33ab"
    ]
  },
  "3d15": {
    "id": "3d15",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1b8f"
    ]
  },
  "e5ba": {
    "id": "e5ba",
    "label": "and convert to a Promise",
    "options": [
      "3d15"
    ]
  },
  "a7f7": {
    "id": "a7f7",
    "label": "until the Observable completes",
    "options": [
      "64bc",
      "e5ba"
    ]
  },
  "237e": {
    "id": "237e",
    "label": "pairwise"
  },
  "6e9e": {
    "id": "6e9e",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "237e"
    ]
  },
  "43a6": {
    "id": "43a6",
    "label": "partition"
  },
  "da21": {
    "id": "da21",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "43a6"
    ]
  },
  "b479": {
    "id": "b479",
    "label": "bufferCount"
  },
  "57c9": {
    "id": "57c9",
    "label": "windowCount"
  },
  "a2a6": {
    "id": "a2a6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "57c9"
    ]
  },
  "078e": {
    "id": "078e",
    "label": "in batches of a particular size",
    "options": [
      "6163",
      "a2a6"
    ]
  },
  "fb38": {
    "id": "fb38",
    "label": "bufferTime"
  },
  "f95e": {
    "id": "f95e",
    "label": "and emit the group as an array",
    "options": [
      "fb38"
    ]
  },
  "1c33": {
    "id": "1c33",
    "label": "windowTime"
  },
  "9da9": {
    "id": "9da9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "1c33"
    ]
  },
  "2f65": {
    "id": "2f65",
    "label": "based on time",
    "options": [
      "f95e",
      "9da9"
    ]
  },
  "54f2": {
    "id": "54f2",
    "label": "buffer"
  },
  "80ba": {
    "id": "80ba",
    "label": "and emit the group as an array",
    "options": [
      "54f2"
    ]
  },
  "390b": {
    "id": "390b",
    "label": "window"
  },
  "2f67": {
    "id": "2f67",
    "label": "and emit the group as a nested Observable",
    "options": [
      "390b"
    ]
  },
  "3d16": {
    "id": "3d16",
    "label": "until another Observable emits",
    "options": [
      "80ba",
      "2f67"
    ]
  },
  "d1ba": {
    "id": "d1ba",
    "label": "bufferWhen"
  },
  "7e32": {
    "id": "7e32",
    "label": "and emit the group as an array",
    "options": [
      "d1ba"
    ]
  },
  "d2e9": {
    "id": "d2e9",
    "label": "windowWhen"
  },
  "1bc0": {
    "id": "1bc0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d2e9"
    ]
  },
  "061d": {
    "id": "061d",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "7e32",
      "1bc0"
    ]
  },
  "93af": {
    "id": "93af",
    "label": "bufferToggle"
  },
  "d26f": {
    "id": "d26f",
    "label": "and emit the group as an array",
    "options": [
      "93af"
    ]
  },
  "03d8": {
    "id": "03d8",
    "label": "windowToggle"
  },
  "0318": {
    "id": "0318",
    "label": "and emit the group as a nested Observable",
    "options": [
      "03d8"
    ]
  },
  "8b9c": {
    "id": "8b9c",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "d26f",
      "0318"
    ]
  },
  "d38c": {
    "id": "d38c",
    "label": "groupBy"
  },
  "955b": {
    "id": "955b",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "d38c"
    ]
  },
  "88ea": {
    "id": "88ea",
    "label": "I want to group the values",
    "options": [
      "a7f7",
      "6e9e",
      "da21",
      "078e",
      "2f65",
      "3d16",
      "061d",
      "8b9c",
      "955b"
    ]
  },
  "592c": {
    "id": "592c",
    "label": "mergeMapTo"
  },
  "9ffa": {
    "id": "9ffa",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "592c"
    ]
  },
  "afa1": {
    "id": "afa1",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7908"
    ]
  },
  "5c30": {
    "id": "5c30",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "9ffa",
      "afa1"
    ]
  },
  "93c7": {
    "id": "93c7",
    "label": "concatMapTo"
  },
  "cfb5": {
    "id": "cfb5",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "93c7"
    ]
  },
  "1b8f": {
    "id": "1b8f",
    "label": "concatMap"
  },
  "dbe7": {
    "id": "dbe7",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "cfb5",
      "3d15"
    ]
  },
  "550e": {
    "id": "550e",
    "label": "switchMapTo"
  },
  "ccb3": {
    "id": "ccb3",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "550e"
    ]
  },
  "c33d": {
    "id": "c33d",
    "label": "switchMap"
  },
  "bea8": {
    "id": "bea8",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c33d"
    ]
  },
  "48db": {
    "id": "48db",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "ccb3",
      "bea8"
    ]
  },
  "ace2": {
    "id": "ace2",
    "label": "exhaustMap"
  },
  "05f9": {
    "id": "05f9",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "ace2"
    ]
  },
  "d8f4": {
    "id": "d8f4",
    "label": "expand"
  },
  "fc69": {
    "id": "fc69",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "d8f4"
    ]
  },
  "4f7b": {
    "id": "4f7b",
    "label": "I want to start a new Observable for each value",
    "options": [
      "5c30",
      "dbe7",
      "48db",
      "05f9",
      "fc69"
    ]
  },
  "404f": {
    "id": "404f",
    "label": "pipe"
  },
  "a631": {
    "id": "a631",
    "label": "I want to perform custom operations",
    "options": [
      "404f"
    ]
  },
  "c956": {
    "id": "c956",
    "label": "share"
  },
  "8e63": {
    "id": "8e63",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "c956"
    ]
  },
  "f3e3": {
    "id": "f3e3",
    "label": "publish"
  },
  "50ee": {
    "id": "50ee",
    "label": "and start it manually or imperatively",
    "options": [
      "f3e3"
    ]
  },
  "b298": {
    "id": "b298",
    "label": "using a conventional Subject",
    "options": [
      "8e63",
      "50ee"
    ]
  },
  "73a2": {
    "id": "73a2",
    "label": "publishBehavior"
  },
  "9c7e": {
    "id": "9c7e",
    "label": "using a BehaviorSubject",
    "options": [
      "73a2"
    ]
  },
  "d34d": {
    "id": "d34d",
    "label": "publishReplay"
  },
  "a0c8": {
    "id": "a0c8",
    "label": "publishLast"
  },
  "c215": {
    "id": "c215",
    "label": "using an AsyncSubject",
    "options": [
      "a0c8"
    ]
  },
  "b020": {
    "id": "b020",
    "label": "multicast"
  },
  "6d2c": {
    "id": "6d2c",
    "label": "using a specific subject implementation",
    "options": [
      "b020"
    ]
  },
  "a4ae": {
    "id": "a4ae",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "b298",
      "9c7e",
      "8069",
      "c215",
      "6d2c"
    ]
  },
  "add9": {
    "id": "add9",
    "label": "catchError"
  },
  "4af7": {
    "id": "4af7",
    "label": "I want to start a new Observable",
    "options": [
      "add9"
    ]
  },
  "de09": {
    "id": "de09",
    "label": "retry"
  },
  "46df": {
    "id": "46df",
    "label": "immediately",
    "options": [
      "de09"
    ]
  },
  "109c": {
    "id": "109c",
    "label": "retryWhen"
  },
  "c68f": {
    "id": "c68f",
    "label": "when another Observable emits",
    "options": [
      "109c"
    ]
  },
  "70d1": {
    "id": "70d1",
    "label": "I want to re-subscribe",
    "options": [
      "46df",
      "c68f"
    ]
  },
  "bc55": {
    "id": "bc55",
    "label": "when an error occurs",
    "options": [
      "4af7",
      "70d1"
    ]
  },
  "fa49": {
    "id": "fa49",
    "label": "repeat"
  },
  "0bdd": {
    "id": "0bdd",
    "label": "immediately",
    "options": [
      "fa49"
    ]
  },
  "6a0f": {
    "id": "6a0f",
    "label": "when another Observable emits",
    "options": [
      "8636"
    ]
  },
  "5dc5": {
    "id": "5dc5",
    "label": "I want to re-subscribe",
    "options": [
      "0bdd",
      "6a0f"
    ]
  },
  "de29": {
    "id": "de29",
    "label": "concat"
  },
  "aa48": {
    "id": "aa48",
    "label": "I want to start a new Observable",
    "options": [
      "de29"
    ]
  },
  "8e78": {
    "id": "8e78",
    "label": "when it completes",
    "options": [
      "5dc5",
      "aa48"
    ]
  },
  "56fd": {
    "id": "56fd",
    "label": "finalize"
  },
  "0390": {
    "id": "0390",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "56fd"
    ]
  },
  "8c2a": {
    "id": "8c2a",
    "label": "subscribeOn"
  },
  "55c0": {
    "id": "55c0",
    "label": "that routes calls to subscribe",
    "options": [
      "8c2a"
    ]
  },
  "b036": {
    "id": "b036",
    "label": "observeOn"
  },
  "9e0f": {
    "id": "9e0f",
    "label": "that routes values to observers",
    "options": [
      "b036"
    ]
  },
  "49e6": {
    "id": "49e6",
    "label": "I want to change the scheduler",
    "options": [
      "55c0",
      "9e0f"
    ]
  },
  "d440": {
    "id": "d440",
    "label": "race"
  },
  "933c": {
    "id": "933c",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "d440"
    ]
  },
  "9f3e": {
    "id": "9f3e",
    "label": "merge"
  },
  "d32d": {
    "id": "d32d",
    "label": "I want to output the values from either of them",
    "options": [
      "9f3e"
    ]
  },
  "2fac": {
    "id": "2fac",
    "label": "combineLatest"
  },
  "1c39": {
    "id": "1c39",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2fac"
    ]
  },
  "f58f": {
    "id": "f58f",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "9925"
    ]
  },
  "21c3": {
    "id": "21c3",
    "label": "zip"
  },
  "a3db": {
    "id": "a3db",
    "label": "using each source value only once",
    "options": [
      "21c3"
    ]
  },
  "2e73": {
    "id": "2e73",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1c39",
      "f58f",
      "a3db"
    ]
  },
  "386f": {
    "id": "386f",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "933c",
      "d32d",
      "2e73"
    ]
  },
  "ee0e": {
    "id": "ee0e",
    "label": "I have one existing Observable, and",
    "options": [
      "cede",
      "ec24",
      "6d2f",
      "3dde",
      "57ea",
      "aaee",
      "94ea",
      "73eb",
      "df70",
      "aada",
      "62eb",
      "50bc",
      "88ea",
      "4f7b",
      "a631",
      "a4ae",
      "bc55",
      "8e78",
      "0390",
      "49e6",
      "386f"
    ]
  },
  "123f": {
    "id": "123f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "9169"
    ]
  },
  "f7a4": {
    "id": "f7a4",
    "label": "forkJoin"
  },
  "9d48": {
    "id": "9d48",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "f7a4"
    ]
  },
  "c6b7": {
    "id": "c6b7",
    "label": "merge"
  },
  "4b0b": {
    "id": "4b0b",
    "label": "I want to output the values from either of them",
    "options": [
      "c6b7"
    ]
  },
  "f46d": {
    "id": "f46d",
    "label": "combineLatest"
  },
  "08c8": {
    "id": "08c8",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "f46d"
    ]
  },
  "efa6": {
    "id": "efa6",
    "label": "zip"
  },
  "3fa3": {
    "id": "3fa3",
    "label": "using each source value only once",
    "options": [
      "efa6"
    ]
  },
  "dd7a": {
    "id": "dd7a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "08c8",
      "3fa3"
    ]
  },
  "64fc": {
    "id": "64fc",
    "label": "I want to subscribe to each in order",
    "options": [
      "1920"
    ]
  },
  "a274": {
    "id": "a274",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "123f",
      "9d48",
      "4b0b",
      "dd7a",
      "64fc"
    ]
  },
  "7d58": {
    "id": "7d58",
    "label": "using custom logic",
    "options": [
      "3517"
    ]
  },
  "306e": {
    "id": "306e",
    "label": "throwError"
  },
  "2a23": {
    "id": "2a23",
    "label": "EMPTY"
  },
  "670f": {
    "id": "670f",
    "label": "that just completes, without emitting values",
    "options": [
      "2a23"
    ]
  },
  "9c11": {
    "id": "9c11",
    "label": "NEVER"
  },
  "d264": {
    "id": "d264",
    "label": "that never emits anything",
    "options": [
      "9c11"
    ]
  },
  "aebf": {
    "id": "aebf",
    "label": "fromEvent"
  },
  "6b51": {
    "id": "6b51",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "aebf"
    ]
  },
  "5ef4": {
    "id": "5ef4",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "4837"
    ]
  },
  "b33a": {
    "id": "b33a",
    "label": "from an existing source of events",
    "options": [
      "6b51",
      "5ef4"
    ]
  },
  "caeb": {
    "id": "caeb",
    "label": "from"
  },
  "e4ce": {
    "id": "e4ce",
    "label": "from a Promise or an event source",
    "options": [
      "caeb"
    ]
  },
  "698b": {
    "id": "698b",
    "label": "from"
  },
  "a1ee": {
    "id": "a1ee",
    "label": "over the values in an array",
    "options": [
      "698b"
    ]
  },
  "0ffb": {
    "id": "0ffb",
    "label": "over values in a numeric range",
    "options": [
      "7702"
    ]
  },
  "12f7": {
    "id": "12f7",
    "label": "of"
  },
  "d1ce": {
    "id": "d1ce",
    "label": "over prefined values given as arguments",
    "options": [
      "12f7"
    ]
  },
  "454e": {
    "id": "454e",
    "label": "that iterates",
    "options": [
      "a1ee",
      "0ffb",
      "d1ce"
    ]
  },
  "c234": {
    "id": "c234",
    "label": "interval"
  },
  "3b55": {
    "id": "3b55",
    "label": "regularly",
    "options": [
      "c234"
    ]
  },
  "cc3c": {
    "id": "cc3c",
    "label": "timer"
  },
  "54b5": {
    "id": "54b5",
    "label": "with an optional initial delay",
    "options": [
      "cc3c"
    ]
  },
  "c07e": {
    "id": "c07e",
    "label": "defer"
  },
  "b21c": {
    "id": "b21c",
    "label": "which is built on demand when subscribed",
    "options": [
      "c07e"
    ]
  },
  "227a": {
    "id": "227a",
    "label": "I want to create a new Observable",
    "options": [
      "7d58",
      "2338",
      "5644",
      "670f",
      "d264",
      "b33a",
      "e4ce",
      "454e",
      "3843",
      "b21c"
    ]
  },
  "9a2d": {
    "id": "9a2d",
    "label": "supporting a conventional callback API",
    "options": [
      "4203"
    ]
  },
  "8cf0": {
    "id": "8cf0",
    "label": "bindNodeCallback"
  },
  "9e22": {
    "id": "9e22",
    "label": "supporting Node.js callback style API",
    "options": [
      "8cf0"
    ]
  },
  "2e84": {
    "id": "2e84",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "9a2d",
      "9e22"
    ]
  },
  "5c19": {
    "id": "5c19",
    "label": "I have no Observables yet, and",
    "options": [
      "227a",
      "2e84"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ee0e",
      "a274",
      "5c19"
    ]
  }
}