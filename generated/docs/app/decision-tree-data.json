{
  "1434": {
    "id": "1434",
    "label": "where time windows are determined by a time duration",
    "options": [
      "2737"
    ]
  },
  "2090": {
    "id": "2090",
    "label": "when an error occurs",
    "options": [
      "32dc",
      "5820"
    ]
  },
  "2347": {
    "id": "2347",
    "label": "of"
  },
  "2396": {
    "id": "2396",
    "label": "I want to output the values from either of them",
    "options": [
      "5579"
    ]
  },
  "2486": {
    "id": "2486",
    "label": "emitted some time in the past",
    "options": [
      "aff9"
    ]
  },
  "2737": {
    "id": "2737",
    "label": "auditTime"
  },
  "3015": {
    "id": "3015",
    "label": "that just completes, without emitting values",
    "options": [
      "39a9"
    ]
  },
  "3195": {
    "id": "3195",
    "label": "concat"
  },
  "3227": {
    "id": "3227",
    "label": "with an optional initial delay",
    "options": [
      "dc77"
    ]
  },
  "3739": {
    "id": "3739",
    "label": "I want to output the values from either of them",
    "options": [
      "1b50"
    ]
  },
  "3828": {
    "id": "3828",
    "label": "in batches of a particular size",
    "options": [
      "16e8",
      "a4d9"
    ]
  },
  "4390": {
    "id": "4390",
    "label": "I want to re-subscribe",
    "options": [
      "c343",
      "87aa"
    ]
  },
  "4560": {
    "id": "4560",
    "label": "immediately",
    "options": [
      "9474"
    ]
  },
  "4597": {
    "id": "4597",
    "label": "using a BehaviorSubject",
    "options": [
      "f52e"
    ]
  },
  "4806": {
    "id": "4806",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "74e1",
      "8739"
    ]
  },
  "4907": {
    "id": "4907",
    "label": "mergeMap"
  },
  "5005": {
    "id": "5005",
    "label": "toArray"
  },
  "5063": {
    "id": "5063",
    "label": "ignoreElements"
  },
  "5116": {
    "id": "5116",
    "label": "skip"
  },
  "5373": {
    "id": "5373",
    "label": "based on custom logic",
    "options": [
      "ac51"
    ]
  },
  "5579": {
    "id": "5579",
    "label": "merge"
  },
  "5632": {
    "id": "5632",
    "label": "timeInterval"
  },
  "5820": {
    "id": "5820",
    "label": "I want to re-subscribe",
    "options": [
      "4560",
      "6eca"
    ]
  },
  "5842": {
    "id": "5842",
    "label": "from"
  },
  "6284": {
    "id": "6284",
    "label": "using each source value only once",
    "options": [
      "6a72"
    ]
  },
  "6314": {
    "id": "6314",
    "label": "and convert to a Promise",
    "options": [
      "f33a"
    ]
  },
  "6671": {
    "id": "6671",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "6ae0"
    ]
  },
  "6687": {
    "id": "6687",
    "label": "to be a constant value",
    "options": [
      "864d"
    ]
  },
  "6696": {
    "id": "6696",
    "label": "I want to allow some values to pass",
    "options": [
      "6baf",
      "bfcf",
      "b8b0",
      "6a89",
      "7cea"
    ]
  },
  "7531": {
    "id": "7531",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ca28"
    ]
  },
  "8352": {
    "id": "8352",
    "label": "and only the first value",
    "options": [
      "4c6e"
    ]
  },
  "8375": {
    "id": "8375",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7ac9"
    ]
  },
  "8739": {
    "id": "8739",
    "label": "supporting Node.js callback style API",
    "options": [
      "e730"
    ]
  },
  "8924": {
    "id": "8924",
    "label": "skipLast"
  },
  "9014": {
    "id": "9014",
    "label": "audit"
  },
  "9178": {
    "id": "9178",
    "label": "elementAt"
  },
  "9474": {
    "id": "9474",
    "label": "retry"
  },
  "864d": {
    "id": "864d",
    "label": "mapTo"
  },
  "d3ca": {
    "id": "d3ca",
    "label": "map"
  },
  "9db5": {
    "id": "9db5",
    "label": "to be a value calculated through a formula",
    "options": [
      "d3ca"
    ]
  },
  "c350": {
    "id": "c350",
    "label": "I want to change each emitted value",
    "options": [
      "6687",
      "9db5"
    ]
  },
  "cf39": {
    "id": "cf39",
    "label": "pluck"
  },
  "0ad4": {
    "id": "0ad4",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "cf39"
    ]
  },
  "64a6": {
    "id": "64a6",
    "label": "tap"
  },
  "30ee": {
    "id": "30ee",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "64a6"
    ]
  },
  "7c77": {
    "id": "7c77",
    "label": "filter"
  },
  "6baf": {
    "id": "6baf",
    "label": "based on custom logic",
    "options": [
      "7c77"
    ]
  },
  "4c6e": {
    "id": "4c6e",
    "label": "first"
  },
  "144a": {
    "id": "144a",
    "label": "take"
  },
  "ac92": {
    "id": "ac92",
    "label": "based on a given amount",
    "options": [
      "144a"
    ]
  },
  "594a": {
    "id": "594a",
    "label": "takeWhile"
  },
  "ca71": {
    "id": "ca71",
    "label": "based on custom logic",
    "options": [
      "594a"
    ]
  },
  "bfcf": {
    "id": "bfcf",
    "label": "if they are at the start of the Observable",
    "options": [
      "8352",
      "ac92",
      "ca71"
    ]
  },
  "b8b0": {
    "id": "b8b0",
    "label": "if they are exactly the n-th emission",
    "options": [
      "9178"
    ]
  },
  "dc8f": {
    "id": "dc8f",
    "label": "last"
  },
  "0c3e": {
    "id": "0c3e",
    "label": "and only the last value",
    "options": [
      "dc8f"
    ]
  },
  "44f5": {
    "id": "44f5",
    "label": "takeLast"
  },
  "90cd": {
    "id": "90cd",
    "label": "based on a given amount",
    "options": [
      "44f5"
    ]
  },
  "6a89": {
    "id": "6a89",
    "label": "if they are at the end of the Observable",
    "options": [
      "0c3e",
      "90cd"
    ]
  },
  "5dd6": {
    "id": "5dd6",
    "label": "takeUntil"
  },
  "7cea": {
    "id": "7cea",
    "label": "until another Observable emits a value",
    "options": [
      "5dd6"
    ]
  },
  "69dd": {
    "id": "69dd",
    "label": "altogether",
    "options": [
      "5063"
    ]
  },
  "bd74": {
    "id": "bd74",
    "label": "based on a given amount",
    "options": [
      "5116"
    ]
  },
  "ac51": {
    "id": "ac51",
    "label": "skipWhile"
  },
  "82a4": {
    "id": "82a4",
    "label": "from the start of the Observable",
    "options": [
      "bd74",
      "5373"
    ]
  },
  "069d": {
    "id": "069d",
    "label": "from the end of the Observable",
    "options": [
      "8924"
    ]
  },
  "fcae": {
    "id": "fcae",
    "label": "skipUntil"
  },
  "de50": {
    "id": "de50",
    "label": "until another Observable emits a value",
    "options": [
      "fcae"
    ]
  },
  "831f": {
    "id": "831f",
    "label": "distinctUntilChanged"
  },
  "cec0": {
    "id": "cec0",
    "label": "emitted just before the current value",
    "options": [
      "831f"
    ]
  },
  "aff9": {
    "id": "aff9",
    "label": "distinct"
  },
  "8c9f": {
    "id": "8c9f",
    "label": "according to value equality",
    "options": [
      "cec0",
      "2486"
    ]
  },
  "cee7": {
    "id": "cee7",
    "label": "distinctUntilKeyChanged"
  },
  "e928": {
    "id": "e928",
    "label": "emitted just before the current value",
    "options": [
      "cee7"
    ]
  },
  "83b2": {
    "id": "83b2",
    "label": "according to a key or object property",
    "options": [
      "e928"
    ]
  },
  "faff": {
    "id": "faff",
    "label": "that match some previous value",
    "options": [
      "8c9f",
      "83b2"
    ]
  },
  "763b": {
    "id": "763b",
    "label": "throttle"
  },
  "dd49": {
    "id": "dd49",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "763b"
    ]
  },
  "2d6c": {
    "id": "2d6c",
    "label": "throttleTime"
  },
  "160a": {
    "id": "160a",
    "label": "where time windows are determined by a time duration",
    "options": [
      "2d6c"
    ]
  },
  "a67f": {
    "id": "a67f",
    "label": "by emitting the first value in each time window",
    "options": [
      "dd49",
      "160a"
    ]
  },
  "61a2": {
    "id": "61a2",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "9014"
    ]
  },
  "33aa": {
    "id": "33aa",
    "label": "by emitting the last value in each time window",
    "options": [
      "61a2",
      "1434"
    ]
  },
  "90c8": {
    "id": "90c8",
    "label": "debounce"
  },
  "423e": {
    "id": "423e",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "90c8"
    ]
  },
  "cb2b": {
    "id": "cb2b",
    "label": "debounceTime"
  },
  "a575": {
    "id": "a575",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "cb2b"
    ]
  },
  "4d5a": {
    "id": "4d5a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "423e",
      "a575"
    ]
  },
  "c18a": {
    "id": "c18a",
    "label": "that occur too frequently",
    "options": [
      "a67f",
      "33aa",
      "4d5a"
    ]
  },
  "2f9c": {
    "id": "2f9c",
    "label": "I want to ignore values",
    "options": [
      "69dd",
      "82a4",
      "069d",
      "de50",
      "faff",
      "c18a"
    ]
  },
  "e306": {
    "id": "e306",
    "label": "reduce"
  },
  "9c87": {
    "id": "9c87",
    "label": "and only output the final computed value",
    "options": [
      "e306"
    ]
  },
  "33a7": {
    "id": "33a7",
    "label": "scan"
  },
  "145f": {
    "id": "145f",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "33a7"
    ]
  },
  "2fd3": {
    "id": "2fd3",
    "label": "mergeScan"
  },
  "95bf": {
    "id": "95bf",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "2fd3"
    ]
  },
  "dc05": {
    "id": "dc05",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "9c87",
      "145f",
      "95bf"
    ]
  },
  "35fc": {
    "id": "35fc",
    "label": "materialize"
  },
  "04d4": {
    "id": "04d4",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "35fc"
    ]
  },
  "c9bc": {
    "id": "c9bc",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "5632"
    ]
  },
  "c64e": {
    "id": "c64e",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "04d4",
      "c9bc"
    ]
  },
  "6e1f": {
    "id": "6e1f",
    "label": "timeout"
  },
  "ed4d": {
    "id": "ed4d",
    "label": "I want to throw an error",
    "options": [
      "6e1f"
    ]
  },
  "de1e": {
    "id": "de1e",
    "label": "timeoutWith"
  },
  "f695": {
    "id": "f695",
    "label": "I want to switch to another Observable",
    "options": [
      "de1e"
    ]
  },
  "9c8b": {
    "id": "9c8b",
    "label": "after a period of inactivity",
    "options": [
      "ed4d",
      "f695"
    ]
  },
  "619a": {
    "id": "619a",
    "label": "single"
  },
  "426c": {
    "id": "426c",
    "label": "I want to ensure there is only one value",
    "options": [
      "619a"
    ]
  },
  "52a5": {
    "id": "52a5",
    "label": "count"
  },
  "f075": {
    "id": "f075",
    "label": "I want to know how many values it emits",
    "options": [
      "52a5"
    ]
  },
  "a470": {
    "id": "a470",
    "label": "startWith"
  },
  "be14": {
    "id": "be14",
    "label": "I want to prepend one value",
    "options": [
      "a470"
    ]
  },
  "7bfe": {
    "id": "7bfe",
    "label": "delay"
  },
  "3a3c": {
    "id": "3a3c",
    "label": "based on a given amount of time",
    "options": [
      "7bfe"
    ]
  },
  "458c": {
    "id": "458c",
    "label": "delayWhen"
  },
  "d694": {
    "id": "d694",
    "label": "based on the emissions of another Observable",
    "options": [
      "458c"
    ]
  },
  "5ff3": {
    "id": "5ff3",
    "label": "I want to delay the emissions",
    "options": [
      "3a3c",
      "d694"
    ]
  },
  "1f23": {
    "id": "1f23",
    "label": "and convert to an array",
    "options": [
      "5005"
    ]
  },
  "f33a": {
    "id": "f33a",
    "label": "Observable",
    "method": "toPromise"
  },
  "b3bd": {
    "id": "b3bd",
    "label": "until the Observable completes",
    "options": [
      "1f23",
      "6314"
    ]
  },
  "6d28": {
    "id": "6d28",
    "label": "pairwise"
  },
  "1e30": {
    "id": "1e30",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "6d28"
    ]
  },
  "44bf": {
    "id": "44bf",
    "label": "partition"
  },
  "c0f5": {
    "id": "c0f5",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "44bf"
    ]
  },
  "dd2b": {
    "id": "dd2b",
    "label": "bufferCount"
  },
  "16e8": {
    "id": "16e8",
    "label": "and emit the group as an array",
    "options": [
      "dd2b"
    ]
  },
  "bff3": {
    "id": "bff3",
    "label": "windowCount"
  },
  "a4d9": {
    "id": "a4d9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "bff3"
    ]
  },
  "06d9": {
    "id": "06d9",
    "label": "bufferTime"
  },
  "ddbf": {
    "id": "ddbf",
    "label": "and emit the group as an array",
    "options": [
      "06d9"
    ]
  },
  "baba": {
    "id": "baba",
    "label": "windowTime"
  },
  "b691": {
    "id": "b691",
    "label": "and emit the group as a nested Observable",
    "options": [
      "baba"
    ]
  },
  "fba6": {
    "id": "fba6",
    "label": "based on time",
    "options": [
      "ddbf",
      "b691"
    ]
  },
  "e409": {
    "id": "e409",
    "label": "buffer"
  },
  "66c4": {
    "id": "66c4",
    "label": "and emit the group as an array",
    "options": [
      "e409"
    ]
  },
  "c91e": {
    "id": "c91e",
    "label": "window"
  },
  "d802": {
    "id": "d802",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c91e"
    ]
  },
  "06eb": {
    "id": "06eb",
    "label": "until another Observable emits",
    "options": [
      "66c4",
      "d802"
    ]
  },
  "713b": {
    "id": "713b",
    "label": "bufferWhen"
  },
  "e84c": {
    "id": "e84c",
    "label": "and emit the group as an array",
    "options": [
      "713b"
    ]
  },
  "7ac9": {
    "id": "7ac9",
    "label": "windowWhen"
  },
  "6bba": {
    "id": "6bba",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "e84c",
      "8375"
    ]
  },
  "0646": {
    "id": "0646",
    "label": "bufferToggle"
  },
  "f30e": {
    "id": "f30e",
    "label": "and emit the group as an array",
    "options": [
      "0646"
    ]
  },
  "aa43": {
    "id": "aa43",
    "label": "windowToggle"
  },
  "90a9": {
    "id": "90a9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "aa43"
    ]
  },
  "d944": {
    "id": "d944",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "f30e",
      "90a9"
    ]
  },
  "bc17": {
    "id": "bc17",
    "label": "groupBy"
  },
  "bfbb": {
    "id": "bfbb",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "bc17"
    ]
  },
  "826d": {
    "id": "826d",
    "label": "I want to group the values",
    "options": [
      "b3bd",
      "1e30",
      "c0f5",
      "3828",
      "fba6",
      "06eb",
      "6bba",
      "d944",
      "bfbb"
    ]
  },
  "65d3": {
    "id": "65d3",
    "label": "mergeMapTo"
  },
  "0f19": {
    "id": "0f19",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "65d3"
    ]
  },
  "217f": {
    "id": "217f",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "4907"
    ]
  },
  "db5a": {
    "id": "db5a",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "0f19",
      "217f"
    ]
  },
  "9b03": {
    "id": "9b03",
    "label": "concatMapTo"
  },
  "38c7": {
    "id": "38c7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "9b03"
    ]
  },
  "59fe": {
    "id": "59fe",
    "label": "concatMap"
  },
  "baed": {
    "id": "baed",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "59fe"
    ]
  },
  "6fe9": {
    "id": "6fe9",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "38c7",
      "baed"
    ]
  },
  "649a": {
    "id": "649a",
    "label": "switchMapTo"
  },
  "bf04": {
    "id": "bf04",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "649a"
    ]
  },
  "fe87": {
    "id": "fe87",
    "label": "switchMap"
  },
  "2eb6": {
    "id": "2eb6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "fe87"
    ]
  },
  "a93c": {
    "id": "a93c",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "bf04",
      "2eb6"
    ]
  },
  "118b": {
    "id": "118b",
    "label": "exhaustMap"
  },
  "bfd0": {
    "id": "bfd0",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "118b"
    ]
  },
  "d21d": {
    "id": "d21d",
    "label": "expand"
  },
  "55e3": {
    "id": "55e3",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "d21d"
    ]
  },
  "00be": {
    "id": "00be",
    "label": "I want to start a new Observable for each value",
    "options": [
      "db5a",
      "6fe9",
      "a93c",
      "bfd0",
      "55e3"
    ]
  },
  "771f": {
    "id": "771f",
    "label": "pipe"
  },
  "53e0": {
    "id": "53e0",
    "label": "I want to perform custom operations",
    "options": [
      "771f"
    ]
  },
  "00e9": {
    "id": "00e9",
    "label": "share"
  },
  "af12": {
    "id": "af12",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "00e9"
    ]
  },
  "c818": {
    "id": "c818",
    "label": "publish"
  },
  "edb7": {
    "id": "edb7",
    "label": "and start it manually or imperatively",
    "options": [
      "c818"
    ]
  },
  "5a6b": {
    "id": "5a6b",
    "label": "using a conventional Subject",
    "options": [
      "af12",
      "edb7"
    ]
  },
  "f52e": {
    "id": "f52e",
    "label": "publishBehavior"
  },
  "09ef": {
    "id": "09ef",
    "label": "publishReplay"
  },
  "7abd": {
    "id": "7abd",
    "label": "using a ReplaySubject",
    "options": [
      "09ef"
    ]
  },
  "42c1": {
    "id": "42c1",
    "label": "publishLast"
  },
  "85ca": {
    "id": "85ca",
    "label": "using an AsyncSubject",
    "options": [
      "42c1"
    ]
  },
  "fcf1": {
    "id": "fcf1",
    "label": "multicast"
  },
  "6ff7": {
    "id": "6ff7",
    "label": "using a specific subject implementation",
    "options": [
      "fcf1"
    ]
  },
  "d036": {
    "id": "d036",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "5a6b",
      "4597",
      "7abd",
      "85ca",
      "6ff7"
    ]
  },
  "390a": {
    "id": "390a",
    "label": "catchError"
  },
  "32dc": {
    "id": "32dc",
    "label": "I want to start a new Observable",
    "options": [
      "390a"
    ]
  },
  "daad": {
    "id": "daad",
    "label": "retryWhen"
  },
  "6eca": {
    "id": "6eca",
    "label": "when another Observable emits",
    "options": [
      "daad"
    ]
  },
  "c486": {
    "id": "c486",
    "label": "repeat"
  },
  "c343": {
    "id": "c343",
    "label": "immediately",
    "options": [
      "c486"
    ]
  },
  "f55d": {
    "id": "f55d",
    "label": "repeatWhen"
  },
  "87aa": {
    "id": "87aa",
    "label": "when another Observable emits",
    "options": [
      "f55d"
    ]
  },
  "98b4": {
    "id": "98b4",
    "label": "concat"
  },
  "c989": {
    "id": "c989",
    "label": "I want to start a new Observable",
    "options": [
      "98b4"
    ]
  },
  "3af8": {
    "id": "3af8",
    "label": "when it completes",
    "options": [
      "4390",
      "c989"
    ]
  },
  "320e": {
    "id": "320e",
    "label": "finalize"
  },
  "5f0a": {
    "id": "5f0a",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "320e"
    ]
  },
  "432a": {
    "id": "432a",
    "label": "subscribeOn"
  },
  "1f86": {
    "id": "1f86",
    "label": "that routes calls to subscribe",
    "options": [
      "432a"
    ]
  },
  "73c7": {
    "id": "73c7",
    "label": "observeOn"
  },
  "d15a": {
    "id": "d15a",
    "label": "that routes values to observers",
    "options": [
      "73c7"
    ]
  },
  "58a6": {
    "id": "58a6",
    "label": "I want to change the scheduler",
    "options": [
      "1f86",
      "d15a"
    ]
  },
  "c38e": {
    "id": "c38e",
    "label": "race"
  },
  "91e5": {
    "id": "91e5",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "c38e"
    ]
  },
  "1b50": {
    "id": "1b50",
    "label": "merge"
  },
  "ca28": {
    "id": "ca28",
    "label": "combineLatest"
  },
  "45b1": {
    "id": "45b1",
    "label": "withLatestFrom"
  },
  "e505": {
    "id": "e505",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "45b1"
    ]
  },
  "6a72": {
    "id": "6a72",
    "label": "zip"
  },
  "04d8": {
    "id": "04d8",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "7531",
      "e505",
      "6284"
    ]
  },
  "988f": {
    "id": "988f",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "91e5",
      "3739",
      "04d8"
    ]
  },
  "96eb": {
    "id": "96eb",
    "label": "I have one existing Observable, and",
    "options": [
      "c350",
      "0ad4",
      "30ee",
      "6696",
      "2f9c",
      "dc05",
      "c64e",
      "9c8b",
      "426c",
      "f075",
      "be14",
      "5ff3",
      "826d",
      "00be",
      "53e0",
      "d036",
      "2090",
      "3af8",
      "5f0a",
      "58a6",
      "988f"
    ]
  },
  "90aa": {
    "id": "90aa",
    "label": "race"
  },
  "d686": {
    "id": "d686",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "90aa"
    ]
  },
  "8aef": {
    "id": "8aef",
    "label": "forkJoin"
  },
  "a2b8": {
    "id": "a2b8",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "8aef"
    ]
  },
  "457f": {
    "id": "457f",
    "label": "combineLatest"
  },
  "fa49": {
    "id": "fa49",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "457f"
    ]
  },
  "dc36": {
    "id": "dc36",
    "label": "zip"
  },
  "35a7": {
    "id": "35a7",
    "label": "using each source value only once",
    "options": [
      "dc36"
    ]
  },
  "6eb3": {
    "id": "6eb3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "fa49",
      "35a7"
    ]
  },
  "3ff1": {
    "id": "3ff1",
    "label": "I want to subscribe to each in order",
    "options": [
      "3195"
    ]
  },
  "cddb": {
    "id": "cddb",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "d686",
      "a2b8",
      "2396",
      "6eb3",
      "3ff1"
    ]
  },
  "4d55": {
    "id": "4d55",
    "label": "Observable",
    "method": "create"
  },
  "65d2": {
    "id": "65d2",
    "label": "using custom logic",
    "options": [
      "4d55"
    ]
  },
  "d221": {
    "id": "d221",
    "label": "generate"
  },
  "e867": {
    "id": "e867",
    "label": "using a state machine similar to a for loop",
    "options": [
      "d221"
    ]
  },
  "e536": {
    "id": "e536",
    "label": "throwError"
  },
  "a947": {
    "id": "a947",
    "label": "that throws an error",
    "options": [
      "e536"
    ]
  },
  "39a9": {
    "id": "39a9",
    "label": "EMPTY"
  },
  "6ae0": {
    "id": "6ae0",
    "label": "fromEventPattern"
  },
  "51d1": {
    "id": "51d1",
    "label": "that never emits anything",
    "options": [
      "6ae0"
    ]
  },
  "2ca8": {
    "id": "2ca8",
    "label": "fromEvent"
  },
  "2d42": {
    "id": "2d42",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "2ca8"
    ]
  },
  "de84": {
    "id": "de84",
    "label": "from an existing source of events",
    "options": [
      "2d42",
      "6671"
    ]
  },
  "b984": {
    "id": "b984",
    "label": "from a Promise or an event source",
    "options": [
      "5842"
    ]
  },
  "4a69": {
    "id": "4a69",
    "label": "from"
  },
  "0dfd": {
    "id": "0dfd",
    "label": "over the values in an array",
    "options": [
      "4a69"
    ]
  },
  "355e": {
    "id": "355e",
    "label": "range"
  },
  "a204": {
    "id": "a204",
    "label": "over values in a numeric range",
    "options": [
      "355e"
    ]
  },
  "41ad": {
    "id": "41ad",
    "label": "over prefined values given as arguments",
    "options": [
      "2347"
    ]
  },
  "a1ef": {
    "id": "a1ef",
    "label": "that iterates",
    "options": [
      "0dfd",
      "a204",
      "41ad"
    ]
  },
  "8bdb": {
    "id": "8bdb",
    "label": "interval"
  },
  "f061": {
    "id": "f061",
    "label": "regularly",
    "options": [
      "8bdb"
    ]
  },
  "dc77": {
    "id": "dc77",
    "label": "timer"
  },
  "da17": {
    "id": "da17",
    "label": "that emits values on a timer",
    "options": [
      "f061",
      "3227"
    ]
  },
  "8e3d": {
    "id": "8e3d",
    "label": "defer"
  },
  "ac28": {
    "id": "ac28",
    "label": "which is built on demand when subscribed",
    "options": [
      "8e3d"
    ]
  },
  "508b": {
    "id": "508b",
    "label": "I want to create a new Observable",
    "options": [
      "65d2",
      "e867",
      "a947",
      "3015",
      "51d1",
      "de84",
      "b984",
      "a1ef",
      "da17",
      "ac28"
    ]
  },
  "69e2": {
    "id": "69e2",
    "label": "bindCallback"
  },
  "74e1": {
    "id": "74e1",
    "label": "supporting a conventional callback API",
    "options": [
      "69e2"
    ]
  },
  "e730": {
    "id": "e730",
    "label": "bindNodeCallback"
  },
  "c874": {
    "id": "c874",
    "label": "I have no Observables yet, and",
    "options": [
      "508b",
      "4806"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "96eb",
      "cddb",
      "c874"
    ]
  }
}