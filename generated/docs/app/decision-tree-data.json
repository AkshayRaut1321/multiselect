{
  "1168": {
    "id": "1168",
    "label": "expand"
  },
  "1209": {
    "id": "1209",
    "label": "that never emits anything",
    "options": [
      "4e85"
    ]
  },
  "1765": {
    "id": "1765",
    "label": "throttleTime"
  },
  "1836": {
    "id": "1836",
    "label": "based on custom logic",
    "options": [
      "d578"
    ]
  },
  "1888": {
    "id": "1888",
    "label": "windowToggle"
  },
  "2754": {
    "id": "2754",
    "label": "according to value equality",
    "options": [
      "501b",
      "43a4"
    ]
  },
  "2773": {
    "id": "2773",
    "label": "reduce"
  },
  "2777": {
    "id": "2777",
    "label": "merge"
  },
  "3319": {
    "id": "3319",
    "label": "using a ReplaySubject",
    "options": [
      "ff2e"
    ]
  },
  "3350": {
    "id": "3350",
    "label": "I want to start a new Observable",
    "options": [
      "d524"
    ]
  },
  "3443": {
    "id": "3443",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "407f"
    ]
  },
  "3612": {
    "id": "3612",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "a592"
    ]
  },
  "3855": {
    "id": "3855",
    "label": "from"
  },
  "3966": {
    "id": "3966",
    "label": "withLatestFrom"
  },
  "3979": {
    "id": "3979",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "f3ef"
    ]
  },
  "4094": {
    "id": "4094",
    "label": "based on a given amount",
    "options": [
      "c8a0"
    ]
  },
  "4352": {
    "id": "4352",
    "label": "race"
  },
  "5487": {
    "id": "5487",
    "label": "using a specific subject implementation",
    "options": [
      "884d"
    ]
  },
  "5534": {
    "id": "5534",
    "label": "that occur too frequently",
    "options": [
      "c9a6",
      "c449",
      "d0ae"
    ]
  },
  "5678": {
    "id": "5678",
    "label": "auditTime"
  },
  "6276": {
    "id": "6276",
    "label": "pipe"
  },
  "7282": {
    "id": "7282",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "cd6f",
      "f350",
      "3319",
      "31e8",
      "5487"
    ]
  },
  "8121": {
    "id": "8121",
    "label": "based on a given amount",
    "options": [
      "86e6"
    ]
  },
  "8419": {
    "id": "8419",
    "label": "after a period of inactivity",
    "options": [
      "0fae",
      "0056"
    ]
  },
  "8588": {
    "id": "8588",
    "label": "using each source value only once",
    "options": [
      "76f4"
    ]
  },
  "8797": {
    "id": "8797",
    "label": "observeOn"
  },
  "8877": {
    "id": "8877",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "4352"
    ]
  },
  "9201": {
    "id": "9201",
    "label": "until another Observable emits",
    "options": [
      "f3c0",
      "c999"
    ]
  },
  "9325": {
    "id": "9325",
    "label": "from"
  },
  "9400": {
    "id": "9400",
    "label": "delay"
  },
  "9791": {
    "id": "9791",
    "label": "based on time",
    "options": [
      "cffe",
      "fbec"
    ]
  },
  "31f8": {
    "id": "31f8",
    "label": "mapTo"
  },
  "4a74": {
    "id": "4a74",
    "label": "to be a constant value",
    "options": [
      "31f8"
    ]
  },
  "73b5": {
    "id": "73b5",
    "label": "map"
  },
  "b0e4": {
    "id": "b0e4",
    "label": "to be a value calculated through a formula",
    "options": [
      "73b5"
    ]
  },
  "e30f": {
    "id": "e30f",
    "label": "I want to change each emitted value",
    "options": [
      "4a74",
      "b0e4"
    ]
  },
  "17aa": {
    "id": "17aa",
    "label": "pluck"
  },
  "571d": {
    "id": "571d",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "17aa"
    ]
  },
  "407f": {
    "id": "407f",
    "label": "tap"
  },
  "a0d2": {
    "id": "a0d2",
    "label": "filter"
  },
  "e0fd": {
    "id": "e0fd",
    "label": "based on custom logic",
    "options": [
      "a0d2"
    ]
  },
  "e887": {
    "id": "e887",
    "label": "first"
  },
  "c1a8": {
    "id": "c1a8",
    "label": "and only the first value",
    "options": [
      "e887"
    ]
  },
  "c8a0": {
    "id": "c8a0",
    "label": "take"
  },
  "8c3a": {
    "id": "8c3a",
    "label": "takeWhile"
  },
  "26e7": {
    "id": "26e7",
    "label": "based on custom logic",
    "options": [
      "8c3a"
    ]
  },
  "0e38": {
    "id": "0e38",
    "label": "if they are at the start of the Observable",
    "options": [
      "c1a8",
      "4094",
      "26e7"
    ]
  },
  "d9a2": {
    "id": "d9a2",
    "label": "elementAt"
  },
  "83d6": {
    "id": "83d6",
    "label": "if they are exactly the n-th emission",
    "options": [
      "d9a2"
    ]
  },
  "83d7": {
    "id": "83d7",
    "label": "last"
  },
  "ca05": {
    "id": "ca05",
    "label": "and only the last value",
    "options": [
      "83d7"
    ]
  },
  "86e6": {
    "id": "86e6",
    "label": "takeLast"
  },
  "fcd6": {
    "id": "fcd6",
    "label": "if they are at the end of the Observable",
    "options": [
      "ca05",
      "8121"
    ]
  },
  "71b9": {
    "id": "71b9",
    "label": "takeUntil"
  },
  "0d03": {
    "id": "0d03",
    "label": "until another Observable emits a value",
    "options": [
      "71b9"
    ]
  },
  "c419": {
    "id": "c419",
    "label": "I want to allow some values to pass",
    "options": [
      "e0fd",
      "0e38",
      "83d6",
      "fcd6",
      "0d03"
    ]
  },
  "e05f": {
    "id": "e05f",
    "label": "ignoreElements"
  },
  "e627": {
    "id": "e627",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "8f53"
    ]
  },
  "c4bd": {
    "id": "c4bd",
    "label": "skip"
  },
  "f71c": {
    "id": "f71c",
    "label": "based on a given amount",
    "options": [
      "c4bd"
    ]
  },
  "d578": {
    "id": "d578",
    "label": "skipWhile"
  },
  "e6e7": {
    "id": "e6e7",
    "label": "from the start of the Observable",
    "options": [
      "f71c",
      "1836"
    ]
  },
  "20f3": {
    "id": "20f3",
    "label": "skipLast"
  },
  "c159": {
    "id": "c159",
    "label": "from the end of the Observable",
    "options": [
      "20f3"
    ]
  },
  "d554": {
    "id": "d554",
    "label": "skipUntil"
  },
  "92c9": {
    "id": "92c9",
    "label": "until another Observable emits a value",
    "options": [
      "d554"
    ]
  },
  "a0f3": {
    "id": "a0f3",
    "label": "distinctUntilChanged"
  },
  "501b": {
    "id": "501b",
    "label": "emitted just before the current value",
    "options": [
      "a0f3"
    ]
  },
  "a722": {
    "id": "a722",
    "label": "distinct"
  },
  "43a4": {
    "id": "43a4",
    "label": "emitted some time in the past",
    "options": [
      "a722"
    ]
  },
  "096e": {
    "id": "096e",
    "label": "distinctUntilKeyChanged"
  },
  "d03d": {
    "id": "d03d",
    "label": "emitted just before the current value",
    "options": [
      "096e"
    ]
  },
  "1dda": {
    "id": "1dda",
    "label": "according to a key or object property",
    "options": [
      "d03d"
    ]
  },
  "48f0": {
    "id": "48f0",
    "label": "that match some previous value",
    "options": [
      "2754",
      "1dda"
    ]
  },
  "90fd": {
    "id": "90fd",
    "label": "throttle"
  },
  "409e": {
    "id": "409e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "90fd"
    ]
  },
  "e47c": {
    "id": "e47c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1765"
    ]
  },
  "c9a6": {
    "id": "c9a6",
    "label": "by emitting the first value in each time window",
    "options": [
      "409e",
      "e47c"
    ]
  },
  "f5a7": {
    "id": "f5a7",
    "label": "audit"
  },
  "c3b6": {
    "id": "c3b6",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "f5a7"
    ]
  },
  "528c": {
    "id": "528c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "5678"
    ]
  },
  "c449": {
    "id": "c449",
    "label": "by emitting the last value in each time window",
    "options": [
      "c3b6",
      "528c"
    ]
  },
  "0083": {
    "id": "0083",
    "label": "debounce"
  },
  "98f0": {
    "id": "98f0",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "0083"
    ]
  },
  "f3ef": {
    "id": "f3ef",
    "label": "debounceTime"
  },
  "d0ae": {
    "id": "d0ae",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "98f0",
      "3979"
    ]
  },
  "1aee": {
    "id": "1aee",
    "label": "I want to ignore values",
    "options": [
      "e627",
      "e6e7",
      "c159",
      "92c9",
      "48f0",
      "5534"
    ]
  },
  "34a5": {
    "id": "34a5",
    "label": "and only output the final computed value",
    "options": [
      "2773"
    ]
  },
  "593d": {
    "id": "593d",
    "label": "scan"
  },
  "502c": {
    "id": "502c",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "593d"
    ]
  },
  "a592": {
    "id": "a592",
    "label": "mergeScan"
  },
  "886c": {
    "id": "886c",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "34a5",
      "502c",
      "3612"
    ]
  },
  "54f0": {
    "id": "54f0",
    "label": "materialize"
  },
  "2e94": {
    "id": "2e94",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "54f0"
    ]
  },
  "6b9a": {
    "id": "6b9a",
    "label": "timeInterval"
  },
  "0307": {
    "id": "0307",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "6b9a"
    ]
  },
  "4b8e": {
    "id": "4b8e",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "2e94",
      "0307"
    ]
  },
  "578a": {
    "id": "578a",
    "label": "timeout"
  },
  "0fae": {
    "id": "0fae",
    "label": "I want to throw an error",
    "options": [
      "578a"
    ]
  },
  "edd8": {
    "id": "edd8",
    "label": "timeoutWith"
  },
  "0056": {
    "id": "0056",
    "label": "I want to switch to another Observable",
    "options": [
      "edd8"
    ]
  },
  "cf32": {
    "id": "cf32",
    "label": "single"
  },
  "bc4d": {
    "id": "bc4d",
    "label": "I want to ensure there is only one value",
    "options": [
      "cf32"
    ]
  },
  "63ad": {
    "id": "63ad",
    "label": "count"
  },
  "e8bf": {
    "id": "e8bf",
    "label": "I want to know how many values it emits",
    "options": [
      "63ad"
    ]
  },
  "ab3e": {
    "id": "ab3e",
    "label": "startWith"
  },
  "3a07": {
    "id": "3a07",
    "label": "I want to prepend one value",
    "options": [
      "ab3e"
    ]
  },
  "ce81": {
    "id": "ce81",
    "label": "based on a given amount of time",
    "options": [
      "9400"
    ]
  },
  "2a5d": {
    "id": "2a5d",
    "label": "delayWhen"
  },
  "400c": {
    "id": "400c",
    "label": "based on the emissions of another Observable",
    "options": [
      "2a5d"
    ]
  },
  "d50f": {
    "id": "d50f",
    "label": "I want to delay the emissions",
    "options": [
      "ce81",
      "400c"
    ]
  },
  "1d43": {
    "id": "1d43",
    "label": "toArray"
  },
  "b93e": {
    "id": "b93e",
    "label": "and convert to an array",
    "options": [
      "1d43"
    ]
  },
  "55fd": {
    "id": "55fd",
    "label": "Observable",
    "method": "toPromise"
  },
  "c319": {
    "id": "c319",
    "label": "and convert to a Promise",
    "options": [
      "55fd"
    ]
  },
  "4db7": {
    "id": "4db7",
    "label": "until the Observable completes",
    "options": [
      "b93e",
      "c319"
    ]
  },
  "a77c": {
    "id": "a77c",
    "label": "pairwise"
  },
  "a72f": {
    "id": "a72f",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "a77c"
    ]
  },
  "5af1": {
    "id": "5af1",
    "label": "partition"
  },
  "b64b": {
    "id": "b64b",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "5af1"
    ]
  },
  "bee0": {
    "id": "bee0",
    "label": "bufferCount"
  },
  "78c3": {
    "id": "78c3",
    "label": "and emit the group as an array",
    "options": [
      "bee0"
    ]
  },
  "603c": {
    "id": "603c",
    "label": "windowCount"
  },
  "56e3": {
    "id": "56e3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "603c"
    ]
  },
  "b2ae": {
    "id": "b2ae",
    "label": "in batches of a particular size",
    "options": [
      "78c3",
      "56e3"
    ]
  },
  "0aac": {
    "id": "0aac",
    "label": "bufferTime"
  },
  "cffe": {
    "id": "cffe",
    "label": "and emit the group as an array",
    "options": [
      "0aac"
    ]
  },
  "5e05": {
    "id": "5e05",
    "label": "windowTime"
  },
  "fbec": {
    "id": "fbec",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5e05"
    ]
  },
  "e20e": {
    "id": "e20e",
    "label": "buffer"
  },
  "f3c0": {
    "id": "f3c0",
    "label": "and emit the group as an array",
    "options": [
      "e20e"
    ]
  },
  "03ae": {
    "id": "03ae",
    "label": "window"
  },
  "c999": {
    "id": "c999",
    "label": "and emit the group as a nested Observable",
    "options": [
      "03ae"
    ]
  },
  "767f": {
    "id": "767f",
    "label": "bufferWhen"
  },
  "e0ec": {
    "id": "e0ec",
    "label": "and emit the group as an array",
    "options": [
      "767f"
    ]
  },
  "9a44": {
    "id": "9a44",
    "label": "windowWhen"
  },
  "436f": {
    "id": "436f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9a44"
    ]
  },
  "c457": {
    "id": "c457",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "e0ec",
      "436f"
    ]
  },
  "d88a": {
    "id": "d88a",
    "label": "bufferToggle"
  },
  "f2dd": {
    "id": "f2dd",
    "label": "and emit the group as an array",
    "options": [
      "d88a"
    ]
  },
  "f9de": {
    "id": "f9de",
    "label": "and emit the group as a nested Observable",
    "options": [
      "1888"
    ]
  },
  "5e43": {
    "id": "5e43",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "f2dd",
      "f9de"
    ]
  },
  "6cf2": {
    "id": "6cf2",
    "label": "groupBy"
  },
  "e0b5": {
    "id": "e0b5",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6cf2"
    ]
  },
  "b42d": {
    "id": "b42d",
    "label": "I want to group the values",
    "options": [
      "4db7",
      "a72f",
      "b64b",
      "b2ae",
      "9791",
      "9201",
      "c457",
      "5e43",
      "e0b5"
    ]
  },
  "53eb": {
    "id": "53eb",
    "label": "mergeMapTo"
  },
  "b51f": {
    "id": "b51f",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "53eb"
    ]
  },
  "2e1c": {
    "id": "2e1c",
    "label": "mergeMap"
  },
  "27a2": {
    "id": "27a2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2e1c"
    ]
  },
  "4d52": {
    "id": "4d52",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "b51f",
      "27a2"
    ]
  },
  "b594": {
    "id": "b594",
    "label": "concatMapTo"
  },
  "d42e": {
    "id": "d42e",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b594"
    ]
  },
  "7f55": {
    "id": "7f55",
    "label": "concatMap"
  },
  "84cd": {
    "id": "84cd",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7f55"
    ]
  },
  "a985": {
    "id": "a985",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "d42e",
      "84cd"
    ]
  },
  "f6dc": {
    "id": "f6dc",
    "label": "switchMapTo"
  },
  "d088": {
    "id": "d088",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "f6dc"
    ]
  },
  "b452": {
    "id": "b452",
    "label": "switchMap"
  },
  "8ed8": {
    "id": "8ed8",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b452"
    ]
  },
  "dec6": {
    "id": "dec6",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "d088",
      "8ed8"
    ]
  },
  "8f53": {
    "id": "8f53",
    "label": "exhaustMap"
  },
  "aff2": {
    "id": "aff2",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "1168"
    ]
  },
  "b628": {
    "id": "b628",
    "label": "I want to start a new Observable for each value",
    "options": [
      "4d52",
      "a985",
      "dec6",
      "e627",
      "aff2"
    ]
  },
  "f3bb": {
    "id": "f3bb",
    "label": "I want to perform custom operations",
    "options": [
      "6276"
    ]
  },
  "53e6": {
    "id": "53e6",
    "label": "share"
  },
  "33cb": {
    "id": "33cb",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "53e6"
    ]
  },
  "30f4": {
    "id": "30f4",
    "label": "publish"
  },
  "5aa9": {
    "id": "5aa9",
    "label": "and start it manually or imperatively",
    "options": [
      "30f4"
    ]
  },
  "cd6f": {
    "id": "cd6f",
    "label": "using a conventional Subject",
    "options": [
      "33cb",
      "5aa9"
    ]
  },
  "44e0": {
    "id": "44e0",
    "label": "publishBehavior"
  },
  "f350": {
    "id": "f350",
    "label": "using a BehaviorSubject",
    "options": [
      "44e0"
    ]
  },
  "ff2e": {
    "id": "ff2e",
    "label": "publishReplay"
  },
  "0802": {
    "id": "0802",
    "label": "publishLast"
  },
  "31e8": {
    "id": "31e8",
    "label": "using an AsyncSubject",
    "options": [
      "0802"
    ]
  },
  "884d": {
    "id": "884d",
    "label": "multicast"
  },
  "a1f2": {
    "id": "a1f2",
    "label": "catchError"
  },
  "1f24": {
    "id": "1f24",
    "label": "I want to start a new Observable",
    "options": [
      "a1f2"
    ]
  },
  "a130": {
    "id": "a130",
    "label": "retry"
  },
  "d7bb": {
    "id": "d7bb",
    "label": "immediately",
    "options": [
      "a130"
    ]
  },
  "f0ec": {
    "id": "f0ec",
    "label": "retryWhen"
  },
  "22c5": {
    "id": "22c5",
    "label": "when another Observable emits",
    "options": [
      "f0ec"
    ]
  },
  "c268": {
    "id": "c268",
    "label": "I want to re-subscribe",
    "options": [
      "d7bb",
      "22c5"
    ]
  },
  "a5a3": {
    "id": "a5a3",
    "label": "when an error occurs",
    "options": [
      "1f24",
      "c268"
    ]
  },
  "c0a3": {
    "id": "c0a3",
    "label": "repeat"
  },
  "90f6": {
    "id": "90f6",
    "label": "immediately",
    "options": [
      "c0a3"
    ]
  },
  "d9e8": {
    "id": "d9e8",
    "label": "repeatWhen"
  },
  "acf1": {
    "id": "acf1",
    "label": "when another Observable emits",
    "options": [
      "d9e8"
    ]
  },
  "b7d0": {
    "id": "b7d0",
    "label": "I want to re-subscribe",
    "options": [
      "90f6",
      "acf1"
    ]
  },
  "d524": {
    "id": "d524",
    "label": "concat"
  },
  "9fc0": {
    "id": "9fc0",
    "label": "when it completes",
    "options": [
      "b7d0",
      "3350"
    ]
  },
  "c870": {
    "id": "c870",
    "label": "finalize"
  },
  "71dd": {
    "id": "71dd",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c870"
    ]
  },
  "5a5f": {
    "id": "5a5f",
    "label": "subscribeOn"
  },
  "5a66": {
    "id": "5a66",
    "label": "that routes calls to subscribe",
    "options": [
      "5a5f"
    ]
  },
  "ef53": {
    "id": "ef53",
    "label": "that routes values to observers",
    "options": [
      "8797"
    ]
  },
  "30f8": {
    "id": "30f8",
    "label": "I want to change the scheduler",
    "options": [
      "5a66",
      "ef53"
    ]
  },
  "dae7": {
    "id": "dae7",
    "label": "merge"
  },
  "0645": {
    "id": "0645",
    "label": "I want to output the values from either of them",
    "options": [
      "dae7"
    ]
  },
  "54ec": {
    "id": "54ec",
    "label": "combineLatest"
  },
  "2d77": {
    "id": "2d77",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "54ec"
    ]
  },
  "f4c2": {
    "id": "f4c2",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "3966"
    ]
  },
  "7f32": {
    "id": "7f32",
    "label": "zip"
  },
  "b8e9": {
    "id": "b8e9",
    "label": "using each source value only once",
    "options": [
      "7f32"
    ]
  },
  "afb8": {
    "id": "afb8",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "2d77",
      "f4c2",
      "b8e9"
    ]
  },
  "9c63": {
    "id": "9c63",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8877",
      "0645",
      "afb8"
    ]
  },
  "9cac": {
    "id": "9cac",
    "label": "I have one existing Observable, and",
    "options": [
      "e30f",
      "571d",
      "3443",
      "c419",
      "1aee",
      "886c",
      "4b8e",
      "8419",
      "bc4d",
      "e8bf",
      "3a07",
      "d50f",
      "b42d",
      "b628",
      "f3bb",
      "7282",
      "a5a3",
      "9fc0",
      "71dd",
      "30f8",
      "9c63"
    ]
  },
  "8c73": {
    "id": "8c73",
    "label": "race"
  },
  "d757": {
    "id": "d757",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8c73"
    ]
  },
  "6cf1": {
    "id": "6cf1",
    "label": "forkJoin"
  },
  "c777": {
    "id": "c777",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "6cf1"
    ]
  },
  "41c7": {
    "id": "41c7",
    "label": "I want to output the values from either of them",
    "options": [
      "2777"
    ]
  },
  "828e": {
    "id": "828e",
    "label": "combineLatest"
  },
  "fbd8": {
    "id": "fbd8",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "828e"
    ]
  },
  "76f4": {
    "id": "76f4",
    "label": "zip"
  },
  "2b5a": {
    "id": "2b5a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "fbd8",
      "8588"
    ]
  },
  "34ce": {
    "id": "34ce",
    "label": "concat"
  },
  "ea0c": {
    "id": "ea0c",
    "label": "I want to subscribe to each in order",
    "options": [
      "34ce"
    ]
  },
  "0020": {
    "id": "0020",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "d757",
      "c777",
      "41c7",
      "2b5a",
      "ea0c"
    ]
  },
  "cc8c": {
    "id": "cc8c",
    "label": "Observable",
    "method": "create"
  },
  "f7c7": {
    "id": "f7c7",
    "label": "using custom logic",
    "options": [
      "cc8c"
    ]
  },
  "4a21": {
    "id": "4a21",
    "label": "generate"
  },
  "521d": {
    "id": "521d",
    "label": "using a state machine similar to a for loop",
    "options": [
      "4a21"
    ]
  },
  "f085": {
    "id": "f085",
    "label": "throwError"
  },
  "74e6": {
    "id": "74e6",
    "label": "that throws an error",
    "options": [
      "f085"
    ]
  },
  "97f8": {
    "id": "97f8",
    "label": "EMPTY"
  },
  "f6a0": {
    "id": "f6a0",
    "label": "that just completes, without emitting values",
    "options": [
      "97f8"
    ]
  },
  "4e85": {
    "id": "4e85",
    "label": "NEVER"
  },
  "258b": {
    "id": "258b",
    "label": "fromEvent"
  },
  "c057": {
    "id": "c057",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "258b"
    ]
  },
  "08b6": {
    "id": "08b6",
    "label": "fromEventPattern"
  },
  "033f": {
    "id": "033f",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "08b6"
    ]
  },
  "14b7": {
    "id": "14b7",
    "label": "from an existing source of events",
    "options": [
      "c057",
      "033f"
    ]
  },
  "4b84": {
    "id": "4b84",
    "label": "from a Promise or an event source",
    "options": [
      "3855"
    ]
  },
  "984e": {
    "id": "984e",
    "label": "over the values in an array",
    "options": [
      "9325"
    ]
  },
  "b666": {
    "id": "b666",
    "label": "range"
  },
  "0ae6": {
    "id": "0ae6",
    "label": "over values in a numeric range",
    "options": [
      "b666"
    ]
  },
  "fc1c": {
    "id": "fc1c",
    "label": "of"
  },
  "98a2": {
    "id": "98a2",
    "label": "over prefined values given as arguments",
    "options": [
      "fc1c"
    ]
  },
  "a330": {
    "id": "a330",
    "label": "that iterates",
    "options": [
      "984e",
      "0ae6",
      "98a2"
    ]
  },
  "64c1": {
    "id": "64c1",
    "label": "interval"
  },
  "419c": {
    "id": "419c",
    "label": "regularly",
    "options": [
      "64c1"
    ]
  },
  "c80e": {
    "id": "c80e",
    "label": "timer"
  },
  "125b": {
    "id": "125b",
    "label": "with an optional initial delay",
    "options": [
      "c80e"
    ]
  },
  "2a6f": {
    "id": "2a6f",
    "label": "that emits values on a timer",
    "options": [
      "419c",
      "125b"
    ]
  },
  "92d9": {
    "id": "92d9",
    "label": "defer"
  },
  "34c4": {
    "id": "34c4",
    "label": "which is built on demand when subscribed",
    "options": [
      "92d9"
    ]
  },
  "e1b4": {
    "id": "e1b4",
    "label": "I want to create a new Observable",
    "options": [
      "f7c7",
      "521d",
      "74e6",
      "f6a0",
      "1209",
      "14b7",
      "4b84",
      "a330",
      "2a6f",
      "34c4"
    ]
  },
  "54e9": {
    "id": "54e9",
    "label": "bindCallback"
  },
  "948a": {
    "id": "948a",
    "label": "supporting a conventional callback API",
    "options": [
      "54e9"
    ]
  },
  "eb63": {
    "id": "eb63",
    "label": "bindNodeCallback"
  },
  "ceec": {
    "id": "ceec",
    "label": "supporting Node.js callback style API",
    "options": [
      "eb63"
    ]
  },
  "a229": {
    "id": "a229",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "948a",
      "ceec"
    ]
  },
  "b0ef": {
    "id": "b0ef",
    "label": "I have no Observables yet, and",
    "options": [
      "e1b4",
      "a229"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "9cac",
      "0020",
      "b0ef"
    ]
  }
}