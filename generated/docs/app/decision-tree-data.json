{
  "1142": {
    "id": "1142",
    "label": "I want to allow some values to pass",
    "options": [
      "bd7f",
      "8fd8",
      "66c1",
      "e6dc",
      "21a9"
    ]
  },
  "1256": {
    "id": "1256",
    "label": "using a conventional Subject",
    "options": [
      "10fd",
      "0dce"
    ]
  },
  "1508": {
    "id": "1508",
    "label": "supporting a conventional callback API",
    "options": [
      "e72d"
    ]
  },
  "1680": {
    "id": "1680",
    "label": "first"
  },
  "1856": {
    "id": "1856",
    "label": "windowToggle"
  },
  "2018": {
    "id": "2018",
    "label": "takeWhile"
  },
  "2249": {
    "id": "2249",
    "label": "I want to ensure there is only one value",
    "options": [
      "49a0"
    ]
  },
  "2303": {
    "id": "2303",
    "label": "based on the emissions of another Observable",
    "options": [
      "b2f4"
    ]
  },
  "2438": {
    "id": "2438",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "49bd"
    ]
  },
  "2634": {
    "id": "2634",
    "label": "I want to perform custom operations",
    "options": [
      "2a4d"
    ]
  },
  "3258": {
    "id": "3258",
    "label": "concatMap"
  },
  "3296": {
    "id": "3296",
    "label": "merge"
  },
  "3372": {
    "id": "3372",
    "label": "publishLast"
  },
  "3840": {
    "id": "3840",
    "label": "I want to know how many values it emits",
    "options": [
      "c2e9"
    ]
  },
  "3879": {
    "id": "3879",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f3d4"
    ]
  },
  "4251": {
    "id": "4251",
    "label": "emitted some time in the past",
    "options": [
      "8ef8"
    ]
  },
  "4462": {
    "id": "4462",
    "label": "generate"
  },
  "4524": {
    "id": "4524",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "f8fa"
    ]
  },
  "4547": {
    "id": "4547",
    "label": "and only output the final computed value",
    "options": [
      "f2f1"
    ]
  },
  "4793": {
    "id": "4793",
    "label": "throttleTime"
  },
  "4921": {
    "id": "4921",
    "label": "I want to start a new Observable for each value",
    "options": [
      "9c25",
      "8949",
      "c7f0",
      "c00f",
      "7f38"
    ]
  },
  "5123": {
    "id": "5123",
    "label": "switchMapTo"
  },
  "5332": {
    "id": "5332",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7fb9"
    ]
  },
  "6383": {
    "id": "6383",
    "label": "by emitting the last value in each time window",
    "options": [
      "0e66",
      "01f8"
    ]
  },
  "6532": {
    "id": "6532",
    "label": "startWith"
  },
  "6655": {
    "id": "6655",
    "label": "until the Observable completes",
    "options": [
      "7bd0",
      "7899"
    ]
  },
  "7683": {
    "id": "7683",
    "label": "based on time",
    "options": [
      "a607",
      "481b"
    ]
  },
  "7786": {
    "id": "7786",
    "label": "and emit the group as a nested Observable",
    "options": [
      "48c7"
    ]
  },
  "7797": {
    "id": "7797",
    "label": "to be a value calculated through a formula",
    "options": [
      "4e6c"
    ]
  },
  "7866": {
    "id": "7866",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "637b"
    ]
  },
  "7899": {
    "id": "7899",
    "label": "and convert to a Promise",
    "options": [
      "f53c"
    ]
  },
  "7908": {
    "id": "7908",
    "label": "using each source value only once",
    "options": [
      "b8fa"
    ]
  },
  "8060": {
    "id": "8060",
    "label": "in batches of a particular size",
    "options": [
      "8977",
      "7786"
    ]
  },
  "8363": {
    "id": "8363",
    "label": "I have one existing Observable, and",
    "options": [
      "00fd",
      "8f69",
      "2ea1",
      "1142",
      "e465",
      "823d",
      "ca9d",
      "c605",
      "2249",
      "3840",
      "f37f",
      "eaa3",
      "95ea",
      "4921",
      "2634",
      "66cd",
      "61a1",
      "d896",
      "d581",
      "0ab1",
      "f19c"
    ]
  },
  "8422": {
    "id": "8422",
    "label": "ignoreElements"
  },
  "8468": {
    "id": "8468",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "65bc"
    ]
  },
  "8529": {
    "id": "8529",
    "label": "by emitting the first value in each time window",
    "options": [
      "5bf3",
      "973d"
    ]
  },
  "8949": {
    "id": "8949",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "5332",
      "0cb4"
    ]
  },
  "8977": {
    "id": "8977",
    "label": "and emit the group as an array",
    "options": [
      "07a6"
    ]
  },
  "8983": {
    "id": "8983",
    "label": "skipWhile"
  },
  "35b1": {
    "id": "35b1",
    "label": "mapTo"
  },
  "a9de": {
    "id": "a9de",
    "label": "to be a constant value",
    "options": [
      "35b1"
    ]
  },
  "4e6c": {
    "id": "4e6c",
    "label": "map"
  },
  "00fd": {
    "id": "00fd",
    "label": "I want to change each emitted value",
    "options": [
      "a9de",
      "7797"
    ]
  },
  "beba": {
    "id": "beba",
    "label": "pluck"
  },
  "8f69": {
    "id": "8f69",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "beba"
    ]
  },
  "d90c": {
    "id": "d90c",
    "label": "tap"
  },
  "2ea1": {
    "id": "2ea1",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "d90c"
    ]
  },
  "d605": {
    "id": "d605",
    "label": "filter"
  },
  "bd7f": {
    "id": "bd7f",
    "label": "based on custom logic",
    "options": [
      "d605"
    ]
  },
  "a259": {
    "id": "a259",
    "label": "and only the first value",
    "options": [
      "1680"
    ]
  },
  "bbb6": {
    "id": "bbb6",
    "label": "take"
  },
  "611c": {
    "id": "611c",
    "label": "based on a given amount",
    "options": [
      "bbb6"
    ]
  },
  "44ea": {
    "id": "44ea",
    "label": "based on custom logic",
    "options": [
      "2018"
    ]
  },
  "8fd8": {
    "id": "8fd8",
    "label": "if they are at the start of the Observable",
    "options": [
      "a259",
      "611c",
      "44ea"
    ]
  },
  "5cfd": {
    "id": "5cfd",
    "label": "elementAt"
  },
  "66c1": {
    "id": "66c1",
    "label": "if they are exactly the n-th emission",
    "options": [
      "5cfd"
    ]
  },
  "662f": {
    "id": "662f",
    "label": "last"
  },
  "39d3": {
    "id": "39d3",
    "label": "and only the last value",
    "options": [
      "662f"
    ]
  },
  "b499": {
    "id": "b499",
    "label": "takeLast"
  },
  "c743": {
    "id": "c743",
    "label": "based on a given amount",
    "options": [
      "b499"
    ]
  },
  "e6dc": {
    "id": "e6dc",
    "label": "if they are at the end of the Observable",
    "options": [
      "39d3",
      "c743"
    ]
  },
  "11fc": {
    "id": "11fc",
    "label": "takeUntil"
  },
  "21a9": {
    "id": "21a9",
    "label": "until another Observable emits a value",
    "options": [
      "11fc"
    ]
  },
  "9f8e": {
    "id": "9f8e",
    "label": "altogether",
    "options": [
      "8422"
    ]
  },
  "0219": {
    "id": "0219",
    "label": "skip"
  },
  "fb12": {
    "id": "fb12",
    "label": "based on a given amount",
    "options": [
      "0219"
    ]
  },
  "e69d": {
    "id": "e69d",
    "label": "based on custom logic",
    "options": [
      "8983"
    ]
  },
  "56a5": {
    "id": "56a5",
    "label": "from the start of the Observable",
    "options": [
      "fb12",
      "e69d"
    ]
  },
  "66a6": {
    "id": "66a6",
    "label": "skipLast"
  },
  "a577": {
    "id": "a577",
    "label": "from the end of the Observable",
    "options": [
      "66a6"
    ]
  },
  "7b5b": {
    "id": "7b5b",
    "label": "skipUntil"
  },
  "b26f": {
    "id": "b26f",
    "label": "until another Observable emits a value",
    "options": [
      "7b5b"
    ]
  },
  "34de": {
    "id": "34de",
    "label": "distinctUntilChanged"
  },
  "ecd1": {
    "id": "ecd1",
    "label": "emitted just before the current value",
    "options": [
      "34de"
    ]
  },
  "8ef8": {
    "id": "8ef8",
    "label": "distinct"
  },
  "ddf2": {
    "id": "ddf2",
    "label": "according to value equality",
    "options": [
      "ecd1",
      "4251"
    ]
  },
  "a834": {
    "id": "a834",
    "label": "distinctUntilKeyChanged"
  },
  "8a48": {
    "id": "8a48",
    "label": "emitted just before the current value",
    "options": [
      "a834"
    ]
  },
  "531a": {
    "id": "531a",
    "label": "according to a key or object property",
    "options": [
      "8a48"
    ]
  },
  "8d64": {
    "id": "8d64",
    "label": "that match some previous value",
    "options": [
      "ddf2",
      "531a"
    ]
  },
  "a1cc": {
    "id": "a1cc",
    "label": "throttle"
  },
  "5bf3": {
    "id": "5bf3",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a1cc"
    ]
  },
  "973d": {
    "id": "973d",
    "label": "where time windows are determined by a time duration",
    "options": [
      "4793"
    ]
  },
  "69c2": {
    "id": "69c2",
    "label": "audit"
  },
  "0e66": {
    "id": "0e66",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "69c2"
    ]
  },
  "6de5": {
    "id": "6de5",
    "label": "auditTime"
  },
  "01f8": {
    "id": "01f8",
    "label": "where time windows are determined by a time duration",
    "options": [
      "6de5"
    ]
  },
  "be25": {
    "id": "be25",
    "label": "debounce"
  },
  "837c": {
    "id": "837c",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "be25"
    ]
  },
  "637b": {
    "id": "637b",
    "label": "debounceTime"
  },
  "3ec3": {
    "id": "3ec3",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "837c",
      "7866"
    ]
  },
  "271f": {
    "id": "271f",
    "label": "that occur too frequently",
    "options": [
      "8529",
      "6383",
      "3ec3"
    ]
  },
  "e465": {
    "id": "e465",
    "label": "I want to ignore values",
    "options": [
      "9f8e",
      "56a5",
      "a577",
      "b26f",
      "8d64",
      "271f"
    ]
  },
  "f2f1": {
    "id": "f2f1",
    "label": "reduce"
  },
  "ca91": {
    "id": "ca91",
    "label": "scan"
  },
  "a5ef": {
    "id": "a5ef",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "ca91"
    ]
  },
  "5d6d": {
    "id": "5d6d",
    "label": "mergeScan"
  },
  "0ef0": {
    "id": "0ef0",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "5d6d"
    ]
  },
  "823d": {
    "id": "823d",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "4547",
      "a5ef",
      "0ef0"
    ]
  },
  "f8fa": {
    "id": "f8fa",
    "label": "materialize"
  },
  "cbf7": {
    "id": "cbf7",
    "label": "timeInterval"
  },
  "f33e": {
    "id": "f33e",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "cbf7"
    ]
  },
  "ca9d": {
    "id": "ca9d",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "4524",
      "f33e"
    ]
  },
  "e0cb": {
    "id": "e0cb",
    "label": "timeout"
  },
  "caa3": {
    "id": "caa3",
    "label": "I want to throw an error",
    "options": [
      "e0cb"
    ]
  },
  "91f6": {
    "id": "91f6",
    "label": "timeoutWith"
  },
  "0dcd": {
    "id": "0dcd",
    "label": "I want to switch to another Observable",
    "options": [
      "91f6"
    ]
  },
  "c605": {
    "id": "c605",
    "label": "after a period of inactivity",
    "options": [
      "caa3",
      "0dcd"
    ]
  },
  "49a0": {
    "id": "49a0",
    "label": "single"
  },
  "c2e9": {
    "id": "c2e9",
    "label": "count"
  },
  "f37f": {
    "id": "f37f",
    "label": "I want to prepend one value",
    "options": [
      "6532"
    ]
  },
  "23fa": {
    "id": "23fa",
    "label": "delay"
  },
  "71e8": {
    "id": "71e8",
    "label": "based on a given amount of time",
    "options": [
      "23fa"
    ]
  },
  "b2f4": {
    "id": "b2f4",
    "label": "delayWhen"
  },
  "eaa3": {
    "id": "eaa3",
    "label": "I want to delay the emissions",
    "options": [
      "71e8",
      "2303"
    ]
  },
  "d4a6": {
    "id": "d4a6",
    "label": "toArray"
  },
  "7bd0": {
    "id": "7bd0",
    "label": "and convert to an array",
    "options": [
      "d4a6"
    ]
  },
  "f53c": {
    "id": "f53c",
    "label": "Observable",
    "method": "toPromise"
  },
  "65bc": {
    "id": "65bc",
    "label": "pairwise"
  },
  "1e91": {
    "id": "1e91",
    "label": "partition"
  },
  "64dd": {
    "id": "64dd",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "1e91"
    ]
  },
  "07a6": {
    "id": "07a6",
    "label": "bufferCount"
  },
  "48c7": {
    "id": "48c7",
    "label": "windowCount"
  },
  "d789": {
    "id": "d789",
    "label": "bufferTime"
  },
  "a607": {
    "id": "a607",
    "label": "and emit the group as an array",
    "options": [
      "d789"
    ]
  },
  "50c4": {
    "id": "50c4",
    "label": "windowTime"
  },
  "481b": {
    "id": "481b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "50c4"
    ]
  },
  "a4c2": {
    "id": "a4c2",
    "label": "buffer"
  },
  "48e9": {
    "id": "48e9",
    "label": "and emit the group as an array",
    "options": [
      "a4c2"
    ]
  },
  "f3d4": {
    "id": "f3d4",
    "label": "window"
  },
  "6a67": {
    "id": "6a67",
    "label": "until another Observable emits",
    "options": [
      "48e9",
      "3879"
    ]
  },
  "716f": {
    "id": "716f",
    "label": "bufferWhen"
  },
  "51f1": {
    "id": "51f1",
    "label": "and emit the group as an array",
    "options": [
      "716f"
    ]
  },
  "5ef7": {
    "id": "5ef7",
    "label": "windowWhen"
  },
  "b119": {
    "id": "b119",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5ef7"
    ]
  },
  "567d": {
    "id": "567d",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "51f1",
      "b119"
    ]
  },
  "c17e": {
    "id": "c17e",
    "label": "bufferToggle"
  },
  "3a78": {
    "id": "3a78",
    "label": "and emit the group as an array",
    "options": [
      "c17e"
    ]
  },
  "b4a0": {
    "id": "b4a0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "1856"
    ]
  },
  "8bdd": {
    "id": "8bdd",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "3a78",
      "b4a0"
    ]
  },
  "232d": {
    "id": "232d",
    "label": "groupBy"
  },
  "2b74": {
    "id": "2b74",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "232d"
    ]
  },
  "95ea": {
    "id": "95ea",
    "label": "I want to group the values",
    "options": [
      "6655",
      "8468",
      "64dd",
      "8060",
      "7683",
      "6a67",
      "567d",
      "8bdd",
      "2b74"
    ]
  },
  "6cd8": {
    "id": "6cd8",
    "label": "mergeMapTo"
  },
  "fcb9": {
    "id": "fcb9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6cd8"
    ]
  },
  "464b": {
    "id": "464b",
    "label": "mergeMap"
  },
  "bb90": {
    "id": "bb90",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "464b"
    ]
  },
  "9c25": {
    "id": "9c25",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "fcb9",
      "bb90"
    ]
  },
  "7fb9": {
    "id": "7fb9",
    "label": "concatMapTo"
  },
  "0cb4": {
    "id": "0cb4",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "3258"
    ]
  },
  "dc37": {
    "id": "dc37",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "5123"
    ]
  },
  "366b": {
    "id": "366b",
    "label": "switchMap"
  },
  "a218": {
    "id": "a218",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "366b"
    ]
  },
  "c7f0": {
    "id": "c7f0",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "dc37",
      "a218"
    ]
  },
  "2cd6": {
    "id": "2cd6",
    "label": "exhaustMap"
  },
  "c00f": {
    "id": "c00f",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "2cd6"
    ]
  },
  "a3ff": {
    "id": "a3ff",
    "label": "expand"
  },
  "7f38": {
    "id": "7f38",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "a3ff"
    ]
  },
  "2a4d": {
    "id": "2a4d",
    "label": "pipe"
  },
  "8b3c": {
    "id": "8b3c",
    "label": "share"
  },
  "10fd": {
    "id": "10fd",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "8b3c"
    ]
  },
  "ae1d": {
    "id": "ae1d",
    "label": "publish"
  },
  "0dce": {
    "id": "0dce",
    "label": "and start it manually or imperatively",
    "options": [
      "ae1d"
    ]
  },
  "86a8": {
    "id": "86a8",
    "label": "publishBehavior"
  },
  "746a": {
    "id": "746a",
    "label": "using a BehaviorSubject",
    "options": [
      "86a8"
    ]
  },
  "1cdd": {
    "id": "1cdd",
    "label": "publishReplay"
  },
  "f184": {
    "id": "f184",
    "label": "using a ReplaySubject",
    "options": [
      "1cdd"
    ]
  },
  "3efb": {
    "id": "3efb",
    "label": "using an AsyncSubject",
    "options": [
      "3372"
    ]
  },
  "87b1": {
    "id": "87b1",
    "label": "multicast"
  },
  "cae8": {
    "id": "cae8",
    "label": "using a specific subject implementation",
    "options": [
      "87b1"
    ]
  },
  "66cd": {
    "id": "66cd",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "1256",
      "746a",
      "f184",
      "3efb",
      "cae8"
    ]
  },
  "d303": {
    "id": "d303",
    "label": "catchError"
  },
  "3d62": {
    "id": "3d62",
    "label": "I want to start a new Observable",
    "options": [
      "d303"
    ]
  },
  "345a": {
    "id": "345a",
    "label": "retry"
  },
  "2d66": {
    "id": "2d66",
    "label": "immediately",
    "options": [
      "345a"
    ]
  },
  "b35f": {
    "id": "b35f",
    "label": "retryWhen"
  },
  "0150": {
    "id": "0150",
    "label": "when another Observable emits",
    "options": [
      "b35f"
    ]
  },
  "ff38": {
    "id": "ff38",
    "label": "I want to re-subscribe",
    "options": [
      "2d66",
      "0150"
    ]
  },
  "61a1": {
    "id": "61a1",
    "label": "when an error occurs",
    "options": [
      "3d62",
      "ff38"
    ]
  },
  "a4a0": {
    "id": "a4a0",
    "label": "repeat"
  },
  "4d8e": {
    "id": "4d8e",
    "label": "immediately",
    "options": [
      "a4a0"
    ]
  },
  "707f": {
    "id": "707f",
    "label": "repeatWhen"
  },
  "2b39": {
    "id": "2b39",
    "label": "when another Observable emits",
    "options": [
      "707f"
    ]
  },
  "badc": {
    "id": "badc",
    "label": "I want to re-subscribe",
    "options": [
      "4d8e",
      "2b39"
    ]
  },
  "fbac": {
    "id": "fbac",
    "label": "concat"
  },
  "a547": {
    "id": "a547",
    "label": "I want to start a new Observable",
    "options": [
      "fbac"
    ]
  },
  "d896": {
    "id": "d896",
    "label": "when it completes",
    "options": [
      "badc",
      "a547"
    ]
  },
  "74ba": {
    "id": "74ba",
    "label": "finalize"
  },
  "d581": {
    "id": "d581",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "74ba"
    ]
  },
  "9d6d": {
    "id": "9d6d",
    "label": "subscribeOn"
  },
  "3b53": {
    "id": "3b53",
    "label": "that routes calls to subscribe",
    "options": [
      "9d6d"
    ]
  },
  "a857": {
    "id": "a857",
    "label": "observeOn"
  },
  "7b2b": {
    "id": "7b2b",
    "label": "that routes values to observers",
    "options": [
      "a857"
    ]
  },
  "0ab1": {
    "id": "0ab1",
    "label": "I want to change the scheduler",
    "options": [
      "3b53",
      "7b2b"
    ]
  },
  "52e6": {
    "id": "52e6",
    "label": "race"
  },
  "e5bd": {
    "id": "e5bd",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "52e6"
    ]
  },
  "e7c9": {
    "id": "e7c9",
    "label": "merge"
  },
  "5f57": {
    "id": "5f57",
    "label": "I want to output the values from either of them",
    "options": [
      "e7c9"
    ]
  },
  "d6f1": {
    "id": "d6f1",
    "label": "combineLatest"
  },
  "e257": {
    "id": "e257",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "d6f1"
    ]
  },
  "9f1f": {
    "id": "9f1f",
    "label": "withLatestFrom"
  },
  "0e5f": {
    "id": "0e5f",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "9f1f"
    ]
  },
  "b8fa": {
    "id": "b8fa",
    "label": "zip"
  },
  "da67": {
    "id": "da67",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "e257",
      "0e5f",
      "7908"
    ]
  },
  "f19c": {
    "id": "f19c",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "e5bd",
      "5f57",
      "da67"
    ]
  },
  "ffdf": {
    "id": "ffdf",
    "label": "race"
  },
  "112c": {
    "id": "112c",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "ffdf"
    ]
  },
  "49bd": {
    "id": "49bd",
    "label": "forkJoin"
  },
  "da61": {
    "id": "da61",
    "label": "I want to output the values from either of them",
    "options": [
      "3296"
    ]
  },
  "30e2": {
    "id": "30e2",
    "label": "combineLatest"
  },
  "71bb": {
    "id": "71bb",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "30e2"
    ]
  },
  "7c7f": {
    "id": "7c7f",
    "label": "zip"
  },
  "18bb": {
    "id": "18bb",
    "label": "using each source value only once",
    "options": [
      "7c7f"
    ]
  },
  "ef91": {
    "id": "ef91",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "71bb",
      "18bb"
    ]
  },
  "26ea": {
    "id": "26ea",
    "label": "concat"
  },
  "b9ea": {
    "id": "b9ea",
    "label": "I want to subscribe to each in order",
    "options": [
      "26ea"
    ]
  },
  "ccbb": {
    "id": "ccbb",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "112c",
      "2438",
      "da61",
      "ef91",
      "b9ea"
    ]
  },
  "b212": {
    "id": "b212",
    "label": "Observable",
    "method": "create"
  },
  "9ae3": {
    "id": "9ae3",
    "label": "using custom logic",
    "options": [
      "b212"
    ]
  },
  "43e3": {
    "id": "43e3",
    "label": "using a state machine similar to a for loop",
    "options": [
      "4462"
    ]
  },
  "f581": {
    "id": "f581",
    "label": "throwError"
  },
  "e8dd": {
    "id": "e8dd",
    "label": "that throws an error",
    "options": [
      "f581"
    ]
  },
  "946d": {
    "id": "946d",
    "label": "EMPTY"
  },
  "cdf0": {
    "id": "cdf0",
    "label": "that just completes, without emitting values",
    "options": [
      "946d"
    ]
  },
  "ea8b": {
    "id": "ea8b",
    "label": "NEVER"
  },
  "89a2": {
    "id": "89a2",
    "label": "that never emits anything",
    "options": [
      "ea8b"
    ]
  },
  "6c0b": {
    "id": "6c0b",
    "label": "fromEvent"
  },
  "901b": {
    "id": "901b",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "6c0b"
    ]
  },
  "74b9": {
    "id": "74b9",
    "label": "fromEventPattern"
  },
  "542b": {
    "id": "542b",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "74b9"
    ]
  },
  "1f74": {
    "id": "1f74",
    "label": "from an existing source of events",
    "options": [
      "901b",
      "542b"
    ]
  },
  "e775": {
    "id": "e775",
    "label": "from"
  },
  "d4d3": {
    "id": "d4d3",
    "label": "from a Promise or an event source",
    "options": [
      "e775"
    ]
  },
  "8b24": {
    "id": "8b24",
    "label": "from"
  },
  "783b": {
    "id": "783b",
    "label": "over the values in an array",
    "options": [
      "8b24"
    ]
  },
  "ac45": {
    "id": "ac45",
    "label": "range"
  },
  "f7e7": {
    "id": "f7e7",
    "label": "over values in a numeric range",
    "options": [
      "ac45"
    ]
  },
  "52a5": {
    "id": "52a5",
    "label": "of"
  },
  "5cd6": {
    "id": "5cd6",
    "label": "over prefined values given as arguments",
    "options": [
      "52a5"
    ]
  },
  "0d2d": {
    "id": "0d2d",
    "label": "that iterates",
    "options": [
      "783b",
      "f7e7",
      "5cd6"
    ]
  },
  "717a": {
    "id": "717a",
    "label": "interval"
  },
  "d02b": {
    "id": "d02b",
    "label": "regularly",
    "options": [
      "717a"
    ]
  },
  "ab70": {
    "id": "ab70",
    "label": "timer"
  },
  "5aba": {
    "id": "5aba",
    "label": "with an optional initial delay",
    "options": [
      "ab70"
    ]
  },
  "ed2c": {
    "id": "ed2c",
    "label": "that emits values on a timer",
    "options": [
      "d02b",
      "5aba"
    ]
  },
  "541b": {
    "id": "541b",
    "label": "defer"
  },
  "dddb": {
    "id": "dddb",
    "label": "which is built on demand when subscribed",
    "options": [
      "541b"
    ]
  },
  "36cc": {
    "id": "36cc",
    "label": "I want to create a new Observable",
    "options": [
      "9ae3",
      "43e3",
      "e8dd",
      "cdf0",
      "89a2",
      "1f74",
      "d4d3",
      "0d2d",
      "ed2c",
      "dddb"
    ]
  },
  "e72d": {
    "id": "e72d",
    "label": "bindCallback"
  },
  "c0bb": {
    "id": "c0bb",
    "label": "bindNodeCallback"
  },
  "524e": {
    "id": "524e",
    "label": "supporting Node.js callback style API",
    "options": [
      "c0bb"
    ]
  },
  "e7d7": {
    "id": "e7d7",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "1508",
      "524e"
    ]
  },
  "dd87": {
    "id": "dd87",
    "label": "I have no Observables yet, and",
    "options": [
      "36cc",
      "e7d7"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "8363",
      "ccbb",
      "dd87"
    ]
  }
}