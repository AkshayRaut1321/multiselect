{
  "1118": {
    "id": "1118",
    "label": "I want to output the values from either of them",
    "options": [
      "3321"
    ]
  },
  "1168": {
    "id": "1168",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "92c2"
    ]
  },
  "1227": {
    "id": "1227",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "c111"
    ]
  },
  "1623": {
    "id": "1623",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "3a88"
    ]
  },
  "1682": {
    "id": "1682",
    "label": "that occur too frequently",
    "options": [
      "6f60",
      "078a",
      "205a"
    ]
  },
  "1977": {
    "id": "1977",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "8648",
      "9fa0"
    ]
  },
  "2099": {
    "id": "2099",
    "label": "switchMap"
  },
  "2467": {
    "id": "2467",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "496d"
    ]
  },
  "2493": {
    "id": "2493",
    "label": "of"
  },
  "2770": {
    "id": "2770",
    "label": "NEVER"
  },
  "2943": {
    "id": "2943",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "bdba"
    ]
  },
  "3015": {
    "id": "3015",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "59a9"
    ]
  },
  "3321": {
    "id": "3321",
    "label": "merge"
  },
  "3328": {
    "id": "3328",
    "label": "according to value equality",
    "options": [
      "0c02",
      "dcd8"
    ]
  },
  "3745": {
    "id": "3745",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2c8b"
    ]
  },
  "3781": {
    "id": "3781",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "2d50",
      "69ba",
      "6568"
    ]
  },
  "4186": {
    "id": "4186",
    "label": "fromEventPattern"
  },
  "5034": {
    "id": "5034",
    "label": "to be a constant value",
    "options": [
      "6b75"
    ]
  },
  "5205": {
    "id": "5205",
    "label": "expand"
  },
  "5698": {
    "id": "5698",
    "label": "window"
  },
  "5863": {
    "id": "5863",
    "label": "based on the emissions of another Observable",
    "options": [
      "46a1"
    ]
  },
  "6568": {
    "id": "6568",
    "label": "using each source value only once",
    "options": [
      "6741"
    ]
  },
  "6741": {
    "id": "6741",
    "label": "zip"
  },
  "6878": {
    "id": "6878",
    "label": "distinctUntilKeyChanged"
  },
  "7162": {
    "id": "7162",
    "label": "according to a key or object property",
    "options": [
      "8e40"
    ]
  },
  "7402": {
    "id": "7402",
    "label": "using a ReplaySubject",
    "options": [
      "87db"
    ]
  },
  "7622": {
    "id": "7622",
    "label": "and only the last value",
    "options": [
      "4a8f"
    ]
  },
  "7624": {
    "id": "7624",
    "label": "catchError"
  },
  "7834": {
    "id": "7834",
    "label": "windowWhen"
  },
  "8168": {
    "id": "8168",
    "label": "and emit the group as an array",
    "options": [
      "d1e0"
    ]
  },
  "8189": {
    "id": "8189",
    "label": "Observable",
    "method": "create"
  },
  "8260": {
    "id": "8260",
    "label": "over values in a numeric range",
    "options": [
      "5e08"
    ]
  },
  "8422": {
    "id": "8422",
    "label": "timeout"
  },
  "8648": {
    "id": "8648",
    "label": "supporting a conventional callback API",
    "options": [
      "6af0"
    ]
  },
  "8800": {
    "id": "8800",
    "label": "and emit the group as an array",
    "options": [
      "3b34"
    ]
  },
  "9414": {
    "id": "9414",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "4a29"
    ]
  },
  "9501": {
    "id": "9501",
    "label": "retryWhen"
  },
  "6b75": {
    "id": "6b75",
    "label": "mapTo"
  },
  "1eea": {
    "id": "1eea",
    "label": "map"
  },
  "0830": {
    "id": "0830",
    "label": "to be a value calculated through a formula",
    "options": [
      "1eea"
    ]
  },
  "0db6": {
    "id": "0db6",
    "label": "I want to change each emitted value",
    "options": [
      "5034",
      "0830"
    ]
  },
  "e431": {
    "id": "e431",
    "label": "pluck"
  },
  "4f46": {
    "id": "4f46",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "e431"
    ]
  },
  "59a9": {
    "id": "59a9",
    "label": "tap"
  },
  "b503": {
    "id": "b503",
    "label": "filter"
  },
  "f37c": {
    "id": "f37c",
    "label": "based on custom logic",
    "options": [
      "b503"
    ]
  },
  "96de": {
    "id": "96de",
    "label": "first"
  },
  "e7d2": {
    "id": "e7d2",
    "label": "and only the first value",
    "options": [
      "96de"
    ]
  },
  "50c2": {
    "id": "50c2",
    "label": "take"
  },
  "0f57": {
    "id": "0f57",
    "label": "based on a given amount",
    "options": [
      "50c2"
    ]
  },
  "0676": {
    "id": "0676",
    "label": "takeWhile"
  },
  "a1df": {
    "id": "a1df",
    "label": "based on custom logic",
    "options": [
      "0676"
    ]
  },
  "55fa": {
    "id": "55fa",
    "label": "if they are at the start of the Observable",
    "options": [
      "e7d2",
      "0f57",
      "a1df"
    ]
  },
  "093f": {
    "id": "093f",
    "label": "elementAt"
  },
  "7f2b": {
    "id": "7f2b",
    "label": "if they are exactly the n-th emission",
    "options": [
      "093f"
    ]
  },
  "4a8f": {
    "id": "4a8f",
    "label": "last"
  },
  "dc4d": {
    "id": "dc4d",
    "label": "takeLast"
  },
  "e43c": {
    "id": "e43c",
    "label": "based on a given amount",
    "options": [
      "dc4d"
    ]
  },
  "c2d4": {
    "id": "c2d4",
    "label": "if they are at the end of the Observable",
    "options": [
      "7622",
      "e43c"
    ]
  },
  "07ce": {
    "id": "07ce",
    "label": "takeUntil"
  },
  "064c": {
    "id": "064c",
    "label": "until another Observable emits a value",
    "options": [
      "07ce"
    ]
  },
  "fa76": {
    "id": "fa76",
    "label": "I want to allow some values to pass",
    "options": [
      "f37c",
      "55fa",
      "7f2b",
      "c2d4",
      "064c"
    ]
  },
  "49d9": {
    "id": "49d9",
    "label": "ignoreElements"
  },
  "52b0": {
    "id": "52b0",
    "label": "altogether",
    "options": [
      "49d9"
    ]
  },
  "9e1e": {
    "id": "9e1e",
    "label": "skip"
  },
  "ca9f": {
    "id": "ca9f",
    "label": "based on a given amount",
    "options": [
      "9e1e"
    ]
  },
  "81f0": {
    "id": "81f0",
    "label": "skipWhile"
  },
  "eeca": {
    "id": "eeca",
    "label": "based on custom logic",
    "options": [
      "81f0"
    ]
  },
  "e2fe": {
    "id": "e2fe",
    "label": "from the start of the Observable",
    "options": [
      "ca9f",
      "eeca"
    ]
  },
  "ba3d": {
    "id": "ba3d",
    "label": "skipLast"
  },
  "f819": {
    "id": "f819",
    "label": "from the end of the Observable",
    "options": [
      "ba3d"
    ]
  },
  "319b": {
    "id": "319b",
    "label": "skipUntil"
  },
  "f908": {
    "id": "f908",
    "label": "until another Observable emits a value",
    "options": [
      "319b"
    ]
  },
  "dc89": {
    "id": "dc89",
    "label": "distinctUntilChanged"
  },
  "0c02": {
    "id": "0c02",
    "label": "emitted just before the current value",
    "options": [
      "dc89"
    ]
  },
  "f0a7": {
    "id": "f0a7",
    "label": "distinct"
  },
  "dcd8": {
    "id": "dcd8",
    "label": "emitted some time in the past",
    "options": [
      "f0a7"
    ]
  },
  "8e40": {
    "id": "8e40",
    "label": "emitted just before the current value",
    "options": [
      "6878"
    ]
  },
  "a051": {
    "id": "a051",
    "label": "that match some previous value",
    "options": [
      "3328",
      "7162"
    ]
  },
  "ce07": {
    "id": "ce07",
    "label": "throttle"
  },
  "0f71": {
    "id": "0f71",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "ce07"
    ]
  },
  "a913": {
    "id": "a913",
    "label": "throttleTime"
  },
  "a601": {
    "id": "a601",
    "label": "where time windows are determined by a time duration",
    "options": [
      "a913"
    ]
  },
  "6f60": {
    "id": "6f60",
    "label": "by emitting the first value in each time window",
    "options": [
      "0f71",
      "a601"
    ]
  },
  "bc25": {
    "id": "bc25",
    "label": "audit"
  },
  "45e7": {
    "id": "45e7",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "bc25"
    ]
  },
  "0291": {
    "id": "0291",
    "label": "auditTime"
  },
  "1b6e": {
    "id": "1b6e",
    "label": "where time windows are determined by a time duration",
    "options": [
      "0291"
    ]
  },
  "078a": {
    "id": "078a",
    "label": "by emitting the last value in each time window",
    "options": [
      "45e7",
      "1b6e"
    ]
  },
  "a860": {
    "id": "a860",
    "label": "debounce"
  },
  "827e": {
    "id": "827e",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "a860"
    ]
  },
  "d968": {
    "id": "d968",
    "label": "debounceTime"
  },
  "929b": {
    "id": "929b",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "d968"
    ]
  },
  "205a": {
    "id": "205a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "827e",
      "929b"
    ]
  },
  "694a": {
    "id": "694a",
    "label": "I want to ignore values",
    "options": [
      "52b0",
      "e2fe",
      "f819",
      "f908",
      "a051",
      "1682"
    ]
  },
  "e6dc": {
    "id": "e6dc",
    "label": "reduce"
  },
  "395c": {
    "id": "395c",
    "label": "and only output the final computed value",
    "options": [
      "e6dc"
    ]
  },
  "558b": {
    "id": "558b",
    "label": "scan"
  },
  "735c": {
    "id": "735c",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "558b"
    ]
  },
  "ba12": {
    "id": "ba12",
    "label": "mergeScan"
  },
  "c1f3": {
    "id": "c1f3",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "ba12"
    ]
  },
  "99bc": {
    "id": "99bc",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "395c",
      "735c",
      "c1f3"
    ]
  },
  "caf7": {
    "id": "caf7",
    "label": "materialize"
  },
  "b7f5": {
    "id": "b7f5",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "caf7"
    ]
  },
  "c111": {
    "id": "c111",
    "label": "timeInterval"
  },
  "88ef": {
    "id": "88ef",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "b7f5",
      "1227"
    ]
  },
  "3c1a": {
    "id": "3c1a",
    "label": "I want to throw an error",
    "options": [
      "8422"
    ]
  },
  "931f": {
    "id": "931f",
    "label": "timeoutWith"
  },
  "aa4e": {
    "id": "aa4e",
    "label": "I want to switch to another Observable",
    "options": [
      "931f"
    ]
  },
  "b63f": {
    "id": "b63f",
    "label": "after a period of inactivity",
    "options": [
      "3c1a",
      "aa4e"
    ]
  },
  "8de4": {
    "id": "8de4",
    "label": "single"
  },
  "0b0a": {
    "id": "0b0a",
    "label": "I want to ensure there is only one value",
    "options": [
      "8de4"
    ]
  },
  "314d": {
    "id": "314d",
    "label": "count"
  },
  "109e": {
    "id": "109e",
    "label": "I want to know how many values it emits",
    "options": [
      "314d"
    ]
  },
  "dbdf": {
    "id": "dbdf",
    "label": "startWith"
  },
  "19b8": {
    "id": "19b8",
    "label": "I want to prepend one value",
    "options": [
      "dbdf"
    ]
  },
  "f74b": {
    "id": "f74b",
    "label": "delay"
  },
  "1f97": {
    "id": "1f97",
    "label": "based on a given amount of time",
    "options": [
      "f74b"
    ]
  },
  "46a1": {
    "id": "46a1",
    "label": "delayWhen"
  },
  "de87": {
    "id": "de87",
    "label": "I want to delay the emissions",
    "options": [
      "1f97",
      "5863"
    ]
  },
  "1d10": {
    "id": "1d10",
    "label": "toArray"
  },
  "30d8": {
    "id": "30d8",
    "label": "and convert to an array",
    "options": [
      "1d10"
    ]
  },
  "0bb8": {
    "id": "0bb8",
    "label": "Observable",
    "method": "toPromise"
  },
  "c72b": {
    "id": "c72b",
    "label": "and convert to a Promise",
    "options": [
      "0bb8"
    ]
  },
  "b5ab": {
    "id": "b5ab",
    "label": "until the Observable completes",
    "options": [
      "30d8",
      "c72b"
    ]
  },
  "4d4d": {
    "id": "4d4d",
    "label": "pairwise"
  },
  "0851": {
    "id": "0851",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "4d4d"
    ]
  },
  "92c2": {
    "id": "92c2",
    "label": "partition"
  },
  "3b34": {
    "id": "3b34",
    "label": "bufferCount"
  },
  "d689": {
    "id": "d689",
    "label": "windowCount"
  },
  "dbb5": {
    "id": "dbb5",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d689"
    ]
  },
  "d511": {
    "id": "d511",
    "label": "in batches of a particular size",
    "options": [
      "8800",
      "dbb5"
    ]
  },
  "31d8": {
    "id": "31d8",
    "label": "bufferTime"
  },
  "f478": {
    "id": "f478",
    "label": "and emit the group as an array",
    "options": [
      "31d8"
    ]
  },
  "acde": {
    "id": "acde",
    "label": "windowTime"
  },
  "42f2": {
    "id": "42f2",
    "label": "and emit the group as a nested Observable",
    "options": [
      "acde"
    ]
  },
  "862d": {
    "id": "862d",
    "label": "based on time",
    "options": [
      "f478",
      "42f2"
    ]
  },
  "92df": {
    "id": "92df",
    "label": "buffer"
  },
  "556e": {
    "id": "556e",
    "label": "and emit the group as an array",
    "options": [
      "92df"
    ]
  },
  "58d7": {
    "id": "58d7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5698"
    ]
  },
  "d93d": {
    "id": "d93d",
    "label": "until another Observable emits",
    "options": [
      "556e",
      "58d7"
    ]
  },
  "a88e": {
    "id": "a88e",
    "label": "bufferWhen"
  },
  "2c05": {
    "id": "2c05",
    "label": "and emit the group as an array",
    "options": [
      "a88e"
    ]
  },
  "bc37": {
    "id": "bc37",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7834"
    ]
  },
  "9e58": {
    "id": "9e58",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "2c05",
      "bc37"
    ]
  },
  "d1e0": {
    "id": "d1e0",
    "label": "bufferToggle"
  },
  "e479": {
    "id": "e479",
    "label": "windowToggle"
  },
  "609a": {
    "id": "609a",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e479"
    ]
  },
  "e561": {
    "id": "e561",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "8168",
      "609a"
    ]
  },
  "fa97": {
    "id": "fa97",
    "label": "groupBy"
  },
  "79cc": {
    "id": "79cc",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "fa97"
    ]
  },
  "879f": {
    "id": "879f",
    "label": "I want to group the values",
    "options": [
      "b5ab",
      "0851",
      "1168",
      "d511",
      "862d",
      "d93d",
      "9e58",
      "e561",
      "79cc"
    ]
  },
  "b536": {
    "id": "b536",
    "label": "mergeMapTo"
  },
  "6e3a": {
    "id": "6e3a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b536"
    ]
  },
  "2c8b": {
    "id": "2c8b",
    "label": "mergeMap"
  },
  "0a19": {
    "id": "0a19",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "6e3a",
      "3745"
    ]
  },
  "4a29": {
    "id": "4a29",
    "label": "concatMapTo"
  },
  "dcc2": {
    "id": "dcc2",
    "label": "concatMap"
  },
  "e5eb": {
    "id": "e5eb",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "dcc2"
    ]
  },
  "d6d1": {
    "id": "d6d1",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "9414",
      "e5eb"
    ]
  },
  "52f0": {
    "id": "52f0",
    "label": "switchMapTo"
  },
  "75e4": {
    "id": "75e4",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "52f0"
    ]
  },
  "6a70": {
    "id": "6a70",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2099"
    ]
  },
  "036c": {
    "id": "036c",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "75e4",
      "6a70"
    ]
  },
  "1beb": {
    "id": "1beb",
    "label": "exhaustMap"
  },
  "70cc": {
    "id": "70cc",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "1beb"
    ]
  },
  "aaff": {
    "id": "aaff",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "5205"
    ]
  },
  "02e6": {
    "id": "02e6",
    "label": "I want to start a new Observable for each value",
    "options": [
      "0a19",
      "d6d1",
      "036c",
      "70cc",
      "aaff"
    ]
  },
  "d42b": {
    "id": "d42b",
    "label": "pipe"
  },
  "05aa": {
    "id": "05aa",
    "label": "I want to perform custom operations",
    "options": [
      "d42b"
    ]
  },
  "67c1": {
    "id": "67c1",
    "label": "share"
  },
  "a9b5": {
    "id": "a9b5",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "67c1"
    ]
  },
  "e5cf": {
    "id": "e5cf",
    "label": "publish"
  },
  "85fc": {
    "id": "85fc",
    "label": "and start it manually or imperatively",
    "options": [
      "e5cf"
    ]
  },
  "788f": {
    "id": "788f",
    "label": "using a conventional Subject",
    "options": [
      "a9b5",
      "85fc"
    ]
  },
  "8ea9": {
    "id": "8ea9",
    "label": "publishBehavior"
  },
  "e779": {
    "id": "e779",
    "label": "using a BehaviorSubject",
    "options": [
      "8ea9"
    ]
  },
  "87db": {
    "id": "87db",
    "label": "publishReplay"
  },
  "8f80": {
    "id": "8f80",
    "label": "publishLast"
  },
  "70a2": {
    "id": "70a2",
    "label": "using an AsyncSubject",
    "options": [
      "8f80"
    ]
  },
  "482a": {
    "id": "482a",
    "label": "multicast"
  },
  "7a4d": {
    "id": "7a4d",
    "label": "using a specific subject implementation",
    "options": [
      "482a"
    ]
  },
  "5e32": {
    "id": "5e32",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "788f",
      "e779",
      "7402",
      "70a2",
      "7a4d"
    ]
  },
  "88c1": {
    "id": "88c1",
    "label": "I want to start a new Observable",
    "options": [
      "7624"
    ]
  },
  "9ad0": {
    "id": "9ad0",
    "label": "retry"
  },
  "31b1": {
    "id": "31b1",
    "label": "immediately",
    "options": [
      "9ad0"
    ]
  },
  "ca3a": {
    "id": "ca3a",
    "label": "when another Observable emits",
    "options": [
      "9501"
    ]
  },
  "42ed": {
    "id": "42ed",
    "label": "I want to re-subscribe",
    "options": [
      "31b1",
      "ca3a"
    ]
  },
  "13a0": {
    "id": "13a0",
    "label": "when an error occurs",
    "options": [
      "88c1",
      "42ed"
    ]
  },
  "16cc": {
    "id": "16cc",
    "label": "repeat"
  },
  "83d7": {
    "id": "83d7",
    "label": "immediately",
    "options": [
      "16cc"
    ]
  },
  "12b5": {
    "id": "12b5",
    "label": "repeatWhen"
  },
  "64c5": {
    "id": "64c5",
    "label": "when another Observable emits",
    "options": [
      "12b5"
    ]
  },
  "78f2": {
    "id": "78f2",
    "label": "I want to re-subscribe",
    "options": [
      "83d7",
      "64c5"
    ]
  },
  "86fb": {
    "id": "86fb",
    "label": "concat"
  },
  "e981": {
    "id": "e981",
    "label": "I want to start a new Observable",
    "options": [
      "86fb"
    ]
  },
  "ee58": {
    "id": "ee58",
    "label": "when it completes",
    "options": [
      "78f2",
      "e981"
    ]
  },
  "248d": {
    "id": "248d",
    "label": "finalize"
  },
  "502b": {
    "id": "502b",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "248d"
    ]
  },
  "93ae": {
    "id": "93ae",
    "label": "subscribeOn"
  },
  "ad69": {
    "id": "ad69",
    "label": "that routes calls to subscribe",
    "options": [
      "93ae"
    ]
  },
  "82a5": {
    "id": "82a5",
    "label": "observeOn"
  },
  "59dd": {
    "id": "59dd",
    "label": "that routes values to observers",
    "options": [
      "82a5"
    ]
  },
  "36c9": {
    "id": "36c9",
    "label": "I want to change the scheduler",
    "options": [
      "ad69",
      "59dd"
    ]
  },
  "496d": {
    "id": "496d",
    "label": "race"
  },
  "6a5f": {
    "id": "6a5f",
    "label": "combineLatest"
  },
  "2d50": {
    "id": "2d50",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "6a5f"
    ]
  },
  "adbe": {
    "id": "adbe",
    "label": "withLatestFrom"
  },
  "69ba": {
    "id": "69ba",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "adbe"
    ]
  },
  "8c80": {
    "id": "8c80",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "2467",
      "1118",
      "3781"
    ]
  },
  "18b1": {
    "id": "18b1",
    "label": "I have one existing Observable, and",
    "options": [
      "0db6",
      "4f46",
      "3015",
      "fa76",
      "694a",
      "99bc",
      "88ef",
      "b63f",
      "0b0a",
      "109e",
      "19b8",
      "de87",
      "879f",
      "02e6",
      "05aa",
      "5e32",
      "13a0",
      "ee58",
      "502b",
      "36c9",
      "8c80"
    ]
  },
  "bdba": {
    "id": "bdba",
    "label": "race"
  },
  "d198": {
    "id": "d198",
    "label": "forkJoin"
  },
  "534e": {
    "id": "534e",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "d198"
    ]
  },
  "7d20": {
    "id": "7d20",
    "label": "merge"
  },
  "bcae": {
    "id": "bcae",
    "label": "I want to output the values from either of them",
    "options": [
      "7d20"
    ]
  },
  "3a88": {
    "id": "3a88",
    "label": "combineLatest"
  },
  "e02e": {
    "id": "e02e",
    "label": "zip"
  },
  "2f69": {
    "id": "2f69",
    "label": "using each source value only once",
    "options": [
      "e02e"
    ]
  },
  "4ac1": {
    "id": "4ac1",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1623",
      "2f69"
    ]
  },
  "dc7b": {
    "id": "dc7b",
    "label": "concat"
  },
  "48ab": {
    "id": "48ab",
    "label": "I want to subscribe to each in order",
    "options": [
      "dc7b"
    ]
  },
  "e30e": {
    "id": "e30e",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "2943",
      "534e",
      "bcae",
      "4ac1",
      "48ab"
    ]
  },
  "191f": {
    "id": "191f",
    "label": "using custom logic",
    "options": [
      "8189"
    ]
  },
  "26d3": {
    "id": "26d3",
    "label": "generate"
  },
  "fa5a": {
    "id": "fa5a",
    "label": "using a state machine similar to a for loop",
    "options": [
      "26d3"
    ]
  },
  "afec": {
    "id": "afec",
    "label": "throwError"
  },
  "a725": {
    "id": "a725",
    "label": "that throws an error",
    "options": [
      "afec"
    ]
  },
  "ed81": {
    "id": "ed81",
    "label": "EMPTY"
  },
  "4d3b": {
    "id": "4d3b",
    "label": "that just completes, without emitting values",
    "options": [
      "ed81"
    ]
  },
  "080e": {
    "id": "080e",
    "label": "that never emits anything",
    "options": [
      "2770"
    ]
  },
  "003b": {
    "id": "003b",
    "label": "fromEvent"
  },
  "bb58": {
    "id": "bb58",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "003b"
    ]
  },
  "b951": {
    "id": "b951",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "4186"
    ]
  },
  "edee": {
    "id": "edee",
    "label": "from an existing source of events",
    "options": [
      "bb58",
      "b951"
    ]
  },
  "443a": {
    "id": "443a",
    "label": "from"
  },
  "708f": {
    "id": "708f",
    "label": "from a Promise or an event source",
    "options": [
      "443a"
    ]
  },
  "f91c": {
    "id": "f91c",
    "label": "from"
  },
  "f481": {
    "id": "f481",
    "label": "over the values in an array",
    "options": [
      "f91c"
    ]
  },
  "5e08": {
    "id": "5e08",
    "label": "range"
  },
  "14f6": {
    "id": "14f6",
    "label": "over prefined values given as arguments",
    "options": [
      "2493"
    ]
  },
  "ce61": {
    "id": "ce61",
    "label": "that iterates",
    "options": [
      "f481",
      "8260",
      "14f6"
    ]
  },
  "8af9": {
    "id": "8af9",
    "label": "interval"
  },
  "da82": {
    "id": "da82",
    "label": "regularly",
    "options": [
      "8af9"
    ]
  },
  "ac8b": {
    "id": "ac8b",
    "label": "timer"
  },
  "16b8": {
    "id": "16b8",
    "label": "with an optional initial delay",
    "options": [
      "ac8b"
    ]
  },
  "3fa8": {
    "id": "3fa8",
    "label": "that emits values on a timer",
    "options": [
      "da82",
      "16b8"
    ]
  },
  "66e2": {
    "id": "66e2",
    "label": "defer"
  },
  "c38c": {
    "id": "c38c",
    "label": "which is built on demand when subscribed",
    "options": [
      "66e2"
    ]
  },
  "d5e4": {
    "id": "d5e4",
    "label": "I want to create a new Observable",
    "options": [
      "191f",
      "fa5a",
      "a725",
      "4d3b",
      "080e",
      "edee",
      "708f",
      "ce61",
      "3fa8",
      "c38c"
    ]
  },
  "6af0": {
    "id": "6af0",
    "label": "bindCallback"
  },
  "51e7": {
    "id": "51e7",
    "label": "bindNodeCallback"
  },
  "9fa0": {
    "id": "9fa0",
    "label": "supporting Node.js callback style API",
    "options": [
      "51e7"
    ]
  },
  "3fc0": {
    "id": "3fc0",
    "label": "I have no Observables yet, and",
    "options": [
      "d5e4",
      "1977"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "18b1",
      "e30e",
      "3fc0"
    ]
  }
}