{
  "1415": {
    "id": "1415",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "f3e3"
    ]
  },
  "1686": {
    "id": "1686",
    "label": "and convert to an array",
    "options": [
      "89fc"
    ]
  },
  "1757": {
    "id": "1757",
    "label": "reduce"
  },
  "1878": {
    "id": "1878",
    "label": "over the values in an array",
    "options": [
      "b6b2"
    ]
  },
  "2047": {
    "id": "2047",
    "label": "delay"
  },
  "2261": {
    "id": "2261",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "721c"
    ]
  },
  "2537": {
    "id": "2537",
    "label": "and only the first value",
    "options": [
      "ae87"
    ]
  },
  "2730": {
    "id": "2730",
    "label": "that match some previous value",
    "options": [
      "1cf7",
      "4332"
    ]
  },
  "2784": {
    "id": "2784",
    "label": "I want to group the values",
    "options": [
      "36af",
      "871f",
      "e26d",
      "8b3e",
      "e940",
      "e042",
      "38fb",
      "5a2e",
      "6cf4"
    ]
  },
  "2929": {
    "id": "2929",
    "label": "that routes calls to subscribe",
    "options": [
      "6fb5"
    ]
  },
  "2973": {
    "id": "2973",
    "label": "using a specific subject implementation",
    "options": [
      "d27e"
    ]
  },
  "3067": {
    "id": "3067",
    "label": "I want to output the values from either of them",
    "options": [
      "dd13"
    ]
  },
  "3167": {
    "id": "3167",
    "label": "timeout"
  },
  "3423": {
    "id": "3423",
    "label": "from the start of the Observable",
    "options": [
      "63e8",
      "0824"
    ]
  },
  "3435": {
    "id": "3435",
    "label": "takeLast"
  },
  "3878": {
    "id": "3878",
    "label": "if they are at the start of the Observable",
    "options": [
      "2537",
      "f2c4",
      "6d28"
    ]
  },
  "4332": {
    "id": "4332",
    "label": "according to a key or object property",
    "options": [
      "dc66"
    ]
  },
  "4835": {
    "id": "4835",
    "label": "concat"
  },
  "5836": {
    "id": "5836",
    "label": "generate"
  },
  "5998": {
    "id": "5998",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "8a24"
    ]
  },
  "6427": {
    "id": "6427",
    "label": "I want to re-subscribe",
    "options": [
      "4ef2",
      "10d6"
    ]
  },
  "6817": {
    "id": "6817",
    "label": "that iterates",
    "options": [
      "1878",
      "a38a",
      "c848"
    ]
  },
  "7062": {
    "id": "7062",
    "label": "immediately",
    "options": [
      "911d"
    ]
  },
  "7144": {
    "id": "7144",
    "label": "I want to ensure there is only one value",
    "options": [
      "07da"
    ]
  },
  "7646": {
    "id": "7646",
    "label": "mapTo"
  },
  "7663": {
    "id": "7663",
    "label": "windowTime"
  },
  "7936": {
    "id": "7936",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "4cfc"
    ]
  },
  "8253": {
    "id": "8253",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "d7db"
    ]
  },
  "8338": {
    "id": "8338",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "15b0"
    ]
  },
  "8405": {
    "id": "8405",
    "label": "exhaustMap"
  },
  "9011": {
    "id": "9011",
    "label": "concatMapTo"
  },
  "9086": {
    "id": "9086",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "02a9"
    ]
  },
  "9535": {
    "id": "9535",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "a8c7",
      "9086"
    ]
  },
  "22ea": {
    "id": "22ea",
    "label": "to be a constant value",
    "options": [
      "7646"
    ]
  },
  "345b": {
    "id": "345b",
    "label": "map"
  },
  "ed82": {
    "id": "ed82",
    "label": "to be a value calculated through a formula",
    "options": [
      "345b"
    ]
  },
  "27f0": {
    "id": "27f0",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "b70f"
    ]
  },
  "4cfc": {
    "id": "4cfc",
    "label": "pluck"
  },
  "8a24": {
    "id": "8a24",
    "label": "tap"
  },
  "f125": {
    "id": "f125",
    "label": "filter"
  },
  "24aa": {
    "id": "24aa",
    "label": "based on custom logic",
    "options": [
      "f125"
    ]
  },
  "ae87": {
    "id": "ae87",
    "label": "first"
  },
  "e48c": {
    "id": "e48c",
    "label": "take"
  },
  "f2c4": {
    "id": "f2c4",
    "label": "based on a given amount",
    "options": [
      "e48c"
    ]
  },
  "cdd3": {
    "id": "cdd3",
    "label": "takeWhile"
  },
  "6d28": {
    "id": "6d28",
    "label": "based on custom logic",
    "options": [
      "cdd3"
    ]
  },
  "fa92": {
    "id": "fa92",
    "label": "elementAt"
  },
  "dd8e": {
    "id": "dd8e",
    "label": "if they are exactly the n-th emission",
    "options": [
      "fa92"
    ]
  },
  "20df": {
    "id": "20df",
    "label": "last"
  },
  "2bd0": {
    "id": "2bd0",
    "label": "and only the last value",
    "options": [
      "20df"
    ]
  },
  "7a56": {
    "id": "7a56",
    "label": "based on a given amount",
    "options": [
      "3435"
    ]
  },
  "e60f": {
    "id": "e60f",
    "label": "if they are at the end of the Observable",
    "options": [
      "2bd0",
      "7a56"
    ]
  },
  "65d5": {
    "id": "65d5",
    "label": "takeUntil"
  },
  "40cc": {
    "id": "40cc",
    "label": "until another Observable emits a value",
    "options": [
      "65d5"
    ]
  },
  "d8d2": {
    "id": "d8d2",
    "label": "I want to allow some values to pass",
    "options": [
      "24aa",
      "3878",
      "dd8e",
      "e60f",
      "40cc"
    ]
  },
  "acfa": {
    "id": "acfa",
    "label": "ignoreElements"
  },
  "7d36": {
    "id": "7d36",
    "label": "altogether",
    "options": [
      "acfa"
    ]
  },
  "8b08": {
    "id": "8b08",
    "label": "skip"
  },
  "63e8": {
    "id": "63e8",
    "label": "based on a given amount",
    "options": [
      "8b08"
    ]
  },
  "c19a": {
    "id": "c19a",
    "label": "skipWhile"
  },
  "0824": {
    "id": "0824",
    "label": "based on custom logic",
    "options": [
      "c19a"
    ]
  },
  "8cc4": {
    "id": "8cc4",
    "label": "skipLast"
  },
  "66a8": {
    "id": "66a8",
    "label": "from the end of the Observable",
    "options": [
      "8cc4"
    ]
  },
  "404e": {
    "id": "404e",
    "label": "skipUntil"
  },
  "69a9": {
    "id": "69a9",
    "label": "until another Observable emits a value",
    "options": [
      "404e"
    ]
  },
  "e81d": {
    "id": "e81d",
    "label": "distinctUntilChanged"
  },
  "9bf0": {
    "id": "9bf0",
    "label": "emitted just before the current value",
    "options": [
      "e81d"
    ]
  },
  "3b00": {
    "id": "3b00",
    "label": "distinct"
  },
  "9df0": {
    "id": "9df0",
    "label": "emitted some time in the past",
    "options": [
      "3b00"
    ]
  },
  "1cf7": {
    "id": "1cf7",
    "label": "according to value equality",
    "options": [
      "9bf0",
      "9df0"
    ]
  },
  "4b59": {
    "id": "4b59",
    "label": "distinctUntilKeyChanged"
  },
  "dc66": {
    "id": "dc66",
    "label": "emitted just before the current value",
    "options": [
      "4b59"
    ]
  },
  "ae3e": {
    "id": "ae3e",
    "label": "throttle"
  },
  "e6b5": {
    "id": "e6b5",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "ae3e"
    ]
  },
  "3fc1": {
    "id": "3fc1",
    "label": "throttleTime"
  },
  "ab29": {
    "id": "ab29",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3fc1"
    ]
  },
  "943a": {
    "id": "943a",
    "label": "by emitting the first value in each time window",
    "options": [
      "e6b5",
      "ab29"
    ]
  },
  "eabf": {
    "id": "eabf",
    "label": "audit"
  },
  "a46b": {
    "id": "a46b",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "eabf"
    ]
  },
  "03d1": {
    "id": "03d1",
    "label": "auditTime"
  },
  "a99b": {
    "id": "a99b",
    "label": "where time windows are determined by a time duration",
    "options": [
      "03d1"
    ]
  },
  "30b2": {
    "id": "30b2",
    "label": "by emitting the last value in each time window",
    "options": [
      "a46b",
      "a99b"
    ]
  },
  "b70f": {
    "id": "b70f",
    "label": "debounce"
  },
  "2c34": {
    "id": "2c34",
    "label": "debounceTime"
  },
  "8c0c": {
    "id": "8c0c",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "2c34"
    ]
  },
  "0d0a": {
    "id": "0d0a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "27f0",
      "8c0c"
    ]
  },
  "0e0a": {
    "id": "0e0a",
    "label": "that occur too frequently",
    "options": [
      "943a",
      "30b2",
      "0d0a"
    ]
  },
  "e264": {
    "id": "e264",
    "label": "I want to ignore values",
    "options": [
      "7d36",
      "3423",
      "66a8",
      "69a9",
      "2730",
      "0e0a"
    ]
  },
  "e864": {
    "id": "e864",
    "label": "and only output the final computed value",
    "options": [
      "1757"
    ]
  },
  "d7db": {
    "id": "d7db",
    "label": "scan"
  },
  "8bd8": {
    "id": "8bd8",
    "label": "mergeScan"
  },
  "f619": {
    "id": "f619",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "8bd8"
    ]
  },
  "dfb4": {
    "id": "dfb4",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "e864",
      "8253",
      "f619"
    ]
  },
  "15b0": {
    "id": "15b0",
    "label": "materialize"
  },
  "6abb": {
    "id": "6abb",
    "label": "timeInterval"
  },
  "24af": {
    "id": "24af",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "6abb"
    ]
  },
  "db71": {
    "id": "db71",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "8338",
      "24af"
    ]
  },
  "52d9": {
    "id": "52d9",
    "label": "I want to throw an error",
    "options": [
      "3167"
    ]
  },
  "acfc": {
    "id": "acfc",
    "label": "timeoutWith"
  },
  "53d6": {
    "id": "53d6",
    "label": "I want to switch to another Observable",
    "options": [
      "acfc"
    ]
  },
  "d342": {
    "id": "d342",
    "label": "after a period of inactivity",
    "options": [
      "52d9",
      "53d6"
    ]
  },
  "07da": {
    "id": "07da",
    "label": "single"
  },
  "46c4": {
    "id": "46c4",
    "label": "count"
  },
  "ecb1": {
    "id": "ecb1",
    "label": "I want to know how many values it emits",
    "options": [
      "46c4"
    ]
  },
  "c1d0": {
    "id": "c1d0",
    "label": "startWith"
  },
  "e4c3": {
    "id": "e4c3",
    "label": "I want to prepend one value",
    "options": [
      "c1d0"
    ]
  },
  "0be8": {
    "id": "0be8",
    "label": "based on a given amount of time",
    "options": [
      "2047"
    ]
  },
  "61e5": {
    "id": "61e5",
    "label": "delayWhen"
  },
  "4ef9": {
    "id": "4ef9",
    "label": "based on the emissions of another Observable",
    "options": [
      "61e5"
    ]
  },
  "ff0e": {
    "id": "ff0e",
    "label": "I want to delay the emissions",
    "options": [
      "0be8",
      "4ef9"
    ]
  },
  "89fc": {
    "id": "89fc",
    "label": "toArray"
  },
  "186c": {
    "id": "186c",
    "label": "Observable",
    "method": "toPromise"
  },
  "bae7": {
    "id": "bae7",
    "label": "and convert to a Promise",
    "options": [
      "186c"
    ]
  },
  "36af": {
    "id": "36af",
    "label": "until the Observable completes",
    "options": [
      "1686",
      "bae7"
    ]
  },
  "ef68": {
    "id": "ef68",
    "label": "pairwise"
  },
  "871f": {
    "id": "871f",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "ef68"
    ]
  },
  "a808": {
    "id": "a808",
    "label": "partition"
  },
  "e26d": {
    "id": "e26d",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "a808"
    ]
  },
  "a647": {
    "id": "a647",
    "label": "bufferCount"
  },
  "f762": {
    "id": "f762",
    "label": "and emit the group as an array",
    "options": [
      "a647"
    ]
  },
  "906b": {
    "id": "906b",
    "label": "windowCount"
  },
  "7d47": {
    "id": "7d47",
    "label": "and emit the group as a nested Observable",
    "options": [
      "906b"
    ]
  },
  "8b3e": {
    "id": "8b3e",
    "label": "in batches of a particular size",
    "options": [
      "f762",
      "7d47"
    ]
  },
  "7b06": {
    "id": "7b06",
    "label": "bufferTime"
  },
  "358d": {
    "id": "358d",
    "label": "and emit the group as an array",
    "options": [
      "7b06"
    ]
  },
  "5e71": {
    "id": "5e71",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7663"
    ]
  },
  "e940": {
    "id": "e940",
    "label": "based on time",
    "options": [
      "358d",
      "5e71"
    ]
  },
  "0976": {
    "id": "0976",
    "label": "buffer"
  },
  "bcdd": {
    "id": "bcdd",
    "label": "and emit the group as an array",
    "options": [
      "0976"
    ]
  },
  "e2eb": {
    "id": "e2eb",
    "label": "window"
  },
  "a454": {
    "id": "a454",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e2eb"
    ]
  },
  "e042": {
    "id": "e042",
    "label": "until another Observable emits",
    "options": [
      "bcdd",
      "a454"
    ]
  },
  "dbbf": {
    "id": "dbbf",
    "label": "bufferWhen"
  },
  "9e73": {
    "id": "9e73",
    "label": "and emit the group as an array",
    "options": [
      "dbbf"
    ]
  },
  "8fe4": {
    "id": "8fe4",
    "label": "windowWhen"
  },
  "f528": {
    "id": "f528",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8fe4"
    ]
  },
  "38fb": {
    "id": "38fb",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "9e73",
      "f528"
    ]
  },
  "526d": {
    "id": "526d",
    "label": "bufferToggle"
  },
  "bac5": {
    "id": "bac5",
    "label": "and emit the group as an array",
    "options": [
      "526d"
    ]
  },
  "6bef": {
    "id": "6bef",
    "label": "windowToggle"
  },
  "a367": {
    "id": "a367",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6bef"
    ]
  },
  "5a2e": {
    "id": "5a2e",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "bac5",
      "a367"
    ]
  },
  "6bec": {
    "id": "6bec",
    "label": "groupBy"
  },
  "6cf4": {
    "id": "6cf4",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6bec"
    ]
  },
  "fb81": {
    "id": "fb81",
    "label": "mergeMapTo"
  },
  "ff50": {
    "id": "ff50",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "fb81"
    ]
  },
  "c08f": {
    "id": "c08f",
    "label": "mergeMap"
  },
  "f4ec": {
    "id": "f4ec",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c08f"
    ]
  },
  "ece4": {
    "id": "ece4",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "ff50",
      "f4ec"
    ]
  },
  "920b": {
    "id": "920b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "9011"
    ]
  },
  "0e4e": {
    "id": "0e4e",
    "label": "concatMap"
  },
  "dee5": {
    "id": "dee5",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0e4e"
    ]
  },
  "68bd": {
    "id": "68bd",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "920b",
      "dee5"
    ]
  },
  "57c9": {
    "id": "57c9",
    "label": "switchMapTo"
  },
  "a8c7": {
    "id": "a8c7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "57c9"
    ]
  },
  "02a9": {
    "id": "02a9",
    "label": "switchMap"
  },
  "6bfb": {
    "id": "6bfb",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "8405"
    ]
  },
  "149f": {
    "id": "149f",
    "label": "expand"
  },
  "eeeb": {
    "id": "eeeb",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "149f"
    ]
  },
  "6cd2": {
    "id": "6cd2",
    "label": "I want to start a new Observable for each value",
    "options": [
      "ece4",
      "68bd",
      "9535",
      "6bfb",
      "eeeb"
    ]
  },
  "c324": {
    "id": "c324",
    "label": "pipe"
  },
  "9e9c": {
    "id": "9e9c",
    "label": "I want to perform custom operations",
    "options": [
      "c324"
    ]
  },
  "f3e3": {
    "id": "f3e3",
    "label": "share"
  },
  "c7d7": {
    "id": "c7d7",
    "label": "publish"
  },
  "0b34": {
    "id": "0b34",
    "label": "and start it manually or imperatively",
    "options": [
      "c7d7"
    ]
  },
  "2f16": {
    "id": "2f16",
    "label": "using a conventional Subject",
    "options": [
      "1415",
      "0b34"
    ]
  },
  "4bc2": {
    "id": "4bc2",
    "label": "publishBehavior"
  },
  "b9fe": {
    "id": "b9fe",
    "label": "using a BehaviorSubject",
    "options": [
      "4bc2"
    ]
  },
  "7f71": {
    "id": "7f71",
    "label": "publishReplay"
  },
  "e127": {
    "id": "e127",
    "label": "using a ReplaySubject",
    "options": [
      "7f71"
    ]
  },
  "fc15": {
    "id": "fc15",
    "label": "publishLast"
  },
  "dd86": {
    "id": "dd86",
    "label": "using an AsyncSubject",
    "options": [
      "fc15"
    ]
  },
  "d27e": {
    "id": "d27e",
    "label": "multicast"
  },
  "2f75": {
    "id": "2f75",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "2f16",
      "b9fe",
      "e127",
      "dd86",
      "2973"
    ]
  },
  "50a8": {
    "id": "50a8",
    "label": "catchError"
  },
  "e5ed": {
    "id": "e5ed",
    "label": "I want to start a new Observable",
    "options": [
      "50a8"
    ]
  },
  "911d": {
    "id": "911d",
    "label": "retry"
  },
  "e9ad": {
    "id": "e9ad",
    "label": "retryWhen"
  },
  "312e": {
    "id": "312e",
    "label": "when another Observable emits",
    "options": [
      "e9ad"
    ]
  },
  "a937": {
    "id": "a937",
    "label": "I want to re-subscribe",
    "options": [
      "7062",
      "312e"
    ]
  },
  "dc64": {
    "id": "dc64",
    "label": "when an error occurs",
    "options": [
      "e5ed",
      "a937"
    ]
  },
  "6b68": {
    "id": "6b68",
    "label": "repeat"
  },
  "4ef2": {
    "id": "4ef2",
    "label": "immediately",
    "options": [
      "6b68"
    ]
  },
  "f3f5": {
    "id": "f3f5",
    "label": "repeatWhen"
  },
  "10d6": {
    "id": "10d6",
    "label": "when another Observable emits",
    "options": [
      "f3f5"
    ]
  },
  "9ffb": {
    "id": "9ffb",
    "label": "I want to start a new Observable",
    "options": [
      "4835"
    ]
  },
  "a1d0": {
    "id": "a1d0",
    "label": "when it completes",
    "options": [
      "6427",
      "9ffb"
    ]
  },
  "b00a": {
    "id": "b00a",
    "label": "finalize"
  },
  "cd86": {
    "id": "cd86",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "b00a"
    ]
  },
  "6fb5": {
    "id": "6fb5",
    "label": "subscribeOn"
  },
  "84ee": {
    "id": "84ee",
    "label": "observeOn"
  },
  "bcac": {
    "id": "bcac",
    "label": "that routes values to observers",
    "options": [
      "84ee"
    ]
  },
  "a8d8": {
    "id": "a8d8",
    "label": "I want to change the scheduler",
    "options": [
      "2929",
      "bcac"
    ]
  },
  "72e8": {
    "id": "72e8",
    "label": "race"
  },
  "b314": {
    "id": "b314",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "72e8"
    ]
  },
  "c94e": {
    "id": "c94e",
    "label": "merge"
  },
  "a09b": {
    "id": "a09b",
    "label": "I want to output the values from either of them",
    "options": [
      "c94e"
    ]
  },
  "928e": {
    "id": "928e",
    "label": "combineLatest"
  },
  "57f4": {
    "id": "57f4",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "928e"
    ]
  },
  "1baa": {
    "id": "1baa",
    "label": "withLatestFrom"
  },
  "d1b6": {
    "id": "d1b6",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "1baa"
    ]
  },
  "39e7": {
    "id": "39e7",
    "label": "zip"
  },
  "f6d2": {
    "id": "f6d2",
    "label": "using each source value only once",
    "options": [
      "39e7"
    ]
  },
  "d301": {
    "id": "d301",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "57f4",
      "d1b6",
      "f6d2"
    ]
  },
  "b493": {
    "id": "b493",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "b314",
      "a09b",
      "d301"
    ]
  },
  "0bdd": {
    "id": "0bdd",
    "label": "I have one existing Observable, and",
    "options": [
      "27f0",
      "7936",
      "5998",
      "d8d2",
      "e264",
      "dfb4",
      "db71",
      "d342",
      "7144",
      "ecb1",
      "e4c3",
      "ff0e",
      "2784",
      "6cd2",
      "9e9c",
      "2f75",
      "dc64",
      "a1d0",
      "cd86",
      "a8d8",
      "b493"
    ]
  },
  "7cdf": {
    "id": "7cdf",
    "label": "race"
  },
  "ce9e": {
    "id": "ce9e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "7cdf"
    ]
  },
  "721c": {
    "id": "721c",
    "label": "forkJoin"
  },
  "dd13": {
    "id": "dd13",
    "label": "merge"
  },
  "30b5": {
    "id": "30b5",
    "label": "combineLatest"
  },
  "29c0": {
    "id": "29c0",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "30b5"
    ]
  },
  "8ccc": {
    "id": "8ccc",
    "label": "zip"
  },
  "379e": {
    "id": "379e",
    "label": "using each source value only once",
    "options": [
      "8ccc"
    ]
  },
  "0f89": {
    "id": "0f89",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "29c0",
      "379e"
    ]
  },
  "d49c": {
    "id": "d49c",
    "label": "concat"
  },
  "580e": {
    "id": "580e",
    "label": "I want to subscribe to each in order",
    "options": [
      "d49c"
    ]
  },
  "82b3": {
    "id": "82b3",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "ce9e",
      "2261",
      "3067",
      "0f89",
      "580e"
    ]
  },
  "4b5a": {
    "id": "4b5a",
    "label": "Observable",
    "method": "create"
  },
  "e7e7": {
    "id": "e7e7",
    "label": "using custom logic",
    "options": [
      "4b5a"
    ]
  },
  "7e5f": {
    "id": "7e5f",
    "label": "using a state machine similar to a for loop",
    "options": [
      "5836"
    ]
  },
  "5d83": {
    "id": "5d83",
    "label": "throwError"
  },
  "79db": {
    "id": "79db",
    "label": "that throws an error",
    "options": [
      "5d83"
    ]
  },
  "8ee2": {
    "id": "8ee2",
    "label": "EMPTY"
  },
  "9dbd": {
    "id": "9dbd",
    "label": "that just completes, without emitting values",
    "options": [
      "8ee2"
    ]
  },
  "f8a9": {
    "id": "f8a9",
    "label": "NEVER"
  },
  "ca78": {
    "id": "ca78",
    "label": "that never emits anything",
    "options": [
      "f8a9"
    ]
  },
  "7a68": {
    "id": "7a68",
    "label": "fromEvent"
  },
  "26ff": {
    "id": "26ff",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "7a68"
    ]
  },
  "39f8": {
    "id": "39f8",
    "label": "fromEventPattern"
  },
  "561d": {
    "id": "561d",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "39f8"
    ]
  },
  "fc17": {
    "id": "fc17",
    "label": "from an existing source of events",
    "options": [
      "26ff",
      "561d"
    ]
  },
  "5c4d": {
    "id": "5c4d",
    "label": "from"
  },
  "fe52": {
    "id": "fe52",
    "label": "from a Promise or an event source",
    "options": [
      "5c4d"
    ]
  },
  "b6b2": {
    "id": "b6b2",
    "label": "from"
  },
  "c2bd": {
    "id": "c2bd",
    "label": "range"
  },
  "a38a": {
    "id": "a38a",
    "label": "over values in a numeric range",
    "options": [
      "c2bd"
    ]
  },
  "12f9": {
    "id": "12f9",
    "label": "of"
  },
  "c848": {
    "id": "c848",
    "label": "over prefined values given as arguments",
    "options": [
      "12f9"
    ]
  },
  "7f87": {
    "id": "7f87",
    "label": "interval"
  },
  "ce93": {
    "id": "ce93",
    "label": "regularly",
    "options": [
      "7f87"
    ]
  },
  "4e5b": {
    "id": "4e5b",
    "label": "timer"
  },
  "6a1e": {
    "id": "6a1e",
    "label": "with an optional initial delay",
    "options": [
      "4e5b"
    ]
  },
  "0b9e": {
    "id": "0b9e",
    "label": "that emits values on a timer",
    "options": [
      "ce93",
      "6a1e"
    ]
  },
  "bc0f": {
    "id": "bc0f",
    "label": "defer"
  },
  "b4e2": {
    "id": "b4e2",
    "label": "which is built on demand when subscribed",
    "options": [
      "bc0f"
    ]
  },
  "b75b": {
    "id": "b75b",
    "label": "I want to create a new Observable",
    "options": [
      "e7e7",
      "7e5f",
      "79db",
      "9dbd",
      "ca78",
      "fc17",
      "fe52",
      "6817",
      "0b9e",
      "b4e2"
    ]
  },
  "321b": {
    "id": "321b",
    "label": "bindCallback"
  },
  "c720": {
    "id": "c720",
    "label": "supporting a conventional callback API",
    "options": [
      "321b"
    ]
  },
  "68b2": {
    "id": "68b2",
    "label": "bindNodeCallback"
  },
  "e2dd": {
    "id": "e2dd",
    "label": "supporting Node.js callback style API",
    "options": [
      "68b2"
    ]
  },
  "0957": {
    "id": "0957",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "c720",
      "e2dd"
    ]
  },
  "d93a": {
    "id": "d93a",
    "label": "I have no Observables yet, and",
    "options": [
      "b75b",
      "0957"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "0bdd",
      "82b3",
      "d93a"
    ]
  }
}