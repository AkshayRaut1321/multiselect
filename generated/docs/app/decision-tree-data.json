{
  "1003": {
    "id": "1003",
    "label": "based on custom logic",
    "options": [
      "fb42"
    ]
  },
  "1028": {
    "id": "1028",
    "label": "I want to perform custom operations",
    "options": [
      "c2ea"
    ]
  },
  "1471": {
    "id": "1471",
    "label": "subscribeOn"
  },
  "1629": {
    "id": "1629",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "75ac"
    ]
  },
  "1774": {
    "id": "1774",
    "label": "take"
  },
  "1832": {
    "id": "1832",
    "label": "publishBehavior"
  },
  "2039": {
    "id": "2039",
    "label": "I want to know how many values it emits",
    "options": [
      "f471"
    ]
  },
  "2165": {
    "id": "2165",
    "label": "pluck"
  },
  "2325": {
    "id": "2325",
    "label": "until another Observable emits",
    "options": [
      "ea95",
      "3eb8"
    ]
  },
  "2440": {
    "id": "2440",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "17df"
    ]
  },
  "2452": {
    "id": "2452",
    "label": "merge"
  },
  "2484": {
    "id": "2484",
    "label": "supporting Node.js callback style API",
    "options": [
      "3ea6"
    ]
  },
  "2640": {
    "id": "2640",
    "label": "using a specific subject implementation",
    "options": [
      "0641"
    ]
  },
  "2708": {
    "id": "2708",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3351"
    ]
  },
  "2972": {
    "id": "2972",
    "label": "auditTime"
  },
  "3051": {
    "id": "3051",
    "label": "I want to re-subscribe",
    "options": [
      "1a2f",
      "84e3"
    ]
  },
  "3089": {
    "id": "3089",
    "label": "I want to change each emitted value",
    "options": [
      "e34b",
      "dc19"
    ]
  },
  "3351": {
    "id": "3351",
    "label": "windowToggle"
  },
  "3489": {
    "id": "3489",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "f602",
      "f1f4"
    ]
  },
  "3516": {
    "id": "3516",
    "label": "based on custom logic",
    "options": [
      "88c2"
    ]
  },
  "3751": {
    "id": "3751",
    "label": "single"
  },
  "3769": {
    "id": "3769",
    "label": "and start it manually or imperatively",
    "options": [
      "4bcd"
    ]
  },
  "5868": {
    "id": "5868",
    "label": "from a Promise or an event source",
    "options": [
      "c4a1"
    ]
  },
  "6149": {
    "id": "6149",
    "label": "debounceTime"
  },
  "6404": {
    "id": "6404",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "3ddd",
      "0095"
    ]
  },
  "7447": {
    "id": "7447",
    "label": "EMPTY"
  },
  "7473": {
    "id": "7473",
    "label": "repeatWhen"
  },
  "8285": {
    "id": "8285",
    "label": "based on time",
    "options": [
      "1f71",
      "0bb9"
    ]
  },
  "8726": {
    "id": "8726",
    "label": "partition"
  },
  "9246": {
    "id": "9246",
    "label": "throttleTime"
  },
  "9353": {
    "id": "9353",
    "label": "if they are exactly the n-th emission",
    "options": [
      "02fa"
    ]
  },
  "9355": {
    "id": "9355",
    "label": "I want to start a new Observable for each value",
    "options": [
      "26e7",
      "0536",
      "25ae",
      "eaaf",
      "cd4c"
    ]
  },
  "9762": {
    "id": "9762",
    "label": "using an AsyncSubject",
    "options": [
      "88c5"
    ]
  },
  "a96e": {
    "id": "a96e",
    "label": "mapTo"
  },
  "e34b": {
    "id": "e34b",
    "label": "to be a constant value",
    "options": [
      "a96e"
    ]
  },
  "3b5e": {
    "id": "3b5e",
    "label": "map"
  },
  "dc19": {
    "id": "dc19",
    "label": "to be a value calculated through a formula",
    "options": [
      "3b5e"
    ]
  },
  "64bc": {
    "id": "64bc",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "2165"
    ]
  },
  "de15": {
    "id": "de15",
    "label": "tap"
  },
  "0348": {
    "id": "0348",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "de15"
    ]
  },
  "88c2": {
    "id": "88c2",
    "label": "filter"
  },
  "c2ef": {
    "id": "c2ef",
    "label": "first"
  },
  "c8f0": {
    "id": "c8f0",
    "label": "and only the first value",
    "options": [
      "c2ef"
    ]
  },
  "e304": {
    "id": "e304",
    "label": "based on a given amount",
    "options": [
      "1774"
    ]
  },
  "fb42": {
    "id": "fb42",
    "label": "takeWhile"
  },
  "f060": {
    "id": "f060",
    "label": "if they are at the start of the Observable",
    "options": [
      "c8f0",
      "e304",
      "1003"
    ]
  },
  "02fa": {
    "id": "02fa",
    "label": "elementAt"
  },
  "c030": {
    "id": "c030",
    "label": "last"
  },
  "b4a2": {
    "id": "b4a2",
    "label": "and only the last value",
    "options": [
      "c030"
    ]
  },
  "0547": {
    "id": "0547",
    "label": "takeLast"
  },
  "df1f": {
    "id": "df1f",
    "label": "based on a given amount",
    "options": [
      "0547"
    ]
  },
  "2c40": {
    "id": "2c40",
    "label": "if they are at the end of the Observable",
    "options": [
      "b4a2",
      "df1f"
    ]
  },
  "88bf": {
    "id": "88bf",
    "label": "takeUntil"
  },
  "78a6": {
    "id": "78a6",
    "label": "until another Observable emits a value",
    "options": [
      "88bf"
    ]
  },
  "fe82": {
    "id": "fe82",
    "label": "I want to allow some values to pass",
    "options": [
      "3516",
      "f060",
      "9353",
      "2c40",
      "78a6"
    ]
  },
  "84dd": {
    "id": "84dd",
    "label": "ignoreElements"
  },
  "9a33": {
    "id": "9a33",
    "label": "altogether",
    "options": [
      "84dd"
    ]
  },
  "c3a7": {
    "id": "c3a7",
    "label": "skip"
  },
  "34a7": {
    "id": "34a7",
    "label": "based on a given amount",
    "options": [
      "c3a7"
    ]
  },
  "673f": {
    "id": "673f",
    "label": "skipWhile"
  },
  "7bec": {
    "id": "7bec",
    "label": "based on custom logic",
    "options": [
      "673f"
    ]
  },
  "79b1": {
    "id": "79b1",
    "label": "from the start of the Observable",
    "options": [
      "34a7",
      "7bec"
    ]
  },
  "d44f": {
    "id": "d44f",
    "label": "skipLast"
  },
  "3b5c": {
    "id": "3b5c",
    "label": "from the end of the Observable",
    "options": [
      "d44f"
    ]
  },
  "97c8": {
    "id": "97c8",
    "label": "skipUntil"
  },
  "be7b": {
    "id": "be7b",
    "label": "until another Observable emits a value",
    "options": [
      "97c8"
    ]
  },
  "1ee3": {
    "id": "1ee3",
    "label": "distinctUntilChanged"
  },
  "edba": {
    "id": "edba",
    "label": "emitted just before the current value",
    "options": [
      "1ee3"
    ]
  },
  "4bb4": {
    "id": "4bb4",
    "label": "distinct"
  },
  "a567": {
    "id": "a567",
    "label": "emitted some time in the past",
    "options": [
      "4bb4"
    ]
  },
  "ffbd": {
    "id": "ffbd",
    "label": "according to value equality",
    "options": [
      "edba",
      "a567"
    ]
  },
  "d165": {
    "id": "d165",
    "label": "distinctUntilKeyChanged"
  },
  "b86d": {
    "id": "b86d",
    "label": "emitted just before the current value",
    "options": [
      "d165"
    ]
  },
  "da22": {
    "id": "da22",
    "label": "according to a key or object property",
    "options": [
      "b86d"
    ]
  },
  "7c53": {
    "id": "7c53",
    "label": "that match some previous value",
    "options": [
      "ffbd",
      "da22"
    ]
  },
  "d523": {
    "id": "d523",
    "label": "throttle"
  },
  "0e0d": {
    "id": "0e0d",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d523"
    ]
  },
  "7ce4": {
    "id": "7ce4",
    "label": "where time windows are determined by a time duration",
    "options": [
      "9246"
    ]
  },
  "acf1": {
    "id": "acf1",
    "label": "by emitting the first value in each time window",
    "options": [
      "0e0d",
      "7ce4"
    ]
  },
  "d00a": {
    "id": "d00a",
    "label": "audit"
  },
  "903b": {
    "id": "903b",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d00a"
    ]
  },
  "8c16": {
    "id": "8c16",
    "label": "where time windows are determined by a time duration",
    "options": [
      "2972"
    ]
  },
  "c187": {
    "id": "c187",
    "label": "by emitting the last value in each time window",
    "options": [
      "903b",
      "8c16"
    ]
  },
  "7e81": {
    "id": "7e81",
    "label": "debounce"
  },
  "93ff": {
    "id": "93ff",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "7e81"
    ]
  },
  "c941": {
    "id": "c941",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "6149"
    ]
  },
  "39f8": {
    "id": "39f8",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "93ff",
      "c941"
    ]
  },
  "1acb": {
    "id": "1acb",
    "label": "that occur too frequently",
    "options": [
      "acf1",
      "c187",
      "39f8"
    ]
  },
  "bc2c": {
    "id": "bc2c",
    "label": "I want to ignore values",
    "options": [
      "9a33",
      "79b1",
      "3b5c",
      "be7b",
      "7c53",
      "1acb"
    ]
  },
  "5dcf": {
    "id": "5dcf",
    "label": "reduce"
  },
  "cc23": {
    "id": "cc23",
    "label": "and only output the final computed value",
    "options": [
      "5dcf"
    ]
  },
  "5bee": {
    "id": "5bee",
    "label": "scan"
  },
  "285d": {
    "id": "285d",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "5bee"
    ]
  },
  "f84c": {
    "id": "f84c",
    "label": "mergeScan"
  },
  "962a": {
    "id": "962a",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "f84c"
    ]
  },
  "a5ec": {
    "id": "a5ec",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "cc23",
      "285d",
      "962a"
    ]
  },
  "021d": {
    "id": "021d",
    "label": "materialize"
  },
  "f602": {
    "id": "f602",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "021d"
    ]
  },
  "90cc": {
    "id": "90cc",
    "label": "timeInterval"
  },
  "f1f4": {
    "id": "f1f4",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "90cc"
    ]
  },
  "8e9e": {
    "id": "8e9e",
    "label": "timeout"
  },
  "e6ab": {
    "id": "e6ab",
    "label": "I want to throw an error",
    "options": [
      "8e9e"
    ]
  },
  "dc59": {
    "id": "dc59",
    "label": "timeoutWith"
  },
  "0b23": {
    "id": "0b23",
    "label": "I want to switch to another Observable",
    "options": [
      "dc59"
    ]
  },
  "c99f": {
    "id": "c99f",
    "label": "after a period of inactivity",
    "options": [
      "e6ab",
      "0b23"
    ]
  },
  "8dc5": {
    "id": "8dc5",
    "label": "I want to ensure there is only one value",
    "options": [
      "3751"
    ]
  },
  "f471": {
    "id": "f471",
    "label": "count"
  },
  "e512": {
    "id": "e512",
    "label": "startWith"
  },
  "e440": {
    "id": "e440",
    "label": "I want to prepend one value",
    "options": [
      "e512"
    ]
  },
  "dbef": {
    "id": "dbef",
    "label": "delay"
  },
  "f48d": {
    "id": "f48d",
    "label": "based on a given amount of time",
    "options": [
      "dbef"
    ]
  },
  "5e2a": {
    "id": "5e2a",
    "label": "delayWhen"
  },
  "34cf": {
    "id": "34cf",
    "label": "based on the emissions of another Observable",
    "options": [
      "5e2a"
    ]
  },
  "9e29": {
    "id": "9e29",
    "label": "I want to delay the emissions",
    "options": [
      "f48d",
      "34cf"
    ]
  },
  "cf03": {
    "id": "cf03",
    "label": "toArray"
  },
  "8c52": {
    "id": "8c52",
    "label": "and convert to an array",
    "options": [
      "cf03"
    ]
  },
  "a200": {
    "id": "a200",
    "label": "Observable",
    "method": "toPromise"
  },
  "039a": {
    "id": "039a",
    "label": "and convert to a Promise",
    "options": [
      "a200"
    ]
  },
  "417a": {
    "id": "417a",
    "label": "until the Observable completes",
    "options": [
      "8c52",
      "039a"
    ]
  },
  "50eb": {
    "id": "50eb",
    "label": "pairwise"
  },
  "c1fb": {
    "id": "c1fb",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "50eb"
    ]
  },
  "c5bd": {
    "id": "c5bd",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "8726"
    ]
  },
  "0794": {
    "id": "0794",
    "label": "bufferCount"
  },
  "c6cd": {
    "id": "c6cd",
    "label": "and emit the group as an array",
    "options": [
      "0794"
    ]
  },
  "dbba": {
    "id": "dbba",
    "label": "windowCount"
  },
  "6f16": {
    "id": "6f16",
    "label": "and emit the group as a nested Observable",
    "options": [
      "dbba"
    ]
  },
  "3a51": {
    "id": "3a51",
    "label": "in batches of a particular size",
    "options": [
      "c6cd",
      "6f16"
    ]
  },
  "b54a": {
    "id": "b54a",
    "label": "bufferTime"
  },
  "1f71": {
    "id": "1f71",
    "label": "and emit the group as an array",
    "options": [
      "b54a"
    ]
  },
  "7ad2": {
    "id": "7ad2",
    "label": "windowTime"
  },
  "0bb9": {
    "id": "0bb9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7ad2"
    ]
  },
  "465b": {
    "id": "465b",
    "label": "buffer"
  },
  "ea95": {
    "id": "ea95",
    "label": "and emit the group as an array",
    "options": [
      "465b"
    ]
  },
  "97da": {
    "id": "97da",
    "label": "window"
  },
  "3eb8": {
    "id": "3eb8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "97da"
    ]
  },
  "ba3a": {
    "id": "ba3a",
    "label": "bufferWhen"
  },
  "3ddd": {
    "id": "3ddd",
    "label": "and emit the group as an array",
    "options": [
      "ba3a"
    ]
  },
  "7adf": {
    "id": "7adf",
    "label": "windowWhen"
  },
  "0095": {
    "id": "0095",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7adf"
    ]
  },
  "626c": {
    "id": "626c",
    "label": "bufferToggle"
  },
  "ee8f": {
    "id": "ee8f",
    "label": "and emit the group as an array",
    "options": [
      "626c"
    ]
  },
  "28d3": {
    "id": "28d3",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "ee8f",
      "2708"
    ]
  },
  "b22c": {
    "id": "b22c",
    "label": "groupBy"
  },
  "83df": {
    "id": "83df",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "b22c"
    ]
  },
  "c501": {
    "id": "c501",
    "label": "I want to group the values",
    "options": [
      "417a",
      "c1fb",
      "c5bd",
      "3a51",
      "8285",
      "2325",
      "6404",
      "28d3",
      "83df"
    ]
  },
  "a1cc": {
    "id": "a1cc",
    "label": "mergeMapTo"
  },
  "164b": {
    "id": "164b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a1cc"
    ]
  },
  "645c": {
    "id": "645c",
    "label": "mergeMap"
  },
  "d135": {
    "id": "d135",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "645c"
    ]
  },
  "26e7": {
    "id": "26e7",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "164b",
      "d135"
    ]
  },
  "fd93": {
    "id": "fd93",
    "label": "concatMapTo"
  },
  "8dd1": {
    "id": "8dd1",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "fd93"
    ]
  },
  "bfab": {
    "id": "bfab",
    "label": "concatMap"
  },
  "84d0": {
    "id": "84d0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "bfab"
    ]
  },
  "0536": {
    "id": "0536",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "8dd1",
      "84d0"
    ]
  },
  "6a33": {
    "id": "6a33",
    "label": "switchMapTo"
  },
  "61e2": {
    "id": "61e2",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6a33"
    ]
  },
  "4d59": {
    "id": "4d59",
    "label": "switchMap"
  },
  "b2f2": {
    "id": "b2f2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "4d59"
    ]
  },
  "25ae": {
    "id": "25ae",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "61e2",
      "b2f2"
    ]
  },
  "1c56": {
    "id": "1c56",
    "label": "exhaustMap"
  },
  "eaaf": {
    "id": "eaaf",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "1c56"
    ]
  },
  "c67b": {
    "id": "c67b",
    "label": "expand"
  },
  "cd4c": {
    "id": "cd4c",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "c67b"
    ]
  },
  "c2ea": {
    "id": "c2ea",
    "label": "pipe"
  },
  "16cf": {
    "id": "16cf",
    "label": "share"
  },
  "c1b5": {
    "id": "c1b5",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "16cf"
    ]
  },
  "4bcd": {
    "id": "4bcd",
    "label": "publish"
  },
  "5a20": {
    "id": "5a20",
    "label": "using a conventional Subject",
    "options": [
      "c1b5",
      "3769"
    ]
  },
  "12d7": {
    "id": "12d7",
    "label": "using a BehaviorSubject",
    "options": [
      "1832"
    ]
  },
  "ab20": {
    "id": "ab20",
    "label": "publishReplay"
  },
  "8c23": {
    "id": "8c23",
    "label": "using a ReplaySubject",
    "options": [
      "ab20"
    ]
  },
  "88c5": {
    "id": "88c5",
    "label": "publishLast"
  },
  "0641": {
    "id": "0641",
    "label": "multicast"
  },
  "23fb": {
    "id": "23fb",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "5a20",
      "12d7",
      "8c23",
      "9762",
      "2640"
    ]
  },
  "b814": {
    "id": "b814",
    "label": "catchError"
  },
  "eec3": {
    "id": "eec3",
    "label": "I want to start a new Observable",
    "options": [
      "b814"
    ]
  },
  "a8b1": {
    "id": "a8b1",
    "label": "retry"
  },
  "1a2f": {
    "id": "1a2f",
    "label": "immediately",
    "options": [
      "a8b1"
    ]
  },
  "10a7": {
    "id": "10a7",
    "label": "retryWhen"
  },
  "84e3": {
    "id": "84e3",
    "label": "when another Observable emits",
    "options": [
      "10a7"
    ]
  },
  "7ad1": {
    "id": "7ad1",
    "label": "when an error occurs",
    "options": [
      "eec3",
      "3051"
    ]
  },
  "ab88": {
    "id": "ab88",
    "label": "repeat"
  },
  "c221": {
    "id": "c221",
    "label": "immediately",
    "options": [
      "ab88"
    ]
  },
  "2f95": {
    "id": "2f95",
    "label": "when another Observable emits",
    "options": [
      "7473"
    ]
  },
  "17aa": {
    "id": "17aa",
    "label": "I want to re-subscribe",
    "options": [
      "c221",
      "2f95"
    ]
  },
  "349e": {
    "id": "349e",
    "label": "concat"
  },
  "05a5": {
    "id": "05a5",
    "label": "I want to start a new Observable",
    "options": [
      "349e"
    ]
  },
  "e61a": {
    "id": "e61a",
    "label": "when it completes",
    "options": [
      "17aa",
      "05a5"
    ]
  },
  "523e": {
    "id": "523e",
    "label": "finalize"
  },
  "746b": {
    "id": "746b",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "523e"
    ]
  },
  "664f": {
    "id": "664f",
    "label": "that routes calls to subscribe",
    "options": [
      "1471"
    ]
  },
  "79bc": {
    "id": "79bc",
    "label": "observeOn"
  },
  "650a": {
    "id": "650a",
    "label": "that routes values to observers",
    "options": [
      "79bc"
    ]
  },
  "a0f5": {
    "id": "a0f5",
    "label": "I want to change the scheduler",
    "options": [
      "664f",
      "650a"
    ]
  },
  "75ac": {
    "id": "75ac",
    "label": "race"
  },
  "5fc0": {
    "id": "5fc0",
    "label": "I want to output the values from either of them",
    "options": [
      "2452"
    ]
  },
  "f1e7": {
    "id": "f1e7",
    "label": "combineLatest"
  },
  "62fe": {
    "id": "62fe",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "f1e7"
    ]
  },
  "17df": {
    "id": "17df",
    "label": "withLatestFrom"
  },
  "f576": {
    "id": "f576",
    "label": "zip"
  },
  "f40f": {
    "id": "f40f",
    "label": "using each source value only once",
    "options": [
      "f576"
    ]
  },
  "77db": {
    "id": "77db",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "62fe",
      "2440",
      "f40f"
    ]
  },
  "fd01": {
    "id": "fd01",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "1629",
      "5fc0",
      "77db"
    ]
  },
  "c28b": {
    "id": "c28b",
    "label": "I have one existing Observable, and",
    "options": [
      "3089",
      "64bc",
      "0348",
      "fe82",
      "bc2c",
      "a5ec",
      "3489",
      "c99f",
      "8dc5",
      "2039",
      "e440",
      "9e29",
      "c501",
      "9355",
      "1028",
      "23fb",
      "7ad1",
      "e61a",
      "746b",
      "a0f5",
      "fd01"
    ]
  },
  "f53f": {
    "id": "f53f",
    "label": "race"
  },
  "a06b": {
    "id": "a06b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "f53f"
    ]
  },
  "9e11": {
    "id": "9e11",
    "label": "forkJoin"
  },
  "4d24": {
    "id": "4d24",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "9e11"
    ]
  },
  "e342": {
    "id": "e342",
    "label": "merge"
  },
  "caae": {
    "id": "caae",
    "label": "I want to output the values from either of them",
    "options": [
      "e342"
    ]
  },
  "09fe": {
    "id": "09fe",
    "label": "combineLatest"
  },
  "2eb9": {
    "id": "2eb9",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "09fe"
    ]
  },
  "18a3": {
    "id": "18a3",
    "label": "zip"
  },
  "7fc4": {
    "id": "7fc4",
    "label": "using each source value only once",
    "options": [
      "18a3"
    ]
  },
  "e3e4": {
    "id": "e3e4",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "2eb9",
      "7fc4"
    ]
  },
  "ae9a": {
    "id": "ae9a",
    "label": "concat"
  },
  "b934": {
    "id": "b934",
    "label": "I want to subscribe to each in order",
    "options": [
      "ae9a"
    ]
  },
  "3abd": {
    "id": "3abd",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "a06b",
      "4d24",
      "caae",
      "e3e4",
      "b934"
    ]
  },
  "8c91": {
    "id": "8c91",
    "label": "Observable",
    "method": "create"
  },
  "42f6": {
    "id": "42f6",
    "label": "using custom logic",
    "options": [
      "8c91"
    ]
  },
  "ed63": {
    "id": "ed63",
    "label": "generate"
  },
  "271e": {
    "id": "271e",
    "label": "using a state machine similar to a for loop",
    "options": [
      "ed63"
    ]
  },
  "0f05": {
    "id": "0f05",
    "label": "throwError"
  },
  "e247": {
    "id": "e247",
    "label": "that throws an error",
    "options": [
      "0f05"
    ]
  },
  "c911": {
    "id": "c911",
    "label": "that just completes, without emitting values",
    "options": [
      "7447"
    ]
  },
  "e3b4": {
    "id": "e3b4",
    "label": "NEVER"
  },
  "3f22": {
    "id": "3f22",
    "label": "that never emits anything",
    "options": [
      "e3b4"
    ]
  },
  "fcc6": {
    "id": "fcc6",
    "label": "fromEvent"
  },
  "2c75": {
    "id": "2c75",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "fcc6"
    ]
  },
  "a58e": {
    "id": "a58e",
    "label": "fromEventPattern"
  },
  "84fe": {
    "id": "84fe",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "a58e"
    ]
  },
  "31e7": {
    "id": "31e7",
    "label": "from an existing source of events",
    "options": [
      "2c75",
      "84fe"
    ]
  },
  "c4a1": {
    "id": "c4a1",
    "label": "from"
  },
  "e52d": {
    "id": "e52d",
    "label": "from"
  },
  "368c": {
    "id": "368c",
    "label": "over the values in an array",
    "options": [
      "e52d"
    ]
  },
  "1bd6": {
    "id": "1bd6",
    "label": "range"
  },
  "5e02": {
    "id": "5e02",
    "label": "over values in a numeric range",
    "options": [
      "1bd6"
    ]
  },
  "0e72": {
    "id": "0e72",
    "label": "of"
  },
  "65ea": {
    "id": "65ea",
    "label": "over prefined values given as arguments",
    "options": [
      "0e72"
    ]
  },
  "c40a": {
    "id": "c40a",
    "label": "that iterates",
    "options": [
      "368c",
      "5e02",
      "65ea"
    ]
  },
  "d6b0": {
    "id": "d6b0",
    "label": "interval"
  },
  "bbbe": {
    "id": "bbbe",
    "label": "regularly",
    "options": [
      "d6b0"
    ]
  },
  "a68b": {
    "id": "a68b",
    "label": "timer"
  },
  "e75c": {
    "id": "e75c",
    "label": "with an optional initial delay",
    "options": [
      "a68b"
    ]
  },
  "f9b0": {
    "id": "f9b0",
    "label": "that emits values on a timer",
    "options": [
      "bbbe",
      "e75c"
    ]
  },
  "6cb9": {
    "id": "6cb9",
    "label": "defer"
  },
  "ac55": {
    "id": "ac55",
    "label": "which is built on demand when subscribed",
    "options": [
      "6cb9"
    ]
  },
  "ccae": {
    "id": "ccae",
    "label": "I want to create a new Observable",
    "options": [
      "42f6",
      "271e",
      "e247",
      "c911",
      "3f22",
      "31e7",
      "5868",
      "c40a",
      "f9b0",
      "ac55"
    ]
  },
  "ff45": {
    "id": "ff45",
    "label": "bindCallback"
  },
  "a27c": {
    "id": "a27c",
    "label": "supporting a conventional callback API",
    "options": [
      "ff45"
    ]
  },
  "3ea6": {
    "id": "3ea6",
    "label": "bindNodeCallback"
  },
  "18cc": {
    "id": "18cc",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "a27c",
      "2484"
    ]
  },
  "d678": {
    "id": "d678",
    "label": "I have no Observables yet, and",
    "options": [
      "ccae",
      "18cc"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "c28b",
      "3abd",
      "d678"
    ]
  }
}