{
  "1280": {
    "id": "1280",
    "label": "I want to start a new Observable for each value",
    "options": [
      "f6cf",
      "26cf",
      "cfc2",
      "d81a",
      "bad5"
    ]
  },
  "1310": {
    "id": "1310",
    "label": "concat"
  },
  "1316": {
    "id": "1316",
    "label": "that routes calls to subscribe",
    "options": [
      "99f0"
    ]
  },
  "2159": {
    "id": "2159",
    "label": "I want to group the values",
    "options": [
      "cf28",
      "5434",
      "b754",
      "4aaa",
      "2fb2",
      "0692",
      "8ccb",
      "512a",
      "0d67"
    ]
  },
  "2288": {
    "id": "2288",
    "label": "mergeScan"
  },
  "2289": {
    "id": "2289",
    "label": "I want to start a new Observable",
    "options": [
      "4a4c"
    ]
  },
  "2332": {
    "id": "2332",
    "label": "materialize"
  },
  "2538": {
    "id": "2538",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3337"
    ]
  },
  "2697": {
    "id": "2697",
    "label": "according to a key or object property",
    "options": [
      "8a35"
    ]
  },
  "2897": {
    "id": "2897",
    "label": "single"
  },
  "2995": {
    "id": "2995",
    "label": "switchMapTo"
  },
  "3025": {
    "id": "3025",
    "label": "fromEventPattern"
  },
  "3159": {
    "id": "3159",
    "label": "based on custom logic",
    "options": [
      "6927"
    ]
  },
  "3337": {
    "id": "3337",
    "label": "auditTime"
  },
  "3524": {
    "id": "3524",
    "label": "audit"
  },
  "3677": {
    "id": "3677",
    "label": "from"
  },
  "3713": {
    "id": "3713",
    "label": "forkJoin"
  },
  "4180": {
    "id": "4180",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5cc0"
    ]
  },
  "4264": {
    "id": "4264",
    "label": "publishLast"
  },
  "4462": {
    "id": "4462",
    "label": "publishReplay"
  },
  "5065": {
    "id": "5065",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "2332"
    ]
  },
  "5434": {
    "id": "5434",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "fa29"
    ]
  },
  "5809": {
    "id": "5809",
    "label": "of"
  },
  "6512": {
    "id": "6512",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c79d"
    ]
  },
  "6927": {
    "id": "6927",
    "label": "takeWhile"
  },
  "7191": {
    "id": "7191",
    "label": "share"
  },
  "7910": {
    "id": "7910",
    "label": "race"
  },
  "8185": {
    "id": "8185",
    "label": "windowWhen"
  },
  "8400": {
    "id": "8400",
    "label": "emitted just before the current value",
    "options": [
      "dd24"
    ]
  },
  "8585": {
    "id": "8585",
    "label": "scan"
  },
  "8671": {
    "id": "8671",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "c44f"
    ]
  },
  "8974": {
    "id": "8974",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e82e"
    ]
  },
  "9079": {
    "id": "9079",
    "label": "bindNodeCallback"
  },
  "9126": {
    "id": "9126",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "037b"
    ]
  },
  "9236": {
    "id": "9236",
    "label": "observeOn"
  },
  "9283": {
    "id": "9283",
    "label": "supporting Node.js callback style API",
    "options": [
      "9079"
    ]
  },
  "9722": {
    "id": "9722",
    "label": "when an error occurs",
    "options": [
      "82a7",
      "590a"
    ]
  },
  "8fa1": {
    "id": "8fa1",
    "label": "mapTo"
  },
  "e17b": {
    "id": "e17b",
    "label": "to be a constant value",
    "options": [
      "8fa1"
    ]
  },
  "89f0": {
    "id": "89f0",
    "label": "map"
  },
  "024f": {
    "id": "024f",
    "label": "to be a value calculated through a formula",
    "options": [
      "89f0"
    ]
  },
  "d584": {
    "id": "d584",
    "label": "I want to change each emitted value",
    "options": [
      "e17b",
      "024f"
    ]
  },
  "037b": {
    "id": "037b",
    "label": "pluck"
  },
  "e71b": {
    "id": "e71b",
    "label": "tap"
  },
  "8ff6": {
    "id": "8ff6",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "e71b"
    ]
  },
  "9e86": {
    "id": "9e86",
    "label": "filter"
  },
  "7b65": {
    "id": "7b65",
    "label": "based on custom logic",
    "options": [
      "9e86"
    ]
  },
  "63c0": {
    "id": "63c0",
    "label": "first"
  },
  "dbea": {
    "id": "dbea",
    "label": "and only the first value",
    "options": [
      "63c0"
    ]
  },
  "54cd": {
    "id": "54cd",
    "label": "take"
  },
  "a480": {
    "id": "a480",
    "label": "based on a given amount",
    "options": [
      "54cd"
    ]
  },
  "554d": {
    "id": "554d",
    "label": "if they are at the start of the Observable",
    "options": [
      "dbea",
      "a480",
      "3159"
    ]
  },
  "f9fa": {
    "id": "f9fa",
    "label": "elementAt"
  },
  "4dd2": {
    "id": "4dd2",
    "label": "if they are exactly the n-th emission",
    "options": [
      "f9fa"
    ]
  },
  "d761": {
    "id": "d761",
    "label": "last"
  },
  "30de": {
    "id": "30de",
    "label": "and only the last value",
    "options": [
      "d761"
    ]
  },
  "a409": {
    "id": "a409",
    "label": "takeLast"
  },
  "364f": {
    "id": "364f",
    "label": "based on a given amount",
    "options": [
      "a409"
    ]
  },
  "b194": {
    "id": "b194",
    "label": "if they are at the end of the Observable",
    "options": [
      "30de",
      "364f"
    ]
  },
  "3de1": {
    "id": "3de1",
    "label": "takeUntil"
  },
  "27b0": {
    "id": "27b0",
    "label": "until another Observable emits a value",
    "options": [
      "3de1"
    ]
  },
  "6a05": {
    "id": "6a05",
    "label": "I want to allow some values to pass",
    "options": [
      "7b65",
      "554d",
      "4dd2",
      "b194",
      "27b0"
    ]
  },
  "e384": {
    "id": "e384",
    "label": "ignoreElements"
  },
  "b9f4": {
    "id": "b9f4",
    "label": "altogether",
    "options": [
      "e384"
    ]
  },
  "2f7d": {
    "id": "2f7d",
    "label": "skip"
  },
  "429a": {
    "id": "429a",
    "label": "based on a given amount",
    "options": [
      "2f7d"
    ]
  },
  "99e2": {
    "id": "99e2",
    "label": "skipWhile"
  },
  "15b0": {
    "id": "15b0",
    "label": "based on custom logic",
    "options": [
      "99e2"
    ]
  },
  "f6b7": {
    "id": "f6b7",
    "label": "from the start of the Observable",
    "options": [
      "429a",
      "15b0"
    ]
  },
  "01be": {
    "id": "01be",
    "label": "skipLast"
  },
  "0962": {
    "id": "0962",
    "label": "from the end of the Observable",
    "options": [
      "01be"
    ]
  },
  "289c": {
    "id": "289c",
    "label": "skipUntil"
  },
  "7b26": {
    "id": "7b26",
    "label": "until another Observable emits a value",
    "options": [
      "289c"
    ]
  },
  "dd24": {
    "id": "dd24",
    "label": "distinctUntilChanged"
  },
  "00aa": {
    "id": "00aa",
    "label": "distinct"
  },
  "d09b": {
    "id": "d09b",
    "label": "emitted some time in the past",
    "options": [
      "00aa"
    ]
  },
  "5fc4": {
    "id": "5fc4",
    "label": "according to value equality",
    "options": [
      "8400",
      "d09b"
    ]
  },
  "4b41": {
    "id": "4b41",
    "label": "distinctUntilKeyChanged"
  },
  "8a35": {
    "id": "8a35",
    "label": "emitted just before the current value",
    "options": [
      "4b41"
    ]
  },
  "166f": {
    "id": "166f",
    "label": "that match some previous value",
    "options": [
      "5fc4",
      "2697"
    ]
  },
  "3fc6": {
    "id": "3fc6",
    "label": "throttle"
  },
  "bca6": {
    "id": "bca6",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3fc6"
    ]
  },
  "e82e": {
    "id": "e82e",
    "label": "throttleTime"
  },
  "5e21": {
    "id": "5e21",
    "label": "by emitting the first value in each time window",
    "options": [
      "bca6",
      "8974"
    ]
  },
  "0d78": {
    "id": "0d78",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3524"
    ]
  },
  "0a7e": {
    "id": "0a7e",
    "label": "by emitting the last value in each time window",
    "options": [
      "0d78",
      "2538"
    ]
  },
  "c44f": {
    "id": "c44f",
    "label": "debounce"
  },
  "a8ea": {
    "id": "a8ea",
    "label": "debounceTime"
  },
  "522b": {
    "id": "522b",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "a8ea"
    ]
  },
  "f4cf": {
    "id": "f4cf",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "8671",
      "522b"
    ]
  },
  "55d3": {
    "id": "55d3",
    "label": "that occur too frequently",
    "options": [
      "5e21",
      "0a7e",
      "f4cf"
    ]
  },
  "0999": {
    "id": "0999",
    "label": "I want to ignore values",
    "options": [
      "b9f4",
      "f6b7",
      "0962",
      "7b26",
      "166f",
      "55d3"
    ]
  },
  "c5bc": {
    "id": "c5bc",
    "label": "reduce"
  },
  "c620": {
    "id": "c620",
    "label": "and only output the final computed value",
    "options": [
      "c5bc"
    ]
  },
  "e2dd": {
    "id": "e2dd",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "8585"
    ]
  },
  "cef5": {
    "id": "cef5",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "2288"
    ]
  },
  "223b": {
    "id": "223b",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "c620",
      "e2dd",
      "cef5"
    ]
  },
  "8dca": {
    "id": "8dca",
    "label": "timeInterval"
  },
  "c8db": {
    "id": "c8db",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "8dca"
    ]
  },
  "a69d": {
    "id": "a69d",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "5065",
      "c8db"
    ]
  },
  "d265": {
    "id": "d265",
    "label": "timeout"
  },
  "d835": {
    "id": "d835",
    "label": "I want to throw an error",
    "options": [
      "d265"
    ]
  },
  "0a71": {
    "id": "0a71",
    "label": "timeoutWith"
  },
  "c38c": {
    "id": "c38c",
    "label": "I want to switch to another Observable",
    "options": [
      "0a71"
    ]
  },
  "4b92": {
    "id": "4b92",
    "label": "after a period of inactivity",
    "options": [
      "d835",
      "c38c"
    ]
  },
  "2c7b": {
    "id": "2c7b",
    "label": "I want to ensure there is only one value",
    "options": [
      "2897"
    ]
  },
  "d4d4": {
    "id": "d4d4",
    "label": "count"
  },
  "71ee": {
    "id": "71ee",
    "label": "I want to know how many values it emits",
    "options": [
      "d4d4"
    ]
  },
  "c9d3": {
    "id": "c9d3",
    "label": "startWith"
  },
  "ac0c": {
    "id": "ac0c",
    "label": "I want to prepend one value",
    "options": [
      "c9d3"
    ]
  },
  "2dea": {
    "id": "2dea",
    "label": "delay"
  },
  "72dc": {
    "id": "72dc",
    "label": "based on a given amount of time",
    "options": [
      "2dea"
    ]
  },
  "0a3d": {
    "id": "0a3d",
    "label": "delayWhen"
  },
  "be7b": {
    "id": "be7b",
    "label": "based on the emissions of another Observable",
    "options": [
      "0a3d"
    ]
  },
  "5b86": {
    "id": "5b86",
    "label": "I want to delay the emissions",
    "options": [
      "72dc",
      "be7b"
    ]
  },
  "85ea": {
    "id": "85ea",
    "label": "toArray"
  },
  "f668": {
    "id": "f668",
    "label": "and convert to an array",
    "options": [
      "85ea"
    ]
  },
  "6ba7": {
    "id": "6ba7",
    "label": "Observable",
    "method": "toPromise"
  },
  "b4eb": {
    "id": "b4eb",
    "label": "and convert to a Promise",
    "options": [
      "6ba7"
    ]
  },
  "cf28": {
    "id": "cf28",
    "label": "until the Observable completes",
    "options": [
      "f668",
      "b4eb"
    ]
  },
  "fa29": {
    "id": "fa29",
    "label": "pairwise"
  },
  "b439": {
    "id": "b439",
    "label": "partition"
  },
  "b754": {
    "id": "b754",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "b439"
    ]
  },
  "ad91": {
    "id": "ad91",
    "label": "bufferCount"
  },
  "58c8": {
    "id": "58c8",
    "label": "and emit the group as an array",
    "options": [
      "ad91"
    ]
  },
  "5cc0": {
    "id": "5cc0",
    "label": "windowCount"
  },
  "4aaa": {
    "id": "4aaa",
    "label": "in batches of a particular size",
    "options": [
      "58c8",
      "4180"
    ]
  },
  "097c": {
    "id": "097c",
    "label": "bufferTime"
  },
  "ccdb": {
    "id": "ccdb",
    "label": "and emit the group as an array",
    "options": [
      "097c"
    ]
  },
  "50ad": {
    "id": "50ad",
    "label": "windowTime"
  },
  "cfd0": {
    "id": "cfd0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "50ad"
    ]
  },
  "2fb2": {
    "id": "2fb2",
    "label": "based on time",
    "options": [
      "ccdb",
      "cfd0"
    ]
  },
  "b3ee": {
    "id": "b3ee",
    "label": "buffer"
  },
  "7eee": {
    "id": "7eee",
    "label": "and emit the group as an array",
    "options": [
      "b3ee"
    ]
  },
  "59b1": {
    "id": "59b1",
    "label": "window"
  },
  "b087": {
    "id": "b087",
    "label": "and emit the group as a nested Observable",
    "options": [
      "59b1"
    ]
  },
  "0692": {
    "id": "0692",
    "label": "until another Observable emits",
    "options": [
      "7eee",
      "b087"
    ]
  },
  "ba69": {
    "id": "ba69",
    "label": "bufferWhen"
  },
  "e154": {
    "id": "e154",
    "label": "and emit the group as an array",
    "options": [
      "ba69"
    ]
  },
  "64ae": {
    "id": "64ae",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8185"
    ]
  },
  "8ccb": {
    "id": "8ccb",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "e154",
      "64ae"
    ]
  },
  "95de": {
    "id": "95de",
    "label": "bufferToggle"
  },
  "a7a5": {
    "id": "a7a5",
    "label": "and emit the group as an array",
    "options": [
      "95de"
    ]
  },
  "06d9": {
    "id": "06d9",
    "label": "windowToggle"
  },
  "c59f": {
    "id": "c59f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "06d9"
    ]
  },
  "512a": {
    "id": "512a",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "a7a5",
      "c59f"
    ]
  },
  "e04c": {
    "id": "e04c",
    "label": "groupBy"
  },
  "0d67": {
    "id": "0d67",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "e04c"
    ]
  },
  "16c5": {
    "id": "16c5",
    "label": "mergeMapTo"
  },
  "845a": {
    "id": "845a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "16c5"
    ]
  },
  "13bd": {
    "id": "13bd",
    "label": "mergeMap"
  },
  "1f53": {
    "id": "1f53",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "13bd"
    ]
  },
  "f6cf": {
    "id": "f6cf",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "845a",
      "1f53"
    ]
  },
  "28e4": {
    "id": "28e4",
    "label": "concatMapTo"
  },
  "89e7": {
    "id": "89e7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "28e4"
    ]
  },
  "c79d": {
    "id": "c79d",
    "label": "concatMap"
  },
  "26cf": {
    "id": "26cf",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "89e7",
      "6512"
    ]
  },
  "c8f6": {
    "id": "c8f6",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2995"
    ]
  },
  "ff41": {
    "id": "ff41",
    "label": "switchMap"
  },
  "7dff": {
    "id": "7dff",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "ff41"
    ]
  },
  "cfc2": {
    "id": "cfc2",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "c8f6",
      "7dff"
    ]
  },
  "77f1": {
    "id": "77f1",
    "label": "exhaustMap"
  },
  "d81a": {
    "id": "d81a",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "77f1"
    ]
  },
  "b4c7": {
    "id": "b4c7",
    "label": "expand"
  },
  "bad5": {
    "id": "bad5",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "b4c7"
    ]
  },
  "7e0a": {
    "id": "7e0a",
    "label": "pipe"
  },
  "47de": {
    "id": "47de",
    "label": "I want to perform custom operations",
    "options": [
      "7e0a"
    ]
  },
  "933c": {
    "id": "933c",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "7191"
    ]
  },
  "a49a": {
    "id": "a49a",
    "label": "publish"
  },
  "0c4c": {
    "id": "0c4c",
    "label": "and start it manually or imperatively",
    "options": [
      "a49a"
    ]
  },
  "c687": {
    "id": "c687",
    "label": "using a conventional Subject",
    "options": [
      "933c",
      "0c4c"
    ]
  },
  "2eb0": {
    "id": "2eb0",
    "label": "publishBehavior"
  },
  "1c25": {
    "id": "1c25",
    "label": "using a BehaviorSubject",
    "options": [
      "2eb0"
    ]
  },
  "dba6": {
    "id": "dba6",
    "label": "using a ReplaySubject",
    "options": [
      "4462"
    ]
  },
  "aa44": {
    "id": "aa44",
    "label": "using an AsyncSubject",
    "options": [
      "4264"
    ]
  },
  "f43e": {
    "id": "f43e",
    "label": "multicast"
  },
  "c888": {
    "id": "c888",
    "label": "using a specific subject implementation",
    "options": [
      "f43e"
    ]
  },
  "c367": {
    "id": "c367",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "c687",
      "1c25",
      "dba6",
      "aa44",
      "c888"
    ]
  },
  "76e8": {
    "id": "76e8",
    "label": "catchError"
  },
  "82a7": {
    "id": "82a7",
    "label": "I want to start a new Observable",
    "options": [
      "76e8"
    ]
  },
  "b9c8": {
    "id": "b9c8",
    "label": "retry"
  },
  "0df4": {
    "id": "0df4",
    "label": "immediately",
    "options": [
      "b9c8"
    ]
  },
  "fac9": {
    "id": "fac9",
    "label": "retryWhen"
  },
  "10b8": {
    "id": "10b8",
    "label": "when another Observable emits",
    "options": [
      "fac9"
    ]
  },
  "590a": {
    "id": "590a",
    "label": "I want to re-subscribe",
    "options": [
      "0df4",
      "10b8"
    ]
  },
  "1f15": {
    "id": "1f15",
    "label": "repeat"
  },
  "da95": {
    "id": "da95",
    "label": "immediately",
    "options": [
      "1f15"
    ]
  },
  "21eb": {
    "id": "21eb",
    "label": "repeatWhen"
  },
  "6c85": {
    "id": "6c85",
    "label": "when another Observable emits",
    "options": [
      "21eb"
    ]
  },
  "5d7d": {
    "id": "5d7d",
    "label": "I want to re-subscribe",
    "options": [
      "da95",
      "6c85"
    ]
  },
  "4a4c": {
    "id": "4a4c",
    "label": "concat"
  },
  "0474": {
    "id": "0474",
    "label": "when it completes",
    "options": [
      "5d7d",
      "2289"
    ]
  },
  "7ead": {
    "id": "7ead",
    "label": "finalize"
  },
  "0d07": {
    "id": "0d07",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "7ead"
    ]
  },
  "99f0": {
    "id": "99f0",
    "label": "subscribeOn"
  },
  "f454": {
    "id": "f454",
    "label": "that routes values to observers",
    "options": [
      "9236"
    ]
  },
  "52f1": {
    "id": "52f1",
    "label": "I want to change the scheduler",
    "options": [
      "1316",
      "f454"
    ]
  },
  "c3a2": {
    "id": "c3a2",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "7910"
    ]
  },
  "e701": {
    "id": "e701",
    "label": "merge"
  },
  "5b8e": {
    "id": "5b8e",
    "label": "I want to output the values from either of them",
    "options": [
      "e701"
    ]
  },
  "50a1": {
    "id": "50a1",
    "label": "combineLatest"
  },
  "73c4": {
    "id": "73c4",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "50a1"
    ]
  },
  "23cb": {
    "id": "23cb",
    "label": "withLatestFrom"
  },
  "4d57": {
    "id": "4d57",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "23cb"
    ]
  },
  "b0b9": {
    "id": "b0b9",
    "label": "zip"
  },
  "3e84": {
    "id": "3e84",
    "label": "using each source value only once",
    "options": [
      "b0b9"
    ]
  },
  "06b1": {
    "id": "06b1",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "73c4",
      "4d57",
      "3e84"
    ]
  },
  "dbdd": {
    "id": "dbdd",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "c3a2",
      "5b8e",
      "06b1"
    ]
  },
  "a298": {
    "id": "a298",
    "label": "I have one existing Observable, and",
    "options": [
      "d584",
      "9126",
      "8ff6",
      "6a05",
      "0999",
      "223b",
      "a69d",
      "4b92",
      "2c7b",
      "71ee",
      "ac0c",
      "5b86",
      "2159",
      "1280",
      "47de",
      "c367",
      "9722",
      "0474",
      "0d07",
      "52f1",
      "dbdd"
    ]
  },
  "e444": {
    "id": "e444",
    "label": "race"
  },
  "173a": {
    "id": "173a",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "e444"
    ]
  },
  "ae01": {
    "id": "ae01",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "3713"
    ]
  },
  "2c05": {
    "id": "2c05",
    "label": "merge"
  },
  "6e53": {
    "id": "6e53",
    "label": "I want to output the values from either of them",
    "options": [
      "2c05"
    ]
  },
  "2f4b": {
    "id": "2f4b",
    "label": "combineLatest"
  },
  "11cd": {
    "id": "11cd",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2f4b"
    ]
  },
  "ba68": {
    "id": "ba68",
    "label": "zip"
  },
  "54cf": {
    "id": "54cf",
    "label": "using each source value only once",
    "options": [
      "ba68"
    ]
  },
  "19c3": {
    "id": "19c3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "11cd",
      "54cf"
    ]
  },
  "cf50": {
    "id": "cf50",
    "label": "I want to subscribe to each in order",
    "options": [
      "1310"
    ]
  },
  "30fc": {
    "id": "30fc",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "173a",
      "ae01",
      "6e53",
      "19c3",
      "cf50"
    ]
  },
  "88e3": {
    "id": "88e3",
    "label": "Observable",
    "method": "create"
  },
  "bdf7": {
    "id": "bdf7",
    "label": "using custom logic",
    "options": [
      "88e3"
    ]
  },
  "fda1": {
    "id": "fda1",
    "label": "generate"
  },
  "3de3": {
    "id": "3de3",
    "label": "using a state machine similar to a for loop",
    "options": [
      "fda1"
    ]
  },
  "190a": {
    "id": "190a",
    "label": "throwError"
  },
  "3b77": {
    "id": "3b77",
    "label": "that throws an error",
    "options": [
      "190a"
    ]
  },
  "30b4": {
    "id": "30b4",
    "label": "EMPTY"
  },
  "6bd7": {
    "id": "6bd7",
    "label": "that just completes, without emitting values",
    "options": [
      "30b4"
    ]
  },
  "e649": {
    "id": "e649",
    "label": "NEVER"
  },
  "15f0": {
    "id": "15f0",
    "label": "that never emits anything",
    "options": [
      "e649"
    ]
  },
  "dcf9": {
    "id": "dcf9",
    "label": "fromEvent"
  },
  "462b": {
    "id": "462b",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "dcf9"
    ]
  },
  "5dc7": {
    "id": "5dc7",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "3025"
    ]
  },
  "8d22": {
    "id": "8d22",
    "label": "from an existing source of events",
    "options": [
      "462b",
      "5dc7"
    ]
  },
  "8b2d": {
    "id": "8b2d",
    "label": "from a Promise or an event source",
    "options": [
      "3677"
    ]
  },
  "c31a": {
    "id": "c31a",
    "label": "from"
  },
  "4e74": {
    "id": "4e74",
    "label": "over the values in an array",
    "options": [
      "c31a"
    ]
  },
  "1cd3": {
    "id": "1cd3",
    "label": "range"
  },
  "aaa3": {
    "id": "aaa3",
    "label": "over values in a numeric range",
    "options": [
      "1cd3"
    ]
  },
  "bc17": {
    "id": "bc17",
    "label": "over prefined values given as arguments",
    "options": [
      "5809"
    ]
  },
  "c633": {
    "id": "c633",
    "label": "that iterates",
    "options": [
      "4e74",
      "aaa3",
      "bc17"
    ]
  },
  "530f": {
    "id": "530f",
    "label": "interval"
  },
  "ac51": {
    "id": "ac51",
    "label": "regularly",
    "options": [
      "530f"
    ]
  },
  "7ebf": {
    "id": "7ebf",
    "label": "timer"
  },
  "db33": {
    "id": "db33",
    "label": "with an optional initial delay",
    "options": [
      "7ebf"
    ]
  },
  "fd6d": {
    "id": "fd6d",
    "label": "that emits values on a timer",
    "options": [
      "ac51",
      "db33"
    ]
  },
  "c89e": {
    "id": "c89e",
    "label": "defer"
  },
  "783f": {
    "id": "783f",
    "label": "which is built on demand when subscribed",
    "options": [
      "c89e"
    ]
  },
  "96ff": {
    "id": "96ff",
    "label": "I want to create a new Observable",
    "options": [
      "bdf7",
      "3de3",
      "3b77",
      "6bd7",
      "15f0",
      "8d22",
      "8b2d",
      "c633",
      "fd6d",
      "783f"
    ]
  },
  "add9": {
    "id": "add9",
    "label": "bindCallback"
  },
  "00cc": {
    "id": "00cc",
    "label": "supporting a conventional callback API",
    "options": [
      "add9"
    ]
  },
  "8ea2": {
    "id": "8ea2",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "00cc",
      "9283"
    ]
  },
  "cf11": {
    "id": "cf11",
    "label": "I have no Observables yet, and",
    "options": [
      "96ff",
      "8ea2"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "a298",
      "30fc",
      "cf11"
    ]
  }
}