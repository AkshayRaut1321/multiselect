{
  "1625": {
    "id": "1625",
    "label": "reduce"
  },
  "1947": {
    "id": "1947",
    "label": "based on time",
    "options": [
      "59cd",
      "31ec"
    ]
  },
  "1971": {
    "id": "1971",
    "label": "and convert to a Promise",
    "options": [
      "c6d9"
    ]
  },
  "2503": {
    "id": "2503",
    "label": "throttle"
  },
  "2683": {
    "id": "2683",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "ee6f"
    ]
  },
  "2800": {
    "id": "2800",
    "label": "I want to allow some values to pass",
    "options": [
      "e77a",
      "650e",
      "25bc",
      "93bd",
      "d738"
    ]
  },
  "2856": {
    "id": "2856",
    "label": "combineLatest"
  },
  "3245": {
    "id": "3245",
    "label": "I want to subscribe to each in order",
    "options": [
      "ddb7"
    ]
  },
  "3279": {
    "id": "3279",
    "label": "bufferCount"
  },
  "3328": {
    "id": "3328",
    "label": "based on a given amount of time",
    "options": [
      "07fd"
    ]
  },
  "3850": {
    "id": "3850",
    "label": "according to a key or object property",
    "options": [
      "dc76"
    ]
  },
  "3856": {
    "id": "3856",
    "label": "I have no Observables yet, and",
    "options": [
      "269e",
      "ffc3"
    ]
  },
  "4270": {
    "id": "4270",
    "label": "window"
  },
  "4680": {
    "id": "4680",
    "label": "debounceTime"
  },
  "5524": {
    "id": "5524",
    "label": "race"
  },
  "5978": {
    "id": "5978",
    "label": "I want to delay the emissions",
    "options": [
      "3328",
      "3b2c"
    ]
  },
  "6707": {
    "id": "6707",
    "label": "regularly",
    "options": [
      "f128"
    ]
  },
  "7195": {
    "id": "7195",
    "label": "filter"
  },
  "7541": {
    "id": "7541",
    "label": "immediately",
    "options": [
      "a357"
    ]
  },
  "7817": {
    "id": "7817",
    "label": "I want to change the scheduler",
    "options": [
      "754c",
      "cffd"
    ]
  },
  "8094": {
    "id": "8094",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "aa1b",
      "241e"
    ]
  },
  "8281": {
    "id": "8281",
    "label": "delayWhen"
  },
  "8283": {
    "id": "8283",
    "label": "repeat"
  },
  "8385": {
    "id": "8385",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "5fef"
    ]
  },
  "8477": {
    "id": "8477",
    "label": "using a conventional Subject",
    "options": [
      "5c83",
      "9603"
    ]
  },
  "8959": {
    "id": "8959",
    "label": "groupBy"
  },
  "9398": {
    "id": "9398",
    "label": "that throws an error",
    "options": [
      "c5d9"
    ]
  },
  "9603": {
    "id": "9603",
    "label": "and start it manually or imperatively",
    "options": [
      "94a6"
    ]
  },
  "9853": {
    "id": "9853",
    "label": "partition"
  },
  "9884": {
    "id": "9884",
    "label": "over values in a numeric range",
    "options": [
      "5cc0"
    ]
  },
  "e8c6": {
    "id": "e8c6",
    "label": "mapTo"
  },
  "63b7": {
    "id": "63b7",
    "label": "to be a constant value",
    "options": [
      "e8c6"
    ]
  },
  "ea0d": {
    "id": "ea0d",
    "label": "map"
  },
  "6a2a": {
    "id": "6a2a",
    "label": "to be a value calculated through a formula",
    "options": [
      "ea0d"
    ]
  },
  "54ad": {
    "id": "54ad",
    "label": "I want to change each emitted value",
    "options": [
      "63b7",
      "6a2a"
    ]
  },
  "e1c3": {
    "id": "e1c3",
    "label": "pluck"
  },
  "c6b8": {
    "id": "c6b8",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "e1c3"
    ]
  },
  "7a24": {
    "id": "7a24",
    "label": "tap"
  },
  "264e": {
    "id": "264e",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "7a24"
    ]
  },
  "e77a": {
    "id": "e77a",
    "label": "based on custom logic",
    "options": [
      "7195"
    ]
  },
  "53c3": {
    "id": "53c3",
    "label": "first"
  },
  "48f7": {
    "id": "48f7",
    "label": "and only the first value",
    "options": [
      "53c3"
    ]
  },
  "8ce6": {
    "id": "8ce6",
    "label": "take"
  },
  "e07e": {
    "id": "e07e",
    "label": "based on a given amount",
    "options": [
      "8ce6"
    ]
  },
  "3d99": {
    "id": "3d99",
    "label": "takeWhile"
  },
  "75d9": {
    "id": "75d9",
    "label": "based on custom logic",
    "options": [
      "3d99"
    ]
  },
  "650e": {
    "id": "650e",
    "label": "if they are at the start of the Observable",
    "options": [
      "48f7",
      "e07e",
      "75d9"
    ]
  },
  "a8ae": {
    "id": "a8ae",
    "label": "elementAt"
  },
  "25bc": {
    "id": "25bc",
    "label": "if they are exactly the n-th emission",
    "options": [
      "a8ae"
    ]
  },
  "1d66": {
    "id": "1d66",
    "label": "last"
  },
  "4b92": {
    "id": "4b92",
    "label": "and only the last value",
    "options": [
      "1d66"
    ]
  },
  "542e": {
    "id": "542e",
    "label": "takeLast"
  },
  "1eb7": {
    "id": "1eb7",
    "label": "based on a given amount",
    "options": [
      "542e"
    ]
  },
  "93bd": {
    "id": "93bd",
    "label": "if they are at the end of the Observable",
    "options": [
      "4b92",
      "1eb7"
    ]
  },
  "5b36": {
    "id": "5b36",
    "label": "takeUntil"
  },
  "d738": {
    "id": "d738",
    "label": "until another Observable emits a value",
    "options": [
      "5b36"
    ]
  },
  "4f16": {
    "id": "4f16",
    "label": "ignoreElements"
  },
  "ff0e": {
    "id": "ff0e",
    "label": "altogether",
    "options": [
      "4f16"
    ]
  },
  "73a2": {
    "id": "73a2",
    "label": "skip"
  },
  "1a0d": {
    "id": "1a0d",
    "label": "based on a given amount",
    "options": [
      "73a2"
    ]
  },
  "ade1": {
    "id": "ade1",
    "label": "skipWhile"
  },
  "c3a8": {
    "id": "c3a8",
    "label": "based on custom logic",
    "options": [
      "ade1"
    ]
  },
  "0041": {
    "id": "0041",
    "label": "from the start of the Observable",
    "options": [
      "1a0d",
      "c3a8"
    ]
  },
  "e333": {
    "id": "e333",
    "label": "skipLast"
  },
  "aaa3": {
    "id": "aaa3",
    "label": "from the end of the Observable",
    "options": [
      "e333"
    ]
  },
  "2d22": {
    "id": "2d22",
    "label": "skipUntil"
  },
  "e785": {
    "id": "e785",
    "label": "until another Observable emits a value",
    "options": [
      "2d22"
    ]
  },
  "80c7": {
    "id": "80c7",
    "label": "distinctUntilChanged"
  },
  "e1ab": {
    "id": "e1ab",
    "label": "emitted just before the current value",
    "options": [
      "80c7"
    ]
  },
  "e8ba": {
    "id": "e8ba",
    "label": "distinct"
  },
  "de03": {
    "id": "de03",
    "label": "emitted some time in the past",
    "options": [
      "e8ba"
    ]
  },
  "48f8": {
    "id": "48f8",
    "label": "according to value equality",
    "options": [
      "e1ab",
      "de03"
    ]
  },
  "f64f": {
    "id": "f64f",
    "label": "distinctUntilKeyChanged"
  },
  "dc76": {
    "id": "dc76",
    "label": "emitted just before the current value",
    "options": [
      "f64f"
    ]
  },
  "f7d4": {
    "id": "f7d4",
    "label": "that match some previous value",
    "options": [
      "48f8",
      "3850"
    ]
  },
  "38ca": {
    "id": "38ca",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "2503"
    ]
  },
  "4f0a": {
    "id": "4f0a",
    "label": "throttleTime"
  },
  "709f": {
    "id": "709f",
    "label": "where time windows are determined by a time duration",
    "options": [
      "4f0a"
    ]
  },
  "efe6": {
    "id": "efe6",
    "label": "by emitting the first value in each time window",
    "options": [
      "38ca",
      "709f"
    ]
  },
  "fe34": {
    "id": "fe34",
    "label": "audit"
  },
  "dfc2": {
    "id": "dfc2",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "fe34"
    ]
  },
  "f03e": {
    "id": "f03e",
    "label": "auditTime"
  },
  "51ca": {
    "id": "51ca",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f03e"
    ]
  },
  "d781": {
    "id": "d781",
    "label": "by emitting the last value in each time window",
    "options": [
      "dfc2",
      "51ca"
    ]
  },
  "370d": {
    "id": "370d",
    "label": "debounce"
  },
  "75b7": {
    "id": "75b7",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "370d"
    ]
  },
  "5ad3": {
    "id": "5ad3",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "4680"
    ]
  },
  "2ef2": {
    "id": "2ef2",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "75b7",
      "5ad3"
    ]
  },
  "b639": {
    "id": "b639",
    "label": "that occur too frequently",
    "options": [
      "efe6",
      "d781",
      "2ef2"
    ]
  },
  "2ef0": {
    "id": "2ef0",
    "label": "I want to ignore values",
    "options": [
      "ff0e",
      "0041",
      "aaa3",
      "e785",
      "f7d4",
      "b639"
    ]
  },
  "fc94": {
    "id": "fc94",
    "label": "and only output the final computed value",
    "options": [
      "1625"
    ]
  },
  "bc85": {
    "id": "bc85",
    "label": "scan"
  },
  "ff87": {
    "id": "ff87",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "bc85"
    ]
  },
  "8dad": {
    "id": "8dad",
    "label": "mergeScan"
  },
  "5c1d": {
    "id": "5c1d",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "8dad"
    ]
  },
  "a734": {
    "id": "a734",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "fc94",
      "ff87",
      "5c1d"
    ]
  },
  "37d6": {
    "id": "37d6",
    "label": "materialize"
  },
  "aa1b": {
    "id": "aa1b",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "37d6"
    ]
  },
  "2d17": {
    "id": "2d17",
    "label": "timeInterval"
  },
  "241e": {
    "id": "241e",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "2d17"
    ]
  },
  "68e7": {
    "id": "68e7",
    "label": "timeout"
  },
  "2bd5": {
    "id": "2bd5",
    "label": "I want to throw an error",
    "options": [
      "68e7"
    ]
  },
  "2a9f": {
    "id": "2a9f",
    "label": "timeoutWith"
  },
  "37c3": {
    "id": "37c3",
    "label": "I want to switch to another Observable",
    "options": [
      "2a9f"
    ]
  },
  "0a7f": {
    "id": "0a7f",
    "label": "after a period of inactivity",
    "options": [
      "2bd5",
      "37c3"
    ]
  },
  "f355": {
    "id": "f355",
    "label": "single"
  },
  "81cb": {
    "id": "81cb",
    "label": "I want to ensure there is only one value",
    "options": [
      "f355"
    ]
  },
  "eeed": {
    "id": "eeed",
    "label": "count"
  },
  "9b97": {
    "id": "9b97",
    "label": "I want to know how many values it emits",
    "options": [
      "eeed"
    ]
  },
  "09fc": {
    "id": "09fc",
    "label": "startWith"
  },
  "86c9": {
    "id": "86c9",
    "label": "I want to prepend one value",
    "options": [
      "09fc"
    ]
  },
  "07fd": {
    "id": "07fd",
    "label": "delay"
  },
  "3b2c": {
    "id": "3b2c",
    "label": "based on the emissions of another Observable",
    "options": [
      "8281"
    ]
  },
  "64f7": {
    "id": "64f7",
    "label": "toArray"
  },
  "2c49": {
    "id": "2c49",
    "label": "and convert to an array",
    "options": [
      "64f7"
    ]
  },
  "c6d9": {
    "id": "c6d9",
    "label": "Observable",
    "method": "toPromise"
  },
  "40ae": {
    "id": "40ae",
    "label": "until the Observable completes",
    "options": [
      "2c49",
      "1971"
    ]
  },
  "dfa2": {
    "id": "dfa2",
    "label": "pairwise"
  },
  "0739": {
    "id": "0739",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "dfa2"
    ]
  },
  "0500": {
    "id": "0500",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "9853"
    ]
  },
  "339e": {
    "id": "339e",
    "label": "and emit the group as an array",
    "options": [
      "3279"
    ]
  },
  "05d9": {
    "id": "05d9",
    "label": "windowCount"
  },
  "0d9b": {
    "id": "0d9b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "05d9"
    ]
  },
  "ce35": {
    "id": "ce35",
    "label": "in batches of a particular size",
    "options": [
      "339e",
      "0d9b"
    ]
  },
  "c4cf": {
    "id": "c4cf",
    "label": "bufferTime"
  },
  "59cd": {
    "id": "59cd",
    "label": "and emit the group as an array",
    "options": [
      "c4cf"
    ]
  },
  "fec2": {
    "id": "fec2",
    "label": "windowTime"
  },
  "31ec": {
    "id": "31ec",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fec2"
    ]
  },
  "8d62": {
    "id": "8d62",
    "label": "buffer"
  },
  "364e": {
    "id": "364e",
    "label": "and emit the group as an array",
    "options": [
      "8d62"
    ]
  },
  "a3aa": {
    "id": "a3aa",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4270"
    ]
  },
  "82e5": {
    "id": "82e5",
    "label": "until another Observable emits",
    "options": [
      "364e",
      "a3aa"
    ]
  },
  "e105": {
    "id": "e105",
    "label": "bufferWhen"
  },
  "4a18": {
    "id": "4a18",
    "label": "and emit the group as an array",
    "options": [
      "e105"
    ]
  },
  "4b01": {
    "id": "4b01",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "3c78"
    ]
  },
  "5bcc": {
    "id": "5bcc",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4b01"
    ]
  },
  "e7f1": {
    "id": "e7f1",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "4a18",
      "5bcc"
    ]
  },
  "0435": {
    "id": "0435",
    "label": "bufferToggle"
  },
  "c5fa": {
    "id": "c5fa",
    "label": "and emit the group as an array",
    "options": [
      "0435"
    ]
  },
  "8c11": {
    "id": "8c11",
    "label": "windowToggle"
  },
  "4f93": {
    "id": "4f93",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8c11"
    ]
  },
  "3f5c": {
    "id": "3f5c",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "c5fa",
      "4f93"
    ]
  },
  "f317": {
    "id": "f317",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "8959"
    ]
  },
  "b3ba": {
    "id": "b3ba",
    "label": "I want to group the values",
    "options": [
      "40ae",
      "0739",
      "0500",
      "ce35",
      "1947",
      "82e5",
      "e7f1",
      "3f5c",
      "f317"
    ]
  },
  "49ac": {
    "id": "49ac",
    "label": "mergeMapTo"
  },
  "34d1": {
    "id": "34d1",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "49ac"
    ]
  },
  "edcb": {
    "id": "edcb",
    "label": "mergeMap"
  },
  "42f8": {
    "id": "42f8",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "edcb"
    ]
  },
  "cb34": {
    "id": "cb34",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "34d1",
      "42f8"
    ]
  },
  "30f2": {
    "id": "30f2",
    "label": "concatMapTo"
  },
  "84f4": {
    "id": "84f4",
    "label": "using a ReplaySubject",
    "options": [
      "830a"
    ]
  },
  "504f": {
    "id": "504f",
    "label": "concatMap"
  },
  "ea21": {
    "id": "ea21",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "504f"
    ]
  },
  "d6a8": {
    "id": "d6a8",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "84f4",
      "ea21"
    ]
  },
  "21d5": {
    "id": "21d5",
    "label": "switchMapTo"
  },
  "ef55": {
    "id": "ef55",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "21d5"
    ]
  },
  "c7c4": {
    "id": "c7c4",
    "label": "switchMap"
  },
  "3ff2": {
    "id": "3ff2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c7c4"
    ]
  },
  "89b7": {
    "id": "89b7",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "ef55",
      "3ff2"
    ]
  },
  "2a34": {
    "id": "2a34",
    "label": "exhaustMap"
  },
  "0589": {
    "id": "0589",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "2a34"
    ]
  },
  "5fef": {
    "id": "5fef",
    "label": "expand"
  },
  "f037": {
    "id": "f037",
    "label": "I want to start a new Observable for each value",
    "options": [
      "cb34",
      "d6a8",
      "89b7",
      "0589",
      "8385"
    ]
  },
  "03d7": {
    "id": "03d7",
    "label": "pipe"
  },
  "9ece": {
    "id": "9ece",
    "label": "I want to perform custom operations",
    "options": [
      "03d7"
    ]
  },
  "f3a5": {
    "id": "f3a5",
    "label": "share"
  },
  "5c83": {
    "id": "5c83",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "f3a5"
    ]
  },
  "94a6": {
    "id": "94a6",
    "label": "publish"
  },
  "ef9f": {
    "id": "ef9f",
    "label": "publishBehavior"
  },
  "3d02": {
    "id": "3d02",
    "label": "using a BehaviorSubject",
    "options": [
      "ef9f"
    ]
  },
  "830a": {
    "id": "830a",
    "label": "publishReplay"
  },
  "91e0": {
    "id": "91e0",
    "label": "publishLast"
  },
  "a8d1": {
    "id": "a8d1",
    "label": "using an AsyncSubject",
    "options": [
      "91e0"
    ]
  },
  "be1b": {
    "id": "be1b",
    "label": "multicast"
  },
  "4a3b": {
    "id": "4a3b",
    "label": "using a specific subject implementation",
    "options": [
      "be1b"
    ]
  },
  "c100": {
    "id": "c100",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "8477",
      "3d02",
      "84f4",
      "a8d1",
      "4a3b"
    ]
  },
  "a2a6": {
    "id": "a2a6",
    "label": "catchError"
  },
  "61db": {
    "id": "61db",
    "label": "I want to start a new Observable",
    "options": [
      "a2a6"
    ]
  },
  "a357": {
    "id": "a357",
    "label": "retry"
  },
  "2ee7": {
    "id": "2ee7",
    "label": "retryWhen"
  },
  "5bd0": {
    "id": "5bd0",
    "label": "when another Observable emits",
    "options": [
      "2ee7"
    ]
  },
  "1d49": {
    "id": "1d49",
    "label": "I want to re-subscribe",
    "options": [
      "7541",
      "5bd0"
    ]
  },
  "dea3": {
    "id": "dea3",
    "label": "when an error occurs",
    "options": [
      "61db",
      "1d49"
    ]
  },
  "07b9": {
    "id": "07b9",
    "label": "immediately",
    "options": [
      "8283"
    ]
  },
  "dd95": {
    "id": "dd95",
    "label": "repeatWhen"
  },
  "891c": {
    "id": "891c",
    "label": "when another Observable emits",
    "options": [
      "dd95"
    ]
  },
  "90cc": {
    "id": "90cc",
    "label": "I want to re-subscribe",
    "options": [
      "07b9",
      "891c"
    ]
  },
  "f553": {
    "id": "f553",
    "label": "concat"
  },
  "3e6c": {
    "id": "3e6c",
    "label": "I want to start a new Observable",
    "options": [
      "f553"
    ]
  },
  "c6a0": {
    "id": "c6a0",
    "label": "when it completes",
    "options": [
      "90cc",
      "3e6c"
    ]
  },
  "8df0": {
    "id": "8df0",
    "label": "finalize"
  },
  "a051": {
    "id": "a051",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "8df0"
    ]
  },
  "f74e": {
    "id": "f74e",
    "label": "subscribeOn"
  },
  "754c": {
    "id": "754c",
    "label": "that routes calls to subscribe",
    "options": [
      "f74e"
    ]
  },
  "047c": {
    "id": "047c",
    "label": "observeOn"
  },
  "cffd": {
    "id": "cffd",
    "label": "that routes values to observers",
    "options": [
      "047c"
    ]
  },
  "c5a2": {
    "id": "c5a2",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "5524"
    ]
  },
  "50ad": {
    "id": "50ad",
    "label": "merge"
  },
  "bb29": {
    "id": "bb29",
    "label": "I want to output the values from either of them",
    "options": [
      "50ad"
    ]
  },
  "c382": {
    "id": "c382",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2856"
    ]
  },
  "aee3": {
    "id": "aee3",
    "label": "withLatestFrom"
  },
  "e669": {
    "id": "e669",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "aee3"
    ]
  },
  "7bc5": {
    "id": "7bc5",
    "label": "zip"
  },
  "7ee1": {
    "id": "7ee1",
    "label": "using each source value only once",
    "options": [
      "7bc5"
    ]
  },
  "0ce3": {
    "id": "0ce3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "c382",
      "e669",
      "7ee1"
    ]
  },
  "d19e": {
    "id": "d19e",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "c5a2",
      "bb29",
      "0ce3"
    ]
  },
  "ab90": {
    "id": "ab90",
    "label": "I have one existing Observable, and",
    "options": [
      "54ad",
      "c6b8",
      "264e",
      "2800",
      "2ef0",
      "a734",
      "8094",
      "0a7f",
      "81cb",
      "9b97",
      "86c9",
      "5978",
      "b3ba",
      "f037",
      "9ece",
      "c100",
      "dea3",
      "c6a0",
      "a051",
      "7817",
      "d19e"
    ]
  },
  "43c7": {
    "id": "43c7",
    "label": "race"
  },
  "762a": {
    "id": "762a",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "43c7"
    ]
  },
  "bcd2": {
    "id": "bcd2",
    "label": "forkJoin"
  },
  "79bc": {
    "id": "79bc",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "bcd2"
    ]
  },
  "ff88": {
    "id": "ff88",
    "label": "merge"
  },
  "0542": {
    "id": "0542",
    "label": "I want to output the values from either of them",
    "options": [
      "ff88"
    ]
  },
  "3c78": {
    "id": "3c78",
    "label": "combineLatest"
  },
  "5bb9": {
    "id": "5bb9",
    "label": "zip"
  },
  "b47d": {
    "id": "b47d",
    "label": "using each source value only once",
    "options": [
      "5bb9"
    ]
  },
  "ee15": {
    "id": "ee15",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "4b01",
      "b47d"
    ]
  },
  "ddb7": {
    "id": "ddb7",
    "label": "concat"
  },
  "d2f4": {
    "id": "d2f4",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "762a",
      "79bc",
      "0542",
      "ee15",
      "3245"
    ]
  },
  "698b": {
    "id": "698b",
    "label": "Observable",
    "method": "create"
  },
  "d3a9": {
    "id": "d3a9",
    "label": "using custom logic",
    "options": [
      "698b"
    ]
  },
  "ef49": {
    "id": "ef49",
    "label": "generate"
  },
  "743d": {
    "id": "743d",
    "label": "using a state machine similar to a for loop",
    "options": [
      "ef49"
    ]
  },
  "c5d9": {
    "id": "c5d9",
    "label": "throwError"
  },
  "616d": {
    "id": "616d",
    "label": "EMPTY"
  },
  "9d22": {
    "id": "9d22",
    "label": "that just completes, without emitting values",
    "options": [
      "616d"
    ]
  },
  "c256": {
    "id": "c256",
    "label": "NEVER"
  },
  "e2aa": {
    "id": "e2aa",
    "label": "that never emits anything",
    "options": [
      "c256"
    ]
  },
  "ee6f": {
    "id": "ee6f",
    "label": "fromEvent"
  },
  "a216": {
    "id": "a216",
    "label": "fromEventPattern"
  },
  "d726": {
    "id": "d726",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "a216"
    ]
  },
  "61f9": {
    "id": "61f9",
    "label": "from an existing source of events",
    "options": [
      "2683",
      "d726"
    ]
  },
  "b985": {
    "id": "b985",
    "label": "from"
  },
  "5b68": {
    "id": "5b68",
    "label": "from a Promise or an event source",
    "options": [
      "b985"
    ]
  },
  "dc70": {
    "id": "dc70",
    "label": "from"
  },
  "8ac3": {
    "id": "8ac3",
    "label": "over the values in an array",
    "options": [
      "dc70"
    ]
  },
  "5cc0": {
    "id": "5cc0",
    "label": "range"
  },
  "9f7a": {
    "id": "9f7a",
    "label": "of"
  },
  "9c1e": {
    "id": "9c1e",
    "label": "over prefined values given as arguments",
    "options": [
      "9f7a"
    ]
  },
  "6f2c": {
    "id": "6f2c",
    "label": "that iterates",
    "options": [
      "8ac3",
      "9884",
      "9c1e"
    ]
  },
  "f128": {
    "id": "f128",
    "label": "interval"
  },
  "94b0": {
    "id": "94b0",
    "label": "timer"
  },
  "c85c": {
    "id": "c85c",
    "label": "with an optional initial delay",
    "options": [
      "94b0"
    ]
  },
  "d198": {
    "id": "d198",
    "label": "that emits values on a timer",
    "options": [
      "6707",
      "c85c"
    ]
  },
  "201b": {
    "id": "201b",
    "label": "defer"
  },
  "a9e8": {
    "id": "a9e8",
    "label": "which is built on demand when subscribed",
    "options": [
      "201b"
    ]
  },
  "269e": {
    "id": "269e",
    "label": "I want to create a new Observable",
    "options": [
      "d3a9",
      "743d",
      "9398",
      "9d22",
      "e2aa",
      "61f9",
      "5b68",
      "6f2c",
      "d198",
      "a9e8"
    ]
  },
  "db26": {
    "id": "db26",
    "label": "bindCallback"
  },
  "5a5c": {
    "id": "5a5c",
    "label": "supporting a conventional callback API",
    "options": [
      "db26"
    ]
  },
  "5ef4": {
    "id": "5ef4",
    "label": "bindNodeCallback"
  },
  "997e": {
    "id": "997e",
    "label": "supporting Node.js callback style API",
    "options": [
      "5ef4"
    ]
  },
  "ffc3": {
    "id": "ffc3",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "5a5c",
      "997e"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ab90",
      "d2f4",
      "3856"
    ]
  }
}