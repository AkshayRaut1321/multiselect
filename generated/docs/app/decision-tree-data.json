{
  "1082": {
    "id": "1082",
    "label": "I want to start a new Observable",
    "options": [
      "e8ba"
    ]
  },
  "1360": {
    "id": "1360",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "06de"
    ]
  },
  "1889": {
    "id": "1889",
    "label": "using custom logic",
    "options": [
      "31d5"
    ]
  },
  "1897": {
    "id": "1897",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "62bb"
    ]
  },
  "1951": {
    "id": "1951",
    "label": "over values in a numeric range",
    "options": [
      "7d60"
    ]
  },
  "2081": {
    "id": "2081",
    "label": "timeInterval"
  },
  "2213": {
    "id": "2213",
    "label": "and only the last value",
    "options": [
      "e316"
    ]
  },
  "2337": {
    "id": "2337",
    "label": "based on a given amount",
    "options": [
      "9c7f"
    ]
  },
  "2454": {
    "id": "2454",
    "label": "I want to start a new Observable for each value",
    "options": [
      "d0f3",
      "601d",
      "eab4",
      "ff07",
      "998f"
    ]
  },
  "2536": {
    "id": "2536",
    "label": "based on time",
    "options": [
      "c6aa",
      "67ec"
    ]
  },
  "2607": {
    "id": "2607",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "1f16"
    ]
  },
  "3120": {
    "id": "3120",
    "label": "until the Observable completes",
    "options": [
      "d3ce",
      "a681"
    ]
  },
  "3340": {
    "id": "3340",
    "label": "skipUntil"
  },
  "3684": {
    "id": "3684",
    "label": "share"
  },
  "3788": {
    "id": "3788",
    "label": "throttle"
  },
  "4022": {
    "id": "4022",
    "label": "based on the emissions of another Observable",
    "options": [
      "5c49"
    ]
  },
  "4201": {
    "id": "4201",
    "label": "supporting a conventional callback API",
    "options": [
      "7c5f"
    ]
  },
  "4396": {
    "id": "4396",
    "label": "pluck"
  },
  "4841": {
    "id": "4841",
    "label": "from an existing source of events",
    "options": [
      "d988",
      "2607"
    ]
  },
  "5077": {
    "id": "5077",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "040f",
      "a4ef",
      "5858",
      "8510",
      "e16d"
    ]
  },
  "5091": {
    "id": "5091",
    "label": "based on custom logic",
    "options": [
      "52f3"
    ]
  },
  "5195": {
    "id": "5195",
    "label": "startWith"
  },
  "5548": {
    "id": "5548",
    "label": "and emit the group as an array",
    "options": [
      "1fcb"
    ]
  },
  "5858": {
    "id": "5858",
    "label": "using a ReplaySubject",
    "options": [
      "96af"
    ]
  },
  "6186": {
    "id": "6186",
    "label": "groupBy"
  },
  "6417": {
    "id": "6417",
    "label": "reduce"
  },
  "6543": {
    "id": "6543",
    "label": "I want to re-subscribe",
    "options": [
      "daf6",
      "b2d8"
    ]
  },
  "6620": {
    "id": "6620",
    "label": "and emit the group as a nested Observable",
    "options": [
      "321a"
    ]
  },
  "6647": {
    "id": "6647",
    "label": "repeatWhen"
  },
  "6927": {
    "id": "6927",
    "label": "concat"
  },
  "6939": {
    "id": "6939",
    "label": "I want to re-subscribe",
    "options": [
      "f4d1",
      "edfc"
    ]
  },
  "7280": {
    "id": "7280",
    "label": "based on a given amount",
    "options": [
      "73be"
    ]
  },
  "8059": {
    "id": "8059",
    "label": "switchMapTo"
  },
  "8144": {
    "id": "8144",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "e926",
      "bb56",
      "e9b1"
    ]
  },
  "8425": {
    "id": "8425",
    "label": "retryWhen"
  },
  "8454": {
    "id": "8454",
    "label": "switchMap"
  },
  "8510": {
    "id": "8510",
    "label": "using an AsyncSubject",
    "options": [
      "d45a"
    ]
  },
  "9187": {
    "id": "9187",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "192a",
      "a8ca"
    ]
  },
  "9636": {
    "id": "9636",
    "label": "catchError"
  },
  "9666": {
    "id": "9666",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "8059"
    ]
  },
  "e233": {
    "id": "e233",
    "label": "mapTo"
  },
  "b750": {
    "id": "b750",
    "label": "to be a constant value",
    "options": [
      "e233"
    ]
  },
  "c08e": {
    "id": "c08e",
    "label": "map"
  },
  "20dc": {
    "id": "20dc",
    "label": "to be a value calculated through a formula",
    "options": [
      "c08e"
    ]
  },
  "d9b3": {
    "id": "d9b3",
    "label": "I want to change each emitted value",
    "options": [
      "b750",
      "20dc"
    ]
  },
  "5b4f": {
    "id": "5b4f",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "4396"
    ]
  },
  "2ff5": {
    "id": "2ff5",
    "label": "tap"
  },
  "340f": {
    "id": "340f",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "2ff5"
    ]
  },
  "9da1": {
    "id": "9da1",
    "label": "filter"
  },
  "0420": {
    "id": "0420",
    "label": "based on custom logic",
    "options": [
      "9da1"
    ]
  },
  "2eb9": {
    "id": "2eb9",
    "label": "first"
  },
  "cb42": {
    "id": "cb42",
    "label": "and only the first value",
    "options": [
      "2eb9"
    ]
  },
  "9c7f": {
    "id": "9c7f",
    "label": "take"
  },
  "cc02": {
    "id": "cc02",
    "label": "takeWhile"
  },
  "93d9": {
    "id": "93d9",
    "label": "based on custom logic",
    "options": [
      "cc02"
    ]
  },
  "7e21": {
    "id": "7e21",
    "label": "if they are at the start of the Observable",
    "options": [
      "cb42",
      "2337",
      "93d9"
    ]
  },
  "8ba2": {
    "id": "8ba2",
    "label": "elementAt"
  },
  "b05b": {
    "id": "b05b",
    "label": "if they are exactly the n-th emission",
    "options": [
      "8ba2"
    ]
  },
  "e316": {
    "id": "e316",
    "label": "last"
  },
  "1eff": {
    "id": "1eff",
    "label": "takeLast"
  },
  "e6fe": {
    "id": "e6fe",
    "label": "based on a given amount",
    "options": [
      "1eff"
    ]
  },
  "aecb": {
    "id": "aecb",
    "label": "if they are at the end of the Observable",
    "options": [
      "2213",
      "e6fe"
    ]
  },
  "9c72": {
    "id": "9c72",
    "label": "takeUntil"
  },
  "011d": {
    "id": "011d",
    "label": "until another Observable emits a value",
    "options": [
      "9c72"
    ]
  },
  "279e": {
    "id": "279e",
    "label": "I want to allow some values to pass",
    "options": [
      "0420",
      "7e21",
      "b05b",
      "aecb",
      "011d"
    ]
  },
  "cefa": {
    "id": "cefa",
    "label": "ignoreElements"
  },
  "2bbf": {
    "id": "2bbf",
    "label": "altogether",
    "options": [
      "cefa"
    ]
  },
  "73be": {
    "id": "73be",
    "label": "skip"
  },
  "52f3": {
    "id": "52f3",
    "label": "skipWhile"
  },
  "3eba": {
    "id": "3eba",
    "label": "from the start of the Observable",
    "options": [
      "7280",
      "5091"
    ]
  },
  "1eb4": {
    "id": "1eb4",
    "label": "skipLast"
  },
  "ff45": {
    "id": "ff45",
    "label": "from the end of the Observable",
    "options": [
      "1eb4"
    ]
  },
  "0642": {
    "id": "0642",
    "label": "until another Observable emits a value",
    "options": [
      "3340"
    ]
  },
  "02ec": {
    "id": "02ec",
    "label": "distinctUntilChanged"
  },
  "512d": {
    "id": "512d",
    "label": "emitted just before the current value",
    "options": [
      "02ec"
    ]
  },
  "b426": {
    "id": "b426",
    "label": "distinct"
  },
  "894c": {
    "id": "894c",
    "label": "emitted some time in the past",
    "options": [
      "b426"
    ]
  },
  "b582": {
    "id": "b582",
    "label": "according to value equality",
    "options": [
      "512d",
      "894c"
    ]
  },
  "28ed": {
    "id": "28ed",
    "label": "distinctUntilKeyChanged"
  },
  "d88e": {
    "id": "d88e",
    "label": "emitted just before the current value",
    "options": [
      "28ed"
    ]
  },
  "8c28": {
    "id": "8c28",
    "label": "according to a key or object property",
    "options": [
      "d88e"
    ]
  },
  "9ff1": {
    "id": "9ff1",
    "label": "that match some previous value",
    "options": [
      "b582",
      "8c28"
    ]
  },
  "e011": {
    "id": "e011",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3788"
    ]
  },
  "7e17": {
    "id": "7e17",
    "label": "throttleTime"
  },
  "4afe": {
    "id": "4afe",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7e17"
    ]
  },
  "2af2": {
    "id": "2af2",
    "label": "by emitting the first value in each time window",
    "options": [
      "e011",
      "4afe"
    ]
  },
  "5c6a": {
    "id": "5c6a",
    "label": "audit"
  },
  "33c3": {
    "id": "33c3",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5c6a"
    ]
  },
  "a2b6": {
    "id": "a2b6",
    "label": "auditTime"
  },
  "e5c5": {
    "id": "e5c5",
    "label": "where time windows are determined by a time duration",
    "options": [
      "a2b6"
    ]
  },
  "11c9": {
    "id": "11c9",
    "label": "by emitting the last value in each time window",
    "options": [
      "33c3",
      "e5c5"
    ]
  },
  "9ed4": {
    "id": "9ed4",
    "label": "debounce"
  },
  "ef83": {
    "id": "ef83",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "9ed4"
    ]
  },
  "252f": {
    "id": "252f",
    "label": "debounceTime"
  },
  "2dc1": {
    "id": "2dc1",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "252f"
    ]
  },
  "b36e": {
    "id": "b36e",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "ef83",
      "2dc1"
    ]
  },
  "d27b": {
    "id": "d27b",
    "label": "that occur too frequently",
    "options": [
      "2af2",
      "11c9",
      "b36e"
    ]
  },
  "29ee": {
    "id": "29ee",
    "label": "I want to ignore values",
    "options": [
      "2bbf",
      "3eba",
      "ff45",
      "0642",
      "9ff1",
      "d27b"
    ]
  },
  "a702": {
    "id": "a702",
    "label": "and only output the final computed value",
    "options": [
      "6417"
    ]
  },
  "e2cc": {
    "id": "e2cc",
    "label": "scan"
  },
  "d992": {
    "id": "d992",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "e2cc"
    ]
  },
  "06de": {
    "id": "06de",
    "label": "mergeScan"
  },
  "beca": {
    "id": "beca",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "a702",
      "d992",
      "1360"
    ]
  },
  "0cef": {
    "id": "0cef",
    "label": "materialize"
  },
  "1b74": {
    "id": "1b74",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "0cef"
    ]
  },
  "a67f": {
    "id": "a67f",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "2081"
    ]
  },
  "457b": {
    "id": "457b",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "1b74",
      "a67f"
    ]
  },
  "811d": {
    "id": "811d",
    "label": "timeout"
  },
  "0803": {
    "id": "0803",
    "label": "I want to throw an error",
    "options": [
      "811d"
    ]
  },
  "0af5": {
    "id": "0af5",
    "label": "timeoutWith"
  },
  "bdf7": {
    "id": "bdf7",
    "label": "I want to switch to another Observable",
    "options": [
      "0af5"
    ]
  },
  "3f53": {
    "id": "3f53",
    "label": "after a period of inactivity",
    "options": [
      "0803",
      "bdf7"
    ]
  },
  "4c89": {
    "id": "4c89",
    "label": "single"
  },
  "a5f1": {
    "id": "a5f1",
    "label": "I want to ensure there is only one value",
    "options": [
      "4c89"
    ]
  },
  "610a": {
    "id": "610a",
    "label": "count"
  },
  "33a5": {
    "id": "33a5",
    "label": "I want to know how many values it emits",
    "options": [
      "610a"
    ]
  },
  "2c69": {
    "id": "2c69",
    "label": "I want to prepend one value",
    "options": [
      "5195"
    ]
  },
  "f4ff": {
    "id": "f4ff",
    "label": "delay"
  },
  "7d79": {
    "id": "7d79",
    "label": "based on a given amount of time",
    "options": [
      "f4ff"
    ]
  },
  "5c49": {
    "id": "5c49",
    "label": "delayWhen"
  },
  "956d": {
    "id": "956d",
    "label": "I want to delay the emissions",
    "options": [
      "7d79",
      "4022"
    ]
  },
  "85b4": {
    "id": "85b4",
    "label": "toArray"
  },
  "d3ce": {
    "id": "d3ce",
    "label": "and convert to an array",
    "options": [
      "85b4"
    ]
  },
  "7e82": {
    "id": "7e82",
    "label": "Observable",
    "method": "toPromise"
  },
  "a681": {
    "id": "a681",
    "label": "and convert to a Promise",
    "options": [
      "7e82"
    ]
  },
  "a07b": {
    "id": "a07b",
    "label": "pairwise"
  },
  "ad8d": {
    "id": "ad8d",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "a07b"
    ]
  },
  "8d62": {
    "id": "8d62",
    "label": "partition"
  },
  "e1da": {
    "id": "e1da",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "8d62"
    ]
  },
  "7b22": {
    "id": "7b22",
    "label": "bufferCount"
  },
  "c8e5": {
    "id": "c8e5",
    "label": "and emit the group as an array",
    "options": [
      "7b22"
    ]
  },
  "ad17": {
    "id": "ad17",
    "label": "windowCount"
  },
  "0b50": {
    "id": "0b50",
    "label": "and emit the group as a nested Observable",
    "options": [
      "ad17"
    ]
  },
  "4b3a": {
    "id": "4b3a",
    "label": "in batches of a particular size",
    "options": [
      "c8e5",
      "0b50"
    ]
  },
  "ff1d": {
    "id": "ff1d",
    "label": "bufferTime"
  },
  "c6aa": {
    "id": "c6aa",
    "label": "and emit the group as an array",
    "options": [
      "ff1d"
    ]
  },
  "6d88": {
    "id": "6d88",
    "label": "windowTime"
  },
  "67ec": {
    "id": "67ec",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6d88"
    ]
  },
  "9af3": {
    "id": "9af3",
    "label": "buffer"
  },
  "672e": {
    "id": "672e",
    "label": "and emit the group as an array",
    "options": [
      "9af3"
    ]
  },
  "318b": {
    "id": "318b",
    "label": "window"
  },
  "9f31": {
    "id": "9f31",
    "label": "and emit the group as a nested Observable",
    "options": [
      "318b"
    ]
  },
  "e03a": {
    "id": "e03a",
    "label": "until another Observable emits",
    "options": [
      "672e",
      "9f31"
    ]
  },
  "0ca9": {
    "id": "0ca9",
    "label": "bufferWhen"
  },
  "192a": {
    "id": "192a",
    "label": "and emit the group as an array",
    "options": [
      "0ca9"
    ]
  },
  "cb23": {
    "id": "cb23",
    "label": "windowWhen"
  },
  "a8ca": {
    "id": "a8ca",
    "label": "and emit the group as a nested Observable",
    "options": [
      "cb23"
    ]
  },
  "1fcb": {
    "id": "1fcb",
    "label": "bufferToggle"
  },
  "321a": {
    "id": "321a",
    "label": "windowToggle"
  },
  "c4a6": {
    "id": "c4a6",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5548",
      "6620"
    ]
  },
  "874e": {
    "id": "874e",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6186"
    ]
  },
  "33fb": {
    "id": "33fb",
    "label": "I want to group the values",
    "options": [
      "3120",
      "ad8d",
      "e1da",
      "4b3a",
      "2536",
      "e03a",
      "9187",
      "c4a6",
      "874e"
    ]
  },
  "7dc9": {
    "id": "7dc9",
    "label": "mergeMapTo"
  },
  "a7d6": {
    "id": "a7d6",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7dc9"
    ]
  },
  "554d": {
    "id": "554d",
    "label": "mergeMap"
  },
  "b49b": {
    "id": "b49b",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "554d"
    ]
  },
  "d0f3": {
    "id": "d0f3",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "a7d6",
      "b49b"
    ]
  },
  "9d34": {
    "id": "9d34",
    "label": "concatMapTo"
  },
  "f39e": {
    "id": "f39e",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "9d34"
    ]
  },
  "36aa": {
    "id": "36aa",
    "label": "concatMap"
  },
  "4cf6": {
    "id": "4cf6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "36aa"
    ]
  },
  "601d": {
    "id": "601d",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "f39e",
      "4cf6"
    ]
  },
  "c7f2": {
    "id": "c7f2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "8454"
    ]
  },
  "eab4": {
    "id": "eab4",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "9666",
      "c7f2"
    ]
  },
  "4b7a": {
    "id": "4b7a",
    "label": "exhaustMap"
  },
  "ff07": {
    "id": "ff07",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "4b7a"
    ]
  },
  "ff26": {
    "id": "ff26",
    "label": "expand"
  },
  "998f": {
    "id": "998f",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "ff26"
    ]
  },
  "651d": {
    "id": "651d",
    "label": "pipe"
  },
  "eb35": {
    "id": "eb35",
    "label": "I want to perform custom operations",
    "options": [
      "651d"
    ]
  },
  "18b0": {
    "id": "18b0",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "3684"
    ]
  },
  "e9e9": {
    "id": "e9e9",
    "label": "publish"
  },
  "1a71": {
    "id": "1a71",
    "label": "and start it manually or imperatively",
    "options": [
      "e9e9"
    ]
  },
  "040f": {
    "id": "040f",
    "label": "using a conventional Subject",
    "options": [
      "18b0",
      "1a71"
    ]
  },
  "d39e": {
    "id": "d39e",
    "label": "publishBehavior"
  },
  "a4ef": {
    "id": "a4ef",
    "label": "using a BehaviorSubject",
    "options": [
      "d39e"
    ]
  },
  "96af": {
    "id": "96af",
    "label": "publishReplay"
  },
  "d45a": {
    "id": "d45a",
    "label": "publishLast"
  },
  "5ca6": {
    "id": "5ca6",
    "label": "multicast"
  },
  "e16d": {
    "id": "e16d",
    "label": "using a specific subject implementation",
    "options": [
      "5ca6"
    ]
  },
  "8e2a": {
    "id": "8e2a",
    "label": "I want to start a new Observable",
    "options": [
      "9636"
    ]
  },
  "3e40": {
    "id": "3e40",
    "label": "retry"
  },
  "daf6": {
    "id": "daf6",
    "label": "immediately",
    "options": [
      "3e40"
    ]
  },
  "b2d8": {
    "id": "b2d8",
    "label": "when another Observable emits",
    "options": [
      "8425"
    ]
  },
  "3cf4": {
    "id": "3cf4",
    "label": "when an error occurs",
    "options": [
      "8e2a",
      "6543"
    ]
  },
  "8a60": {
    "id": "8a60",
    "label": "repeat"
  },
  "f4d1": {
    "id": "f4d1",
    "label": "immediately",
    "options": [
      "8a60"
    ]
  },
  "edfc": {
    "id": "edfc",
    "label": "when another Observable emits",
    "options": [
      "6647"
    ]
  },
  "e8ba": {
    "id": "e8ba",
    "label": "concat"
  },
  "d1ff": {
    "id": "d1ff",
    "label": "when it completes",
    "options": [
      "6939",
      "1082"
    ]
  },
  "37ac": {
    "id": "37ac",
    "label": "finalize"
  },
  "0f4f": {
    "id": "0f4f",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "37ac"
    ]
  },
  "40ee": {
    "id": "40ee",
    "label": "subscribeOn"
  },
  "8f97": {
    "id": "8f97",
    "label": "that routes calls to subscribe",
    "options": [
      "40ee"
    ]
  },
  "ff4a": {
    "id": "ff4a",
    "label": "observeOn"
  },
  "16e4": {
    "id": "16e4",
    "label": "that routes values to observers",
    "options": [
      "ff4a"
    ]
  },
  "c713": {
    "id": "c713",
    "label": "I want to change the scheduler",
    "options": [
      "8f97",
      "16e4"
    ]
  },
  "62bb": {
    "id": "62bb",
    "label": "race"
  },
  "4c73": {
    "id": "4c73",
    "label": "merge"
  },
  "1a7f": {
    "id": "1a7f",
    "label": "I want to output the values from either of them",
    "options": [
      "4c73"
    ]
  },
  "3dcc": {
    "id": "3dcc",
    "label": "combineLatest"
  },
  "e926": {
    "id": "e926",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "3dcc"
    ]
  },
  "7a20": {
    "id": "7a20",
    "label": "withLatestFrom"
  },
  "bb56": {
    "id": "bb56",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "7a20"
    ]
  },
  "b731": {
    "id": "b731",
    "label": "zip"
  },
  "e9b1": {
    "id": "e9b1",
    "label": "using each source value only once",
    "options": [
      "b731"
    ]
  },
  "79f5": {
    "id": "79f5",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "1897",
      "1a7f",
      "8144"
    ]
  },
  "3e2c": {
    "id": "3e2c",
    "label": "I have one existing Observable, and",
    "options": [
      "d9b3",
      "5b4f",
      "340f",
      "279e",
      "29ee",
      "beca",
      "457b",
      "3f53",
      "a5f1",
      "33a5",
      "2c69",
      "956d",
      "33fb",
      "2454",
      "eb35",
      "5077",
      "3cf4",
      "d1ff",
      "0f4f",
      "c713",
      "79f5"
    ]
  },
  "f08b": {
    "id": "f08b",
    "label": "race"
  },
  "c858": {
    "id": "c858",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "f08b"
    ]
  },
  "fbf5": {
    "id": "fbf5",
    "label": "forkJoin"
  },
  "7dec": {
    "id": "7dec",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "fbf5"
    ]
  },
  "9f78": {
    "id": "9f78",
    "label": "merge"
  },
  "6b68": {
    "id": "6b68",
    "label": "I want to output the values from either of them",
    "options": [
      "9f78"
    ]
  },
  "aa78": {
    "id": "aa78",
    "label": "combineLatest"
  },
  "aacf": {
    "id": "aacf",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "aa78"
    ]
  },
  "6bd0": {
    "id": "6bd0",
    "label": "zip"
  },
  "c9fe": {
    "id": "c9fe",
    "label": "using each source value only once",
    "options": [
      "6bd0"
    ]
  },
  "2acb": {
    "id": "2acb",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "aacf",
      "c9fe"
    ]
  },
  "e67e": {
    "id": "e67e",
    "label": "I want to subscribe to each in order",
    "options": [
      "6927"
    ]
  },
  "ebf5": {
    "id": "ebf5",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "c858",
      "7dec",
      "6b68",
      "2acb",
      "e67e"
    ]
  },
  "31d5": {
    "id": "31d5",
    "label": "Observable",
    "method": "create"
  },
  "268f": {
    "id": "268f",
    "label": "generate"
  },
  "98e4": {
    "id": "98e4",
    "label": "using a state machine similar to a for loop",
    "options": [
      "268f"
    ]
  },
  "15b1": {
    "id": "15b1",
    "label": "throwError"
  },
  "3a08": {
    "id": "3a08",
    "label": "that throws an error",
    "options": [
      "15b1"
    ]
  },
  "e7c8": {
    "id": "e7c8",
    "label": "EMPTY"
  },
  "d7f7": {
    "id": "d7f7",
    "label": "that just completes, without emitting values",
    "options": [
      "e7c8"
    ]
  },
  "0b5f": {
    "id": "0b5f",
    "label": "NEVER"
  },
  "998c": {
    "id": "998c",
    "label": "that never emits anything",
    "options": [
      "0b5f"
    ]
  },
  "4d62": {
    "id": "4d62",
    "label": "fromEvent"
  },
  "d988": {
    "id": "d988",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "4d62"
    ]
  },
  "1f16": {
    "id": "1f16",
    "label": "fromEventPattern"
  },
  "5bf4": {
    "id": "5bf4",
    "label": "from"
  },
  "50b9": {
    "id": "50b9",
    "label": "from a Promise or an event source",
    "options": [
      "5bf4"
    ]
  },
  "d43d": {
    "id": "d43d",
    "label": "from"
  },
  "6d5c": {
    "id": "6d5c",
    "label": "over the values in an array",
    "options": [
      "d43d"
    ]
  },
  "7d60": {
    "id": "7d60",
    "label": "range"
  },
  "5e4d": {
    "id": "5e4d",
    "label": "of"
  },
  "87f2": {
    "id": "87f2",
    "label": "over prefined values given as arguments",
    "options": [
      "5e4d"
    ]
  },
  "beb3": {
    "id": "beb3",
    "label": "that iterates",
    "options": [
      "6d5c",
      "1951",
      "87f2"
    ]
  },
  "beb1": {
    "id": "beb1",
    "label": "interval"
  },
  "fd4e": {
    "id": "fd4e",
    "label": "regularly",
    "options": [
      "beb1"
    ]
  },
  "038b": {
    "id": "038b",
    "label": "timer"
  },
  "dbd5": {
    "id": "dbd5",
    "label": "with an optional initial delay",
    "options": [
      "038b"
    ]
  },
  "ca99": {
    "id": "ca99",
    "label": "that emits values on a timer",
    "options": [
      "fd4e",
      "dbd5"
    ]
  },
  "e06d": {
    "id": "e06d",
    "label": "defer"
  },
  "01a9": {
    "id": "01a9",
    "label": "which is built on demand when subscribed",
    "options": [
      "e06d"
    ]
  },
  "a37b": {
    "id": "a37b",
    "label": "I want to create a new Observable",
    "options": [
      "1889",
      "98e4",
      "3a08",
      "d7f7",
      "998c",
      "4841",
      "50b9",
      "beb3",
      "ca99",
      "01a9"
    ]
  },
  "7c5f": {
    "id": "7c5f",
    "label": "bindCallback"
  },
  "ae5d": {
    "id": "ae5d",
    "label": "bindNodeCallback"
  },
  "dfc9": {
    "id": "dfc9",
    "label": "supporting Node.js callback style API",
    "options": [
      "ae5d"
    ]
  },
  "650b": {
    "id": "650b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4201",
      "dfc9"
    ]
  },
  "d62b": {
    "id": "d62b",
    "label": "I have no Observables yet, and",
    "options": [
      "a37b",
      "650b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "3e2c",
      "ebf5",
      "d62b"
    ]
  }
}