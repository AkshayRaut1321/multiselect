{
  "1005": {
    "id": "1005",
    "label": "and emit the group as an array",
    "options": [
      "43a8"
    ]
  },
  "1211": {
    "id": "1211",
    "label": "publishLast"
  },
  "1232": {
    "id": "1232",
    "label": "using a BehaviorSubject",
    "options": [
      "5be2"
    ]
  },
  "1353": {
    "id": "1353",
    "label": "distinct"
  },
  "1435": {
    "id": "1435",
    "label": "based on custom logic",
    "options": [
      "73e3"
    ]
  },
  "1979": {
    "id": "1979",
    "label": "bindNodeCallback"
  },
  "2234": {
    "id": "2234",
    "label": "and emit the group as an array",
    "options": [
      "e132"
    ]
  },
  "2237": {
    "id": "2237",
    "label": "count"
  },
  "2580": {
    "id": "2580",
    "label": "switchMapTo"
  },
  "2846": {
    "id": "2846",
    "label": "mergeMap"
  },
  "3545": {
    "id": "3545",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "aae3"
    ]
  },
  "4030": {
    "id": "4030",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3f59"
    ]
  },
  "4660": {
    "id": "4660",
    "label": "pairwise"
  },
  "5746": {
    "id": "5746",
    "label": "skipUntil"
  },
  "6172": {
    "id": "6172",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "70d8"
    ]
  },
  "6562": {
    "id": "6562",
    "label": "using each source value only once",
    "options": [
      "10c2"
    ]
  },
  "7498": {
    "id": "7498",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2580"
    ]
  },
  "7583": {
    "id": "7583",
    "label": "from a Promise or an event source",
    "options": [
      "661a"
    ]
  },
  "7969": {
    "id": "7969",
    "label": "that match some previous value",
    "options": [
      "7de8",
      "094a"
    ]
  },
  "8120": {
    "id": "8120",
    "label": "I want to perform custom operations",
    "options": [
      "fd97"
    ]
  },
  "8256": {
    "id": "8256",
    "label": "I want to throw an error",
    "options": [
      "9e7f"
    ]
  },
  "8349": {
    "id": "8349",
    "label": "by emitting the last value in each time window",
    "options": [
      "0a47",
      "1b3f"
    ]
  },
  "9531": {
    "id": "9531",
    "label": "to be a value calculated through a formula",
    "options": [
      "0fe5"
    ]
  },
  "9972": {
    "id": "9972",
    "label": "retryWhen"
  },
  "00bc": {
    "id": "00bc",
    "label": "mapTo"
  },
  "fdbb": {
    "id": "fdbb",
    "label": "to be a constant value",
    "options": [
      "00bc"
    ]
  },
  "0fe5": {
    "id": "0fe5",
    "label": "map"
  },
  "b539": {
    "id": "b539",
    "label": "I want to change each emitted value",
    "options": [
      "fdbb",
      "9531"
    ]
  },
  "b23c": {
    "id": "b23c",
    "label": "pluck"
  },
  "3b95": {
    "id": "3b95",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "b23c"
    ]
  },
  "b80b": {
    "id": "b80b",
    "label": "tap"
  },
  "788a": {
    "id": "788a",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "b80b"
    ]
  },
  "a756": {
    "id": "a756",
    "label": "filter"
  },
  "f972": {
    "id": "f972",
    "label": "based on custom logic",
    "options": [
      "a756"
    ]
  },
  "26ca": {
    "id": "26ca",
    "label": "first"
  },
  "814b": {
    "id": "814b",
    "label": "and only the first value",
    "options": [
      "26ca"
    ]
  },
  "e6f9": {
    "id": "e6f9",
    "label": "take"
  },
  "f9d2": {
    "id": "f9d2",
    "label": "based on a given amount",
    "options": [
      "e6f9"
    ]
  },
  "73e3": {
    "id": "73e3",
    "label": "takeWhile"
  },
  "8dcb": {
    "id": "8dcb",
    "label": "if they are at the start of the Observable",
    "options": [
      "814b",
      "f9d2",
      "1435"
    ]
  },
  "281d": {
    "id": "281d",
    "label": "elementAt"
  },
  "1ed7": {
    "id": "1ed7",
    "label": "if they are exactly the n-th emission",
    "options": [
      "281d"
    ]
  },
  "2b56": {
    "id": "2b56",
    "label": "last"
  },
  "7a1b": {
    "id": "7a1b",
    "label": "and only the last value",
    "options": [
      "2b56"
    ]
  },
  "f758": {
    "id": "f758",
    "label": "takeLast"
  },
  "e5ac": {
    "id": "e5ac",
    "label": "based on a given amount",
    "options": [
      "f758"
    ]
  },
  "fc02": {
    "id": "fc02",
    "label": "if they are at the end of the Observable",
    "options": [
      "7a1b",
      "e5ac"
    ]
  },
  "5cba": {
    "id": "5cba",
    "label": "takeUntil"
  },
  "ad97": {
    "id": "ad97",
    "label": "until another Observable emits a value",
    "options": [
      "5cba"
    ]
  },
  "e6ee": {
    "id": "e6ee",
    "label": "I want to allow some values to pass",
    "options": [
      "f972",
      "8dcb",
      "1ed7",
      "fc02",
      "ad97"
    ]
  },
  "cec7": {
    "id": "cec7",
    "label": "ignoreElements"
  },
  "c177": {
    "id": "c177",
    "label": "altogether",
    "options": [
      "cec7"
    ]
  },
  "04df": {
    "id": "04df",
    "label": "skip"
  },
  "237d": {
    "id": "237d",
    "label": "based on a given amount",
    "options": [
      "04df"
    ]
  },
  "3bc7": {
    "id": "3bc7",
    "label": "skipWhile"
  },
  "05e7": {
    "id": "05e7",
    "label": "based on custom logic",
    "options": [
      "3bc7"
    ]
  },
  "6b53": {
    "id": "6b53",
    "label": "from the start of the Observable",
    "options": [
      "237d",
      "05e7"
    ]
  },
  "0791": {
    "id": "0791",
    "label": "skipLast"
  },
  "7ab8": {
    "id": "7ab8",
    "label": "from the end of the Observable",
    "options": [
      "0791"
    ]
  },
  "e125": {
    "id": "e125",
    "label": "until another Observable emits a value",
    "options": [
      "5746"
    ]
  },
  "be29": {
    "id": "be29",
    "label": "distinctUntilChanged"
  },
  "7e0d": {
    "id": "7e0d",
    "label": "emitted just before the current value",
    "options": [
      "be29"
    ]
  },
  "dbcc": {
    "id": "dbcc",
    "label": "emitted some time in the past",
    "options": [
      "1353"
    ]
  },
  "7de8": {
    "id": "7de8",
    "label": "according to value equality",
    "options": [
      "7e0d",
      "dbcc"
    ]
  },
  "3d79": {
    "id": "3d79",
    "label": "distinctUntilKeyChanged"
  },
  "3f12": {
    "id": "3f12",
    "label": "emitted just before the current value",
    "options": [
      "3d79"
    ]
  },
  "094a": {
    "id": "094a",
    "label": "according to a key or object property",
    "options": [
      "3f12"
    ]
  },
  "3dd7": {
    "id": "3dd7",
    "label": "throttle"
  },
  "21c7": {
    "id": "21c7",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3dd7"
    ]
  },
  "9c1a": {
    "id": "9c1a",
    "label": "throttleTime"
  },
  "3c39": {
    "id": "3c39",
    "label": "where time windows are determined by a time duration",
    "options": [
      "9c1a"
    ]
  },
  "c3f7": {
    "id": "c3f7",
    "label": "by emitting the first value in each time window",
    "options": [
      "21c7",
      "3c39"
    ]
  },
  "a7ea": {
    "id": "a7ea",
    "label": "audit"
  },
  "0a47": {
    "id": "0a47",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a7ea"
    ]
  },
  "e1d9": {
    "id": "e1d9",
    "label": "auditTime"
  },
  "1b3f": {
    "id": "1b3f",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e1d9"
    ]
  },
  "57ae": {
    "id": "57ae",
    "label": "debounce"
  },
  "8aae": {
    "id": "8aae",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "57ae"
    ]
  },
  "ed81": {
    "id": "ed81",
    "label": "debounceTime"
  },
  "b874": {
    "id": "b874",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "ed81"
    ]
  },
  "2c2a": {
    "id": "2c2a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "8aae",
      "b874"
    ]
  },
  "3ae6": {
    "id": "3ae6",
    "label": "that occur too frequently",
    "options": [
      "c3f7",
      "8349",
      "2c2a"
    ]
  },
  "405f": {
    "id": "405f",
    "label": "I want to ignore values",
    "options": [
      "c177",
      "6b53",
      "7ab8",
      "e125",
      "7969",
      "3ae6"
    ]
  },
  "14d8": {
    "id": "14d8",
    "label": "reduce"
  },
  "73a3": {
    "id": "73a3",
    "label": "and only output the final computed value",
    "options": [
      "14d8"
    ]
  },
  "0694": {
    "id": "0694",
    "label": "scan"
  },
  "222c": {
    "id": "222c",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "0694"
    ]
  },
  "aae3": {
    "id": "aae3",
    "label": "mergeScan"
  },
  "aefd": {
    "id": "aefd",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "73a3",
      "222c",
      "3545"
    ]
  },
  "0a3a": {
    "id": "0a3a",
    "label": "materialize"
  },
  "9a5b": {
    "id": "9a5b",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "0a3a"
    ]
  },
  "b8a4": {
    "id": "b8a4",
    "label": "timeInterval"
  },
  "05e8": {
    "id": "05e8",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "b8a4"
    ]
  },
  "323f": {
    "id": "323f",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "9a5b",
      "05e8"
    ]
  },
  "9e7f": {
    "id": "9e7f",
    "label": "timeout"
  },
  "0eec": {
    "id": "0eec",
    "label": "timeoutWith"
  },
  "2bf3": {
    "id": "2bf3",
    "label": "I want to switch to another Observable",
    "options": [
      "0eec"
    ]
  },
  "4bc5": {
    "id": "4bc5",
    "label": "after a period of inactivity",
    "options": [
      "8256",
      "2bf3"
    ]
  },
  "8f35": {
    "id": "8f35",
    "label": "single"
  },
  "9a76": {
    "id": "9a76",
    "label": "I want to ensure there is only one value",
    "options": [
      "8f35"
    ]
  },
  "5b52": {
    "id": "5b52",
    "label": "I want to know how many values it emits",
    "options": [
      "2237"
    ]
  },
  "1d8b": {
    "id": "1d8b",
    "label": "startWith"
  },
  "489b": {
    "id": "489b",
    "label": "I want to prepend one value",
    "options": [
      "1d8b"
    ]
  },
  "d830": {
    "id": "d830",
    "label": "delay"
  },
  "ad39": {
    "id": "ad39",
    "label": "based on a given amount of time",
    "options": [
      "d830"
    ]
  },
  "8b06": {
    "id": "8b06",
    "label": "delayWhen"
  },
  "7ff3": {
    "id": "7ff3",
    "label": "based on the emissions of another Observable",
    "options": [
      "8b06"
    ]
  },
  "5af1": {
    "id": "5af1",
    "label": "I want to delay the emissions",
    "options": [
      "ad39",
      "7ff3"
    ]
  },
  "288e": {
    "id": "288e",
    "label": "toArray"
  },
  "3f95": {
    "id": "3f95",
    "label": "and convert to an array",
    "options": [
      "288e"
    ]
  },
  "313d": {
    "id": "313d",
    "label": "Observable",
    "method": "toPromise"
  },
  "3eff": {
    "id": "3eff",
    "label": "and convert to a Promise",
    "options": [
      "313d"
    ]
  },
  "b9b6": {
    "id": "b9b6",
    "label": "until the Observable completes",
    "options": [
      "3f95",
      "3eff"
    ]
  },
  "d6dd": {
    "id": "d6dd",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "4660"
    ]
  },
  "289e": {
    "id": "289e",
    "label": "partition"
  },
  "5e7c": {
    "id": "5e7c",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "289e"
    ]
  },
  "43a8": {
    "id": "43a8",
    "label": "bufferCount"
  },
  "bf7b": {
    "id": "bf7b",
    "label": "windowCount"
  },
  "32e2": {
    "id": "32e2",
    "label": "and emit the group as a nested Observable",
    "options": [
      "bf7b"
    ]
  },
  "5eef": {
    "id": "5eef",
    "label": "in batches of a particular size",
    "options": [
      "1005",
      "32e2"
    ]
  },
  "e132": {
    "id": "e132",
    "label": "bufferTime"
  },
  "31b5": {
    "id": "31b5",
    "label": "windowTime"
  },
  "b248": {
    "id": "b248",
    "label": "and emit the group as a nested Observable",
    "options": [
      "31b5"
    ]
  },
  "fa53": {
    "id": "fa53",
    "label": "based on time",
    "options": [
      "2234",
      "b248"
    ]
  },
  "0d41": {
    "id": "0d41",
    "label": "buffer"
  },
  "c8bf": {
    "id": "c8bf",
    "label": "and emit the group as an array",
    "options": [
      "0d41"
    ]
  },
  "456e": {
    "id": "456e",
    "label": "window"
  },
  "ab71": {
    "id": "ab71",
    "label": "and emit the group as a nested Observable",
    "options": [
      "456e"
    ]
  },
  "e040": {
    "id": "e040",
    "label": "until another Observable emits",
    "options": [
      "c8bf",
      "ab71"
    ]
  },
  "38e1": {
    "id": "38e1",
    "label": "bufferWhen"
  },
  "a208": {
    "id": "a208",
    "label": "and emit the group as an array",
    "options": [
      "38e1"
    ]
  },
  "b013": {
    "id": "b013",
    "label": "windowWhen"
  },
  "dc2c": {
    "id": "dc2c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b013"
    ]
  },
  "226a": {
    "id": "226a",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "a208",
      "dc2c"
    ]
  },
  "71f7": {
    "id": "71f7",
    "label": "bufferToggle"
  },
  "0a4f": {
    "id": "0a4f",
    "label": "and emit the group as an array",
    "options": [
      "71f7"
    ]
  },
  "3f59": {
    "id": "3f59",
    "label": "windowToggle"
  },
  "45a0": {
    "id": "45a0",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "0a4f",
      "4030"
    ]
  },
  "f9a0": {
    "id": "f9a0",
    "label": "groupBy"
  },
  "75d3": {
    "id": "75d3",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "f9a0"
    ]
  },
  "fdd4": {
    "id": "fdd4",
    "label": "I want to group the values",
    "options": [
      "b9b6",
      "d6dd",
      "5e7c",
      "5eef",
      "fa53",
      "e040",
      "226a",
      "45a0",
      "75d3"
    ]
  },
  "39a5": {
    "id": "39a5",
    "label": "mergeMapTo"
  },
  "88d5": {
    "id": "88d5",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "39a5"
    ]
  },
  "2a75": {
    "id": "2a75",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2846"
    ]
  },
  "f0e2": {
    "id": "f0e2",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "88d5",
      "2a75"
    ]
  },
  "3be0": {
    "id": "3be0",
    "label": "concatMapTo"
  },
  "3aef": {
    "id": "3aef",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3be0"
    ]
  },
  "9de5": {
    "id": "9de5",
    "label": "concatMap"
  },
  "3bfb": {
    "id": "3bfb",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "9de5"
    ]
  },
  "9ec1": {
    "id": "9ec1",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "3aef",
      "3bfb"
    ]
  },
  "70d8": {
    "id": "70d8",
    "label": "switchMap"
  },
  "ace8": {
    "id": "ace8",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "7498",
      "6172"
    ]
  },
  "b66b": {
    "id": "b66b",
    "label": "exhaustMap"
  },
  "3ec2": {
    "id": "3ec2",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "b66b"
    ]
  },
  "393b": {
    "id": "393b",
    "label": "expand"
  },
  "71e8": {
    "id": "71e8",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "393b"
    ]
  },
  "cde4": {
    "id": "cde4",
    "label": "I want to start a new Observable for each value",
    "options": [
      "f0e2",
      "9ec1",
      "ace8",
      "3ec2",
      "71e8"
    ]
  },
  "fd97": {
    "id": "fd97",
    "label": "pipe"
  },
  "37af": {
    "id": "37af",
    "label": "share"
  },
  "15a6": {
    "id": "15a6",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "37af"
    ]
  },
  "d52b": {
    "id": "d52b",
    "label": "publish"
  },
  "3df8": {
    "id": "3df8",
    "label": "and start it manually or imperatively",
    "options": [
      "d52b"
    ]
  },
  "fa68": {
    "id": "fa68",
    "label": "using a conventional Subject",
    "options": [
      "15a6",
      "3df8"
    ]
  },
  "5be2": {
    "id": "5be2",
    "label": "publishBehavior"
  },
  "ab57": {
    "id": "ab57",
    "label": "publishReplay"
  },
  "aab2": {
    "id": "aab2",
    "label": "using a ReplaySubject",
    "options": [
      "ab57"
    ]
  },
  "bbf7": {
    "id": "bbf7",
    "label": "using an AsyncSubject",
    "options": [
      "1211"
    ]
  },
  "1e6c": {
    "id": "1e6c",
    "label": "multicast"
  },
  "d98b": {
    "id": "d98b",
    "label": "using a specific subject implementation",
    "options": [
      "1e6c"
    ]
  },
  "4c89": {
    "id": "4c89",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "fa68",
      "1232",
      "aab2",
      "bbf7",
      "d98b"
    ]
  },
  "54b2": {
    "id": "54b2",
    "label": "catchError"
  },
  "f8a3": {
    "id": "f8a3",
    "label": "I want to start a new Observable",
    "options": [
      "54b2"
    ]
  },
  "7b8d": {
    "id": "7b8d",
    "label": "retry"
  },
  "c7c9": {
    "id": "c7c9",
    "label": "immediately",
    "options": [
      "7b8d"
    ]
  },
  "689a": {
    "id": "689a",
    "label": "when another Observable emits",
    "options": [
      "9972"
    ]
  },
  "505d": {
    "id": "505d",
    "label": "I want to re-subscribe",
    "options": [
      "c7c9",
      "689a"
    ]
  },
  "6eb0": {
    "id": "6eb0",
    "label": "when an error occurs",
    "options": [
      "f8a3",
      "505d"
    ]
  },
  "523d": {
    "id": "523d",
    "label": "repeat"
  },
  "a88f": {
    "id": "a88f",
    "label": "immediately",
    "options": [
      "523d"
    ]
  },
  "8be0": {
    "id": "8be0",
    "label": "repeatWhen"
  },
  "0bd6": {
    "id": "0bd6",
    "label": "when another Observable emits",
    "options": [
      "8be0"
    ]
  },
  "da46": {
    "id": "da46",
    "label": "I want to re-subscribe",
    "options": [
      "a88f",
      "0bd6"
    ]
  },
  "b00f": {
    "id": "b00f",
    "label": "concat"
  },
  "9e51": {
    "id": "9e51",
    "label": "I want to start a new Observable",
    "options": [
      "b00f"
    ]
  },
  "2d23": {
    "id": "2d23",
    "label": "when it completes",
    "options": [
      "da46",
      "9e51"
    ]
  },
  "c37c": {
    "id": "c37c",
    "label": "finalize"
  },
  "1bc2": {
    "id": "1bc2",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c37c"
    ]
  },
  "1cea": {
    "id": "1cea",
    "label": "subscribeOn"
  },
  "e454": {
    "id": "e454",
    "label": "that routes calls to subscribe",
    "options": [
      "1cea"
    ]
  },
  "b238": {
    "id": "b238",
    "label": "observeOn"
  },
  "37ce": {
    "id": "37ce",
    "label": "that routes values to observers",
    "options": [
      "b238"
    ]
  },
  "10a6": {
    "id": "10a6",
    "label": "I want to change the scheduler",
    "options": [
      "e454",
      "37ce"
    ]
  },
  "0db4": {
    "id": "0db4",
    "label": "race"
  },
  "534e": {
    "id": "534e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "0db4"
    ]
  },
  "981a": {
    "id": "981a",
    "label": "merge"
  },
  "84ab": {
    "id": "84ab",
    "label": "I want to output the values from either of them",
    "options": [
      "981a"
    ]
  },
  "97c5": {
    "id": "97c5",
    "label": "combineLatest"
  },
  "0f24": {
    "id": "0f24",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "97c5"
    ]
  },
  "a89f": {
    "id": "a89f",
    "label": "withLatestFrom"
  },
  "9bef": {
    "id": "9bef",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "a89f"
    ]
  },
  "d2e7": {
    "id": "d2e7",
    "label": "zip"
  },
  "a469": {
    "id": "a469",
    "label": "using each source value only once",
    "options": [
      "d2e7"
    ]
  },
  "59b4": {
    "id": "59b4",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "0f24",
      "9bef",
      "a469"
    ]
  },
  "c3b0": {
    "id": "c3b0",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "534e",
      "84ab",
      "59b4"
    ]
  },
  "bf5b": {
    "id": "bf5b",
    "label": "I have one existing Observable, and",
    "options": [
      "b539",
      "3b95",
      "788a",
      "e6ee",
      "405f",
      "aefd",
      "323f",
      "4bc5",
      "9a76",
      "5b52",
      "489b",
      "5af1",
      "fdd4",
      "cde4",
      "8120",
      "4c89",
      "6eb0",
      "2d23",
      "1bc2",
      "10a6",
      "c3b0"
    ]
  },
  "8b39": {
    "id": "8b39",
    "label": "race"
  },
  "065a": {
    "id": "065a",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8b39"
    ]
  },
  "00c1": {
    "id": "00c1",
    "label": "forkJoin"
  },
  "c1bd": {
    "id": "c1bd",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "00c1"
    ]
  },
  "835c": {
    "id": "835c",
    "label": "merge"
  },
  "edc3": {
    "id": "edc3",
    "label": "I want to output the values from either of them",
    "options": [
      "835c"
    ]
  },
  "a3ce": {
    "id": "a3ce",
    "label": "combineLatest"
  },
  "1a44": {
    "id": "1a44",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "a3ce"
    ]
  },
  "10c2": {
    "id": "10c2",
    "label": "zip"
  },
  "067c": {
    "id": "067c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1a44",
      "6562"
    ]
  },
  "bb36": {
    "id": "bb36",
    "label": "concat"
  },
  "14cb": {
    "id": "14cb",
    "label": "I want to subscribe to each in order",
    "options": [
      "bb36"
    ]
  },
  "577b": {
    "id": "577b",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "065a",
      "c1bd",
      "edc3",
      "067c",
      "14cb"
    ]
  },
  "a3f1": {
    "id": "a3f1",
    "label": "Observable",
    "method": "create"
  },
  "b56d": {
    "id": "b56d",
    "label": "using custom logic",
    "options": [
      "a3f1"
    ]
  },
  "d15d": {
    "id": "d15d",
    "label": "generate"
  },
  "5a43": {
    "id": "5a43",
    "label": "using a state machine similar to a for loop",
    "options": [
      "d15d"
    ]
  },
  "e9d9": {
    "id": "e9d9",
    "label": "throwError"
  },
  "dad3": {
    "id": "dad3",
    "label": "that throws an error",
    "options": [
      "e9d9"
    ]
  },
  "c132": {
    "id": "c132",
    "label": "EMPTY"
  },
  "b4f9": {
    "id": "b4f9",
    "label": "that just completes, without emitting values",
    "options": [
      "c132"
    ]
  },
  "2f75": {
    "id": "2f75",
    "label": "NEVER"
  },
  "61d4": {
    "id": "61d4",
    "label": "that never emits anything",
    "options": [
      "2f75"
    ]
  },
  "7f54": {
    "id": "7f54",
    "label": "fromEvent"
  },
  "fb48": {
    "id": "fb48",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "7f54"
    ]
  },
  "99b4": {
    "id": "99b4",
    "label": "fromEventPattern"
  },
  "76b9": {
    "id": "76b9",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "99b4"
    ]
  },
  "bd44": {
    "id": "bd44",
    "label": "from an existing source of events",
    "options": [
      "fb48",
      "76b9"
    ]
  },
  "661a": {
    "id": "661a",
    "label": "from"
  },
  "8b2c": {
    "id": "8b2c",
    "label": "from"
  },
  "61b8": {
    "id": "61b8",
    "label": "over the values in an array",
    "options": [
      "8b2c"
    ]
  },
  "5b5a": {
    "id": "5b5a",
    "label": "range"
  },
  "f4c7": {
    "id": "f4c7",
    "label": "over values in a numeric range",
    "options": [
      "5b5a"
    ]
  },
  "9cba": {
    "id": "9cba",
    "label": "of"
  },
  "c877": {
    "id": "c877",
    "label": "over prefined values given as arguments",
    "options": [
      "9cba"
    ]
  },
  "24f4": {
    "id": "24f4",
    "label": "that iterates",
    "options": [
      "61b8",
      "f4c7",
      "c877"
    ]
  },
  "345e": {
    "id": "345e",
    "label": "interval"
  },
  "a862": {
    "id": "a862",
    "label": "regularly",
    "options": [
      "345e"
    ]
  },
  "8fa2": {
    "id": "8fa2",
    "label": "timer"
  },
  "da33": {
    "id": "da33",
    "label": "with an optional initial delay",
    "options": [
      "8fa2"
    ]
  },
  "28af": {
    "id": "28af",
    "label": "that emits values on a timer",
    "options": [
      "a862",
      "da33"
    ]
  },
  "8fb6": {
    "id": "8fb6",
    "label": "defer"
  },
  "ef09": {
    "id": "ef09",
    "label": "which is built on demand when subscribed",
    "options": [
      "8fb6"
    ]
  },
  "df54": {
    "id": "df54",
    "label": "I want to create a new Observable",
    "options": [
      "b56d",
      "5a43",
      "dad3",
      "b4f9",
      "61d4",
      "bd44",
      "7583",
      "24f4",
      "28af",
      "ef09"
    ]
  },
  "8ef8": {
    "id": "8ef8",
    "label": "bindCallback"
  },
  "3cf1": {
    "id": "3cf1",
    "label": "supporting a conventional callback API",
    "options": [
      "8ef8"
    ]
  },
  "8e57": {
    "id": "8e57",
    "label": "supporting Node.js callback style API",
    "options": [
      "1979"
    ]
  },
  "166f": {
    "id": "166f",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "3cf1",
      "8e57"
    ]
  },
  "a36e": {
    "id": "a36e",
    "label": "I have no Observables yet, and",
    "options": [
      "df54",
      "166f"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "bf5b",
      "577b",
      "a36e"
    ]
  }
}