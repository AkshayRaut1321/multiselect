{
  "1403": {
    "id": "1403",
    "label": "where time windows are determined by a time duration",
    "options": [
      "0d97"
    ]
  },
  "1425": {
    "id": "1425",
    "label": "if they are exactly the n-th emission",
    "options": [
      "f317"
    ]
  },
  "1970": {
    "id": "1970",
    "label": "concat"
  },
  "2577": {
    "id": "2577",
    "label": "I want to re-subscribe",
    "options": [
      "9611",
      "bcb9"
    ]
  },
  "2905": {
    "id": "2905",
    "label": "that occur too frequently",
    "options": [
      "60cd",
      "a2c6",
      "a184"
    ]
  },
  "3012": {
    "id": "3012",
    "label": "and emit the group as an array",
    "options": [
      "3b59"
    ]
  },
  "3150": {
    "id": "3150",
    "label": "forkJoin"
  },
  "3408": {
    "id": "3408",
    "label": "altogether",
    "options": [
      "14a6"
    ]
  },
  "3537": {
    "id": "3537",
    "label": "I want to prepend one value",
    "options": [
      "a181"
    ]
  },
  "3777": {
    "id": "3777",
    "label": "using a conventional Subject",
    "options": [
      "965e",
      "f44f"
    ]
  },
  "4812": {
    "id": "4812",
    "label": "I want to change the scheduler",
    "options": [
      "dc65",
      "25d1"
    ]
  },
  "4927": {
    "id": "4927",
    "label": "timeoutWith"
  },
  "5021": {
    "id": "5021",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "79d8"
    ]
  },
  "5289": {
    "id": "5289",
    "label": "from an existing source of events",
    "options": [
      "28cc",
      "bfe5"
    ]
  },
  "5557": {
    "id": "5557",
    "label": "from the start of the Observable",
    "options": [
      "c32a",
      "e574"
    ]
  },
  "5938": {
    "id": "5938",
    "label": "skipUntil"
  },
  "6335": {
    "id": "6335",
    "label": "that iterates",
    "options": [
      "a3c3",
      "22eb",
      "6c97"
    ]
  },
  "6381": {
    "id": "6381",
    "label": "timeout"
  },
  "6705": {
    "id": "6705",
    "label": "multicast"
  },
  "6814": {
    "id": "6814",
    "label": "audit"
  },
  "6997": {
    "id": "6997",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "01de"
    ]
  },
  "7157": {
    "id": "7157",
    "label": "according to a key or object property",
    "options": [
      "b07a"
    ]
  },
  "7386": {
    "id": "7386",
    "label": "using a specific subject implementation",
    "options": [
      "6705"
    ]
  },
  "7627": {
    "id": "7627",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ef83"
    ]
  },
  "7778": {
    "id": "7778",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "d6a0"
    ]
  },
  "8176": {
    "id": "8176",
    "label": "I want to allow some values to pass",
    "options": [
      "fde9",
      "2e88",
      "1425",
      "309b",
      "c0e3"
    ]
  },
  "8281": {
    "id": "8281",
    "label": "subscribeOn"
  },
  "8831": {
    "id": "8831",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "d95e"
    ]
  },
  "8978": {
    "id": "8978",
    "label": "finalize"
  },
  "9102": {
    "id": "9102",
    "label": "that just completes, without emitting values",
    "options": [
      "36e7"
    ]
  },
  "9611": {
    "id": "9611",
    "label": "immediately",
    "options": [
      "c76a"
    ]
  },
  "9c90": {
    "id": "9c90",
    "label": "mapTo"
  },
  "e1d6": {
    "id": "e1d6",
    "label": "to be a constant value",
    "options": [
      "9c90"
    ]
  },
  "6a23": {
    "id": "6a23",
    "label": "map"
  },
  "c5e1": {
    "id": "c5e1",
    "label": "to be a value calculated through a formula",
    "options": [
      "6a23"
    ]
  },
  "54dd": {
    "id": "54dd",
    "label": "I want to change each emitted value",
    "options": [
      "e1d6",
      "c5e1"
    ]
  },
  "a2ee": {
    "id": "a2ee",
    "label": "pluck"
  },
  "936f": {
    "id": "936f",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "a2ee"
    ]
  },
  "bf3f": {
    "id": "bf3f",
    "label": "tap"
  },
  "2cd6": {
    "id": "2cd6",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "bf3f"
    ]
  },
  "7a24": {
    "id": "7a24",
    "label": "filter"
  },
  "fde9": {
    "id": "fde9",
    "label": "based on custom logic",
    "options": [
      "7a24"
    ]
  },
  "98e0": {
    "id": "98e0",
    "label": "first"
  },
  "99ea": {
    "id": "99ea",
    "label": "and only the first value",
    "options": [
      "98e0"
    ]
  },
  "6af4": {
    "id": "6af4",
    "label": "take"
  },
  "5bfc": {
    "id": "5bfc",
    "label": "based on a given amount",
    "options": [
      "6af4"
    ]
  },
  "88a6": {
    "id": "88a6",
    "label": "takeWhile"
  },
  "ebd5": {
    "id": "ebd5",
    "label": "based on custom logic",
    "options": [
      "88a6"
    ]
  },
  "2e88": {
    "id": "2e88",
    "label": "if they are at the start of the Observable",
    "options": [
      "99ea",
      "5bfc",
      "ebd5"
    ]
  },
  "f317": {
    "id": "f317",
    "label": "elementAt"
  },
  "7ec3": {
    "id": "7ec3",
    "label": "last"
  },
  "7a19": {
    "id": "7a19",
    "label": "and only the last value",
    "options": [
      "7ec3"
    ]
  },
  "3ca3": {
    "id": "3ca3",
    "label": "takeLast"
  },
  "c8b8": {
    "id": "c8b8",
    "label": "based on a given amount",
    "options": [
      "3ca3"
    ]
  },
  "309b": {
    "id": "309b",
    "label": "if they are at the end of the Observable",
    "options": [
      "7a19",
      "c8b8"
    ]
  },
  "5ba5": {
    "id": "5ba5",
    "label": "takeUntil"
  },
  "c0e3": {
    "id": "c0e3",
    "label": "until another Observable emits a value",
    "options": [
      "5ba5"
    ]
  },
  "14a6": {
    "id": "14a6",
    "label": "ignoreElements"
  },
  "e44f": {
    "id": "e44f",
    "label": "skip"
  },
  "c32a": {
    "id": "c32a",
    "label": "based on a given amount",
    "options": [
      "e44f"
    ]
  },
  "ed17": {
    "id": "ed17",
    "label": "skipWhile"
  },
  "e574": {
    "id": "e574",
    "label": "based on custom logic",
    "options": [
      "ed17"
    ]
  },
  "afae": {
    "id": "afae",
    "label": "skipLast"
  },
  "e9cd": {
    "id": "e9cd",
    "label": "from the end of the Observable",
    "options": [
      "afae"
    ]
  },
  "a6e6": {
    "id": "a6e6",
    "label": "until another Observable emits a value",
    "options": [
      "5938"
    ]
  },
  "fe0c": {
    "id": "fe0c",
    "label": "distinctUntilChanged"
  },
  "0ed2": {
    "id": "0ed2",
    "label": "emitted just before the current value",
    "options": [
      "fe0c"
    ]
  },
  "604e": {
    "id": "604e",
    "label": "zip"
  },
  "cd43": {
    "id": "cd43",
    "label": "emitted some time in the past",
    "options": [
      "604e"
    ]
  },
  "5ba0": {
    "id": "5ba0",
    "label": "according to value equality",
    "options": [
      "0ed2",
      "cd43"
    ]
  },
  "8b9b": {
    "id": "8b9b",
    "label": "distinctUntilKeyChanged"
  },
  "b07a": {
    "id": "b07a",
    "label": "emitted just before the current value",
    "options": [
      "8b9b"
    ]
  },
  "fc26": {
    "id": "fc26",
    "label": "that match some previous value",
    "options": [
      "5ba0",
      "7157"
    ]
  },
  "b914": {
    "id": "b914",
    "label": "throttle"
  },
  "f0a6": {
    "id": "f0a6",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "b914"
    ]
  },
  "0d97": {
    "id": "0d97",
    "label": "throttleTime"
  },
  "60cd": {
    "id": "60cd",
    "label": "by emitting the first value in each time window",
    "options": [
      "f0a6",
      "1403"
    ]
  },
  "6d81": {
    "id": "6d81",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "6814"
    ]
  },
  "96bc": {
    "id": "96bc",
    "label": "auditTime"
  },
  "ba68": {
    "id": "ba68",
    "label": "where time windows are determined by a time duration",
    "options": [
      "96bc"
    ]
  },
  "a2c6": {
    "id": "a2c6",
    "label": "by emitting the last value in each time window",
    "options": [
      "6d81",
      "ba68"
    ]
  },
  "3e5c": {
    "id": "3e5c",
    "label": "debounce"
  },
  "7be0": {
    "id": "7be0",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "3e5c"
    ]
  },
  "d95e": {
    "id": "d95e",
    "label": "debounceTime"
  },
  "a184": {
    "id": "a184",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "7be0",
      "8831"
    ]
  },
  "b6fc": {
    "id": "b6fc",
    "label": "I want to ignore values",
    "options": [
      "3408",
      "5557",
      "e9cd",
      "a6e6",
      "fc26",
      "2905"
    ]
  },
  "d29f": {
    "id": "d29f",
    "label": "reduce"
  },
  "e753": {
    "id": "e753",
    "label": "and only output the final computed value",
    "options": [
      "d29f"
    ]
  },
  "adb3": {
    "id": "adb3",
    "label": "scan"
  },
  "9a1c": {
    "id": "9a1c",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "adb3"
    ]
  },
  "3dee": {
    "id": "3dee",
    "label": "mergeScan"
  },
  "c503": {
    "id": "c503",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "3dee"
    ]
  },
  "d350": {
    "id": "d350",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "e753",
      "9a1c",
      "c503"
    ]
  },
  "a8a8": {
    "id": "a8a8",
    "label": "materialize"
  },
  "d76a": {
    "id": "d76a",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "a8a8"
    ]
  },
  "d8c2": {
    "id": "d8c2",
    "label": "timeInterval"
  },
  "4c06": {
    "id": "4c06",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "d8c2"
    ]
  },
  "cafe": {
    "id": "cafe",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "d76a",
      "4c06"
    ]
  },
  "b51f": {
    "id": "b51f",
    "label": "I want to throw an error",
    "options": [
      "6381"
    ]
  },
  "cea4": {
    "id": "cea4",
    "label": "I want to switch to another Observable",
    "options": [
      "4927"
    ]
  },
  "ddb7": {
    "id": "ddb7",
    "label": "after a period of inactivity",
    "options": [
      "b51f",
      "cea4"
    ]
  },
  "f11c": {
    "id": "f11c",
    "label": "single"
  },
  "e515": {
    "id": "e515",
    "label": "I want to ensure there is only one value",
    "options": [
      "f11c"
    ]
  },
  "37fc": {
    "id": "37fc",
    "label": "count"
  },
  "504d": {
    "id": "504d",
    "label": "I want to know how many values it emits",
    "options": [
      "37fc"
    ]
  },
  "a181": {
    "id": "a181",
    "label": "startWith"
  },
  "d1c5": {
    "id": "d1c5",
    "label": "delay"
  },
  "c85e": {
    "id": "c85e",
    "label": "based on a given amount of time",
    "options": [
      "d1c5"
    ]
  },
  "394a": {
    "id": "394a",
    "label": "delayWhen"
  },
  "f1cf": {
    "id": "f1cf",
    "label": "based on the emissions of another Observable",
    "options": [
      "394a"
    ]
  },
  "8ba8": {
    "id": "8ba8",
    "label": "I want to delay the emissions",
    "options": [
      "c85e",
      "f1cf"
    ]
  },
  "d80b": {
    "id": "d80b",
    "label": "toArray"
  },
  "18e0": {
    "id": "18e0",
    "label": "and convert to an array",
    "options": [
      "d80b"
    ]
  },
  "019b": {
    "id": "019b",
    "label": "Observable",
    "method": "toPromise"
  },
  "898e": {
    "id": "898e",
    "label": "and convert to a Promise",
    "options": [
      "019b"
    ]
  },
  "d072": {
    "id": "d072",
    "label": "until the Observable completes",
    "options": [
      "18e0",
      "898e"
    ]
  },
  "23a6": {
    "id": "23a6",
    "label": "pairwise"
  },
  "a5b4": {
    "id": "a5b4",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "23a6"
    ]
  },
  "172a": {
    "id": "172a",
    "label": "partition"
  },
  "1a36": {
    "id": "1a36",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "172a"
    ]
  },
  "124c": {
    "id": "124c",
    "label": "bufferCount"
  },
  "135f": {
    "id": "135f",
    "label": "and emit the group as an array",
    "options": [
      "124c"
    ]
  },
  "3f23": {
    "id": "3f23",
    "label": "windowCount"
  },
  "53fb": {
    "id": "53fb",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3f23"
    ]
  },
  "852c": {
    "id": "852c",
    "label": "in batches of a particular size",
    "options": [
      "135f",
      "53fb"
    ]
  },
  "17fe": {
    "id": "17fe",
    "label": "bufferTime"
  },
  "3de9": {
    "id": "3de9",
    "label": "and emit the group as an array",
    "options": [
      "17fe"
    ]
  },
  "f944": {
    "id": "f944",
    "label": "windowTime"
  },
  "27c3": {
    "id": "27c3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f944"
    ]
  },
  "c5fb": {
    "id": "c5fb",
    "label": "based on time",
    "options": [
      "3de9",
      "27c3"
    ]
  },
  "79a3": {
    "id": "79a3",
    "label": "buffer"
  },
  "dd39": {
    "id": "dd39",
    "label": "and emit the group as an array",
    "options": [
      "79a3"
    ]
  },
  "169a": {
    "id": "169a",
    "label": "window"
  },
  "69c8": {
    "id": "69c8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "169a"
    ]
  },
  "408e": {
    "id": "408e",
    "label": "until another Observable emits",
    "options": [
      "dd39",
      "69c8"
    ]
  },
  "3b59": {
    "id": "3b59",
    "label": "bufferWhen"
  },
  "f6ef": {
    "id": "f6ef",
    "label": "windowWhen"
  },
  "a11e": {
    "id": "a11e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f6ef"
    ]
  },
  "a6d5": {
    "id": "a6d5",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "3012",
      "a11e"
    ]
  },
  "1a2e": {
    "id": "1a2e",
    "label": "bufferToggle"
  },
  "f015": {
    "id": "f015",
    "label": "and emit the group as an array",
    "options": [
      "1a2e"
    ]
  },
  "765e": {
    "id": "765e",
    "label": "windowToggle"
  },
  "7ab9": {
    "id": "7ab9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "765e"
    ]
  },
  "58b0": {
    "id": "58b0",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "f015",
      "7ab9"
    ]
  },
  "1b3a": {
    "id": "1b3a",
    "label": "groupBy"
  },
  "17e8": {
    "id": "17e8",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "1b3a"
    ]
  },
  "073a": {
    "id": "073a",
    "label": "I want to group the values",
    "options": [
      "d072",
      "a5b4",
      "1a36",
      "852c",
      "c5fb",
      "408e",
      "a6d5",
      "58b0",
      "17e8"
    ]
  },
  "7dd6": {
    "id": "7dd6",
    "label": "mergeMapTo"
  },
  "ab41": {
    "id": "ab41",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7dd6"
    ]
  },
  "79d8": {
    "id": "79d8",
    "label": "mergeMap"
  },
  "b207": {
    "id": "b207",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "ab41",
      "5021"
    ]
  },
  "5c41": {
    "id": "5c41",
    "label": "concatMapTo"
  },
  "01d3": {
    "id": "01d3",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "5c41"
    ]
  },
  "e80d": {
    "id": "e80d",
    "label": "concatMap"
  },
  "01b3": {
    "id": "01b3",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e80d"
    ]
  },
  "9b39": {
    "id": "9b39",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "01d3",
      "01b3"
    ]
  },
  "01de": {
    "id": "01de",
    "label": "switchMapTo"
  },
  "a6b9": {
    "id": "a6b9",
    "label": "switchMap"
  },
  "62ce": {
    "id": "62ce",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a6b9"
    ]
  },
  "fee8": {
    "id": "fee8",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "6997",
      "62ce"
    ]
  },
  "7bb2": {
    "id": "7bb2",
    "label": "exhaustMap"
  },
  "9e14": {
    "id": "9e14",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "7bb2"
    ]
  },
  "d6a0": {
    "id": "d6a0",
    "label": "expand"
  },
  "6ed1": {
    "id": "6ed1",
    "label": "I want to start a new Observable for each value",
    "options": [
      "b207",
      "9b39",
      "fee8",
      "9e14",
      "7778"
    ]
  },
  "867c": {
    "id": "867c",
    "label": "pipe"
  },
  "1b0c": {
    "id": "1b0c",
    "label": "I want to perform custom operations",
    "options": [
      "867c"
    ]
  },
  "aadb": {
    "id": "aadb",
    "label": "share"
  },
  "965e": {
    "id": "965e",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "aadb"
    ]
  },
  "8ee6": {
    "id": "8ee6",
    "label": "publish"
  },
  "f44f": {
    "id": "f44f",
    "label": "and start it manually or imperatively",
    "options": [
      "8ee6"
    ]
  },
  "f537": {
    "id": "f537",
    "label": "publishBehavior"
  },
  "57d4": {
    "id": "57d4",
    "label": "using a BehaviorSubject",
    "options": [
      "f537"
    ]
  },
  "793f": {
    "id": "793f",
    "label": "publishReplay"
  },
  "1c6a": {
    "id": "1c6a",
    "label": "using a ReplaySubject",
    "options": [
      "793f"
    ]
  },
  "6ccd": {
    "id": "6ccd",
    "label": "publishLast"
  },
  "d509": {
    "id": "d509",
    "label": "using an AsyncSubject",
    "options": [
      "6ccd"
    ]
  },
  "c432": {
    "id": "c432",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "3777",
      "57d4",
      "1c6a",
      "d509",
      "7386"
    ]
  },
  "159e": {
    "id": "159e",
    "label": "catchError"
  },
  "a690": {
    "id": "a690",
    "label": "I want to start a new Observable",
    "options": [
      "159e"
    ]
  },
  "c76a": {
    "id": "c76a",
    "label": "retry"
  },
  "c27c": {
    "id": "c27c",
    "label": "retryWhen"
  },
  "bcb9": {
    "id": "bcb9",
    "label": "when another Observable emits",
    "options": [
      "c27c"
    ]
  },
  "a21c": {
    "id": "a21c",
    "label": "when an error occurs",
    "options": [
      "a690",
      "2577"
    ]
  },
  "5c7f": {
    "id": "5c7f",
    "label": "repeat"
  },
  "bd1e": {
    "id": "bd1e",
    "label": "immediately",
    "options": [
      "5c7f"
    ]
  },
  "66d2": {
    "id": "66d2",
    "label": "repeatWhen"
  },
  "90de": {
    "id": "90de",
    "label": "when another Observable emits",
    "options": [
      "66d2"
    ]
  },
  "0765": {
    "id": "0765",
    "label": "I want to re-subscribe",
    "options": [
      "bd1e",
      "90de"
    ]
  },
  "51d4": {
    "id": "51d4",
    "label": "I want to start a new Observable",
    "options": [
      "1970"
    ]
  },
  "6da9": {
    "id": "6da9",
    "label": "when it completes",
    "options": [
      "0765",
      "51d4"
    ]
  },
  "d401": {
    "id": "d401",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "8978"
    ]
  },
  "dc65": {
    "id": "dc65",
    "label": "that routes calls to subscribe",
    "options": [
      "8281"
    ]
  },
  "c2d6": {
    "id": "c2d6",
    "label": "observeOn"
  },
  "25d1": {
    "id": "25d1",
    "label": "that routes values to observers",
    "options": [
      "c2d6"
    ]
  },
  "b433": {
    "id": "b433",
    "label": "race"
  },
  "705c": {
    "id": "705c",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "b433"
    ]
  },
  "c63f": {
    "id": "c63f",
    "label": "merge"
  },
  "c4b3": {
    "id": "c4b3",
    "label": "I want to output the values from either of them",
    "options": [
      "c63f"
    ]
  },
  "0ca2": {
    "id": "0ca2",
    "label": "combineLatest"
  },
  "ec30": {
    "id": "ec30",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "0ca2"
    ]
  },
  "5b03": {
    "id": "5b03",
    "label": "withLatestFrom"
  },
  "a0fc": {
    "id": "a0fc",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "5b03"
    ]
  },
  "087c": {
    "id": "087c",
    "label": "zip"
  },
  "205e": {
    "id": "205e",
    "label": "using each source value only once",
    "options": [
      "087c"
    ]
  },
  "9d4c": {
    "id": "9d4c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ec30",
      "a0fc",
      "205e"
    ]
  },
  "4bd1": {
    "id": "4bd1",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "705c",
      "c4b3",
      "9d4c"
    ]
  },
  "476d": {
    "id": "476d",
    "label": "I have one existing Observable, and",
    "options": [
      "54dd",
      "936f",
      "2cd6",
      "8176",
      "b6fc",
      "d350",
      "cafe",
      "ddb7",
      "e515",
      "504d",
      "3537",
      "8ba8",
      "073a",
      "6ed1",
      "1b0c",
      "c432",
      "a21c",
      "6da9",
      "d401",
      "4812",
      "4bd1"
    ]
  },
  "998c": {
    "id": "998c",
    "label": "race"
  },
  "a375": {
    "id": "a375",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "998c"
    ]
  },
  "b069": {
    "id": "b069",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "3150"
    ]
  },
  "f93e": {
    "id": "f93e",
    "label": "merge"
  },
  "51d3": {
    "id": "51d3",
    "label": "I want to output the values from either of them",
    "options": [
      "f93e"
    ]
  },
  "ef83": {
    "id": "ef83",
    "label": "combineLatest"
  },
  "d4de": {
    "id": "d4de",
    "label": "using each source value only once",
    "options": [
      "604e"
    ]
  },
  "b74f": {
    "id": "b74f",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "7627",
      "d4de"
    ]
  },
  "fe2c": {
    "id": "fe2c",
    "label": "concat"
  },
  "72e4": {
    "id": "72e4",
    "label": "I want to subscribe to each in order",
    "options": [
      "fe2c"
    ]
  },
  "60e0": {
    "id": "60e0",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "a375",
      "b069",
      "51d3",
      "b74f",
      "72e4"
    ]
  },
  "01d0": {
    "id": "01d0",
    "label": "Observable",
    "method": "create"
  },
  "53ca": {
    "id": "53ca",
    "label": "using custom logic",
    "options": [
      "01d0"
    ]
  },
  "bb83": {
    "id": "bb83",
    "label": "generate"
  },
  "c66d": {
    "id": "c66d",
    "label": "using a state machine similar to a for loop",
    "options": [
      "bb83"
    ]
  },
  "b183": {
    "id": "b183",
    "label": "throwError"
  },
  "1d5c": {
    "id": "1d5c",
    "label": "that throws an error",
    "options": [
      "b183"
    ]
  },
  "36e7": {
    "id": "36e7",
    "label": "EMPTY"
  },
  "bee0": {
    "id": "bee0",
    "label": "NEVER"
  },
  "9db7": {
    "id": "9db7",
    "label": "that never emits anything",
    "options": [
      "bee0"
    ]
  },
  "d9b5": {
    "id": "d9b5",
    "label": "fromEvent"
  },
  "28cc": {
    "id": "28cc",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "d9b5"
    ]
  },
  "c494": {
    "id": "c494",
    "label": "fromEventPattern"
  },
  "bfe5": {
    "id": "bfe5",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "c494"
    ]
  },
  "40f5": {
    "id": "40f5",
    "label": "from"
  },
  "519b": {
    "id": "519b",
    "label": "from a Promise or an event source",
    "options": [
      "40f5"
    ]
  },
  "a712": {
    "id": "a712",
    "label": "from"
  },
  "a3c3": {
    "id": "a3c3",
    "label": "over the values in an array",
    "options": [
      "a712"
    ]
  },
  "eabe": {
    "id": "eabe",
    "label": "range"
  },
  "22eb": {
    "id": "22eb",
    "label": "over values in a numeric range",
    "options": [
      "eabe"
    ]
  },
  "d110": {
    "id": "d110",
    "label": "of"
  },
  "6c97": {
    "id": "6c97",
    "label": "over prefined values given as arguments",
    "options": [
      "d110"
    ]
  },
  "b68c": {
    "id": "b68c",
    "label": "interval"
  },
  "2e5b": {
    "id": "2e5b",
    "label": "regularly",
    "options": [
      "b68c"
    ]
  },
  "974f": {
    "id": "974f",
    "label": "timer"
  },
  "e7b0": {
    "id": "e7b0",
    "label": "with an optional initial delay",
    "options": [
      "974f"
    ]
  },
  "d5d5": {
    "id": "d5d5",
    "label": "that emits values on a timer",
    "options": [
      "2e5b",
      "e7b0"
    ]
  },
  "ecd6": {
    "id": "ecd6",
    "label": "defer"
  },
  "80ea": {
    "id": "80ea",
    "label": "which is built on demand when subscribed",
    "options": [
      "ecd6"
    ]
  },
  "8d88": {
    "id": "8d88",
    "label": "I want to create a new Observable",
    "options": [
      "53ca",
      "c66d",
      "1d5c",
      "9102",
      "9db7",
      "5289",
      "519b",
      "6335",
      "d5d5",
      "80ea"
    ]
  },
  "c511": {
    "id": "c511",
    "label": "bindCallback"
  },
  "71ac": {
    "id": "71ac",
    "label": "supporting a conventional callback API",
    "options": [
      "c511"
    ]
  },
  "c917": {
    "id": "c917",
    "label": "bindNodeCallback"
  },
  "290a": {
    "id": "290a",
    "label": "supporting Node.js callback style API",
    "options": [
      "c917"
    ]
  },
  "d0d2": {
    "id": "d0d2",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "71ac",
      "290a"
    ]
  },
  "db15": {
    "id": "db15",
    "label": "I have no Observables yet, and",
    "options": [
      "8d88",
      "d0d2"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "476d",
      "60e0",
      "db15"
    ]
  }
}