{
  "1012": {
    "id": "1012",
    "label": "when an error occurs",
    "options": [
      "bd66",
      "fda7"
    ]
  },
  "1080": {
    "id": "1080",
    "label": "of"
  },
  "1368": {
    "id": "1368",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "9ed6",
      "ad9d"
    ]
  },
  "1907": {
    "id": "1907",
    "label": "using a state machine similar to a for loop",
    "options": [
      "ac29"
    ]
  },
  "3281": {
    "id": "3281",
    "label": "takeLast"
  },
  "4011": {
    "id": "4011",
    "label": "and emit the group as an array",
    "options": [
      "ff84"
    ]
  },
  "4121": {
    "id": "4121",
    "label": "forkJoin"
  },
  "4870": {
    "id": "4870",
    "label": "delay"
  },
  "5363": {
    "id": "5363",
    "label": "based on custom logic",
    "options": [
      "9429"
    ]
  },
  "6360": {
    "id": "6360",
    "label": "from the end of the Observable",
    "options": [
      "0b0d"
    ]
  },
  "6507": {
    "id": "6507",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "adb5",
      "ed25"
    ]
  },
  "6768": {
    "id": "6768",
    "label": "I want to change each emitted value",
    "options": [
      "b51a",
      "c446"
    ]
  },
  "7136": {
    "id": "7136",
    "label": "according to value equality",
    "options": [
      "1f2d",
      "ce94"
    ]
  },
  "7386": {
    "id": "7386",
    "label": "pipe"
  },
  "7834": {
    "id": "7834",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "776c",
      "a3b8",
      "1fb1"
    ]
  },
  "8020": {
    "id": "8020",
    "label": "and only output the final computed value",
    "options": [
      "53c5"
    ]
  },
  "8695": {
    "id": "8695",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "dee7"
    ]
  },
  "8965": {
    "id": "8965",
    "label": "I want to change the scheduler",
    "options": [
      "d269",
      "d975"
    ]
  },
  "9429": {
    "id": "9429",
    "label": "skipWhile"
  },
  "9430": {
    "id": "9430",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "1d77"
    ]
  },
  "4d6d": {
    "id": "4d6d",
    "label": "mapTo"
  },
  "b51a": {
    "id": "b51a",
    "label": "to be a constant value",
    "options": [
      "4d6d"
    ]
  },
  "088f": {
    "id": "088f",
    "label": "map"
  },
  "c446": {
    "id": "c446",
    "label": "to be a value calculated through a formula",
    "options": [
      "088f"
    ]
  },
  "d26e": {
    "id": "d26e",
    "label": "pluck"
  },
  "ac3b": {
    "id": "ac3b",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "d26e"
    ]
  },
  "1d77": {
    "id": "1d77",
    "label": "tap"
  },
  "507a": {
    "id": "507a",
    "label": "filter"
  },
  "6a56": {
    "id": "6a56",
    "label": "based on custom logic",
    "options": [
      "507a"
    ]
  },
  "4dd2": {
    "id": "4dd2",
    "label": "first"
  },
  "7b7e": {
    "id": "7b7e",
    "label": "and only the first value",
    "options": [
      "4dd2"
    ]
  },
  "e216": {
    "id": "e216",
    "label": "take"
  },
  "dd92": {
    "id": "dd92",
    "label": "based on a given amount",
    "options": [
      "e216"
    ]
  },
  "ddbc": {
    "id": "ddbc",
    "label": "takeWhile"
  },
  "63d0": {
    "id": "63d0",
    "label": "based on custom logic",
    "options": [
      "ddbc"
    ]
  },
  "e822": {
    "id": "e822",
    "label": "if they are at the start of the Observable",
    "options": [
      "7b7e",
      "dd92",
      "63d0"
    ]
  },
  "503b": {
    "id": "503b",
    "label": "elementAt"
  },
  "c48f": {
    "id": "c48f",
    "label": "if they are exactly the n-th emission",
    "options": [
      "503b"
    ]
  },
  "d149": {
    "id": "d149",
    "label": "last"
  },
  "c258": {
    "id": "c258",
    "label": "and only the last value",
    "options": [
      "d149"
    ]
  },
  "f17d": {
    "id": "f17d",
    "label": "based on a given amount",
    "options": [
      "3281"
    ]
  },
  "b2a1": {
    "id": "b2a1",
    "label": "if they are at the end of the Observable",
    "options": [
      "c258",
      "f17d"
    ]
  },
  "374b": {
    "id": "374b",
    "label": "takeUntil"
  },
  "9f1a": {
    "id": "9f1a",
    "label": "until another Observable emits a value",
    "options": [
      "374b"
    ]
  },
  "08f4": {
    "id": "08f4",
    "label": "I want to allow some values to pass",
    "options": [
      "6a56",
      "e822",
      "c48f",
      "b2a1",
      "9f1a"
    ]
  },
  "09fd": {
    "id": "09fd",
    "label": "ignoreElements"
  },
  "90a7": {
    "id": "90a7",
    "label": "altogether",
    "options": [
      "09fd"
    ]
  },
  "9bc9": {
    "id": "9bc9",
    "label": "skip"
  },
  "10c0": {
    "id": "10c0",
    "label": "based on a given amount",
    "options": [
      "9bc9"
    ]
  },
  "02b5": {
    "id": "02b5",
    "label": "from the start of the Observable",
    "options": [
      "10c0",
      "5363"
    ]
  },
  "0b0d": {
    "id": "0b0d",
    "label": "skipLast"
  },
  "60bd": {
    "id": "60bd",
    "label": "skipUntil"
  },
  "03e0": {
    "id": "03e0",
    "label": "until another Observable emits a value",
    "options": [
      "60bd"
    ]
  },
  "0edb": {
    "id": "0edb",
    "label": "distinctUntilChanged"
  },
  "1f2d": {
    "id": "1f2d",
    "label": "emitted just before the current value",
    "options": [
      "0edb"
    ]
  },
  "c45c": {
    "id": "c45c",
    "label": "distinct"
  },
  "ce94": {
    "id": "ce94",
    "label": "emitted some time in the past",
    "options": [
      "c45c"
    ]
  },
  "1ac7": {
    "id": "1ac7",
    "label": "distinctUntilKeyChanged"
  },
  "130f": {
    "id": "130f",
    "label": "emitted just before the current value",
    "options": [
      "1ac7"
    ]
  },
  "b5bf": {
    "id": "b5bf",
    "label": "according to a key or object property",
    "options": [
      "130f"
    ]
  },
  "220e": {
    "id": "220e",
    "label": "that match some previous value",
    "options": [
      "7136",
      "b5bf"
    ]
  },
  "e10f": {
    "id": "e10f",
    "label": "throttle"
  },
  "0d7b": {
    "id": "0d7b",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e10f"
    ]
  },
  "3c85": {
    "id": "3c85",
    "label": "throttleTime"
  },
  "2f81": {
    "id": "2f81",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3c85"
    ]
  },
  "3e58": {
    "id": "3e58",
    "label": "by emitting the first value in each time window",
    "options": [
      "0d7b",
      "2f81"
    ]
  },
  "e005": {
    "id": "e005",
    "label": "audit"
  },
  "9db7": {
    "id": "9db7",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e005"
    ]
  },
  "82c8": {
    "id": "82c8",
    "label": "auditTime"
  },
  "fa6d": {
    "id": "fa6d",
    "label": "where time windows are determined by a time duration",
    "options": [
      "82c8"
    ]
  },
  "ae0d": {
    "id": "ae0d",
    "label": "by emitting the last value in each time window",
    "options": [
      "9db7",
      "fa6d"
    ]
  },
  "d0ae": {
    "id": "d0ae",
    "label": "debounce"
  },
  "9ed6": {
    "id": "9ed6",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "d0ae"
    ]
  },
  "65b0": {
    "id": "65b0",
    "label": "debounceTime"
  },
  "ad9d": {
    "id": "ad9d",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "65b0"
    ]
  },
  "c2ef": {
    "id": "c2ef",
    "label": "that occur too frequently",
    "options": [
      "3e58",
      "ae0d",
      "1368"
    ]
  },
  "0276": {
    "id": "0276",
    "label": "I want to ignore values",
    "options": [
      "90a7",
      "02b5",
      "6360",
      "03e0",
      "220e",
      "c2ef"
    ]
  },
  "53c5": {
    "id": "53c5",
    "label": "reduce"
  },
  "d470": {
    "id": "d470",
    "label": "scan"
  },
  "0658": {
    "id": "0658",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "d470"
    ]
  },
  "adf2": {
    "id": "adf2",
    "label": "mergeScan"
  },
  "a727": {
    "id": "a727",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "adf2"
    ]
  },
  "b2bf": {
    "id": "b2bf",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "8020",
      "0658",
      "a727"
    ]
  },
  "4e2d": {
    "id": "4e2d",
    "label": "materialize"
  },
  "68a7": {
    "id": "68a7",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "4e2d"
    ]
  },
  "7eac": {
    "id": "7eac",
    "label": "timeInterval"
  },
  "bb23": {
    "id": "bb23",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "7eac"
    ]
  },
  "2bbf": {
    "id": "2bbf",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "68a7",
      "bb23"
    ]
  },
  "f510": {
    "id": "f510",
    "label": "timeout"
  },
  "eac1": {
    "id": "eac1",
    "label": "I want to throw an error",
    "options": [
      "f510"
    ]
  },
  "52b7": {
    "id": "52b7",
    "label": "timeoutWith"
  },
  "cd40": {
    "id": "cd40",
    "label": "I want to switch to another Observable",
    "options": [
      "52b7"
    ]
  },
  "1d0e": {
    "id": "1d0e",
    "label": "after a period of inactivity",
    "options": [
      "eac1",
      "cd40"
    ]
  },
  "59dd": {
    "id": "59dd",
    "label": "single"
  },
  "bc30": {
    "id": "bc30",
    "label": "I want to ensure there is only one value",
    "options": [
      "59dd"
    ]
  },
  "4d9e": {
    "id": "4d9e",
    "label": "count"
  },
  "08ef": {
    "id": "08ef",
    "label": "I want to know how many values it emits",
    "options": [
      "4d9e"
    ]
  },
  "0280": {
    "id": "0280",
    "label": "startWith"
  },
  "0603": {
    "id": "0603",
    "label": "I want to prepend one value",
    "options": [
      "0280"
    ]
  },
  "8aa1": {
    "id": "8aa1",
    "label": "based on a given amount of time",
    "options": [
      "4870"
    ]
  },
  "57d3": {
    "id": "57d3",
    "label": "delayWhen"
  },
  "6c75": {
    "id": "6c75",
    "label": "based on the emissions of another Observable",
    "options": [
      "57d3"
    ]
  },
  "cd56": {
    "id": "cd56",
    "label": "I want to delay the emissions",
    "options": [
      "8aa1",
      "6c75"
    ]
  },
  "351e": {
    "id": "351e",
    "label": "toArray"
  },
  "b8b9": {
    "id": "b8b9",
    "label": "and convert to an array",
    "options": [
      "351e"
    ]
  },
  "1e5f": {
    "id": "1e5f",
    "label": "Observable",
    "method": "toPromise"
  },
  "754a": {
    "id": "754a",
    "label": "and convert to a Promise",
    "options": [
      "1e5f"
    ]
  },
  "db67": {
    "id": "db67",
    "label": "until the Observable completes",
    "options": [
      "b8b9",
      "754a"
    ]
  },
  "ac88": {
    "id": "ac88",
    "label": "pairwise"
  },
  "e7b0": {
    "id": "e7b0",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "ac88"
    ]
  },
  "2d7f": {
    "id": "2d7f",
    "label": "partition"
  },
  "a9ed": {
    "id": "a9ed",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "2d7f"
    ]
  },
  "9d94": {
    "id": "9d94",
    "label": "bufferCount"
  },
  "2b8d": {
    "id": "2b8d",
    "label": "and emit the group as an array",
    "options": [
      "9d94"
    ]
  },
  "fe48": {
    "id": "fe48",
    "label": "windowCount"
  },
  "6add": {
    "id": "6add",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fe48"
    ]
  },
  "861f": {
    "id": "861f",
    "label": "in batches of a particular size",
    "options": [
      "2b8d",
      "6add"
    ]
  },
  "ff84": {
    "id": "ff84",
    "label": "bufferTime"
  },
  "e1e3": {
    "id": "e1e3",
    "label": "windowTime"
  },
  "e8d5": {
    "id": "e8d5",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e1e3"
    ]
  },
  "d06f": {
    "id": "d06f",
    "label": "based on time",
    "options": [
      "4011",
      "e8d5"
    ]
  },
  "0553": {
    "id": "0553",
    "label": "buffer"
  },
  "e5aa": {
    "id": "e5aa",
    "label": "and emit the group as an array",
    "options": [
      "0553"
    ]
  },
  "9a87": {
    "id": "9a87",
    "label": "window"
  },
  "5dd6": {
    "id": "5dd6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9a87"
    ]
  },
  "d1b8": {
    "id": "d1b8",
    "label": "until another Observable emits",
    "options": [
      "e5aa",
      "5dd6"
    ]
  },
  "bd3a": {
    "id": "bd3a",
    "label": "bufferWhen"
  },
  "adb5": {
    "id": "adb5",
    "label": "and emit the group as an array",
    "options": [
      "bd3a"
    ]
  },
  "e392": {
    "id": "e392",
    "label": "windowWhen"
  },
  "ed25": {
    "id": "ed25",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e392"
    ]
  },
  "7f85": {
    "id": "7f85",
    "label": "bufferToggle"
  },
  "b146": {
    "id": "b146",
    "label": "and emit the group as an array",
    "options": [
      "7f85"
    ]
  },
  "fab6": {
    "id": "fab6",
    "label": "windowToggle"
  },
  "f50d": {
    "id": "f50d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fab6"
    ]
  },
  "eae7": {
    "id": "eae7",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "b146",
      "f50d"
    ]
  },
  "c629": {
    "id": "c629",
    "label": "groupBy"
  },
  "3b2a": {
    "id": "3b2a",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "c629"
    ]
  },
  "a48b": {
    "id": "a48b",
    "label": "I want to group the values",
    "options": [
      "db67",
      "e7b0",
      "a9ed",
      "861f",
      "d06f",
      "d1b8",
      "6507",
      "eae7",
      "3b2a"
    ]
  },
  "e925": {
    "id": "e925",
    "label": "mergeMapTo"
  },
  "09fc": {
    "id": "09fc",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e925"
    ]
  },
  "ae31": {
    "id": "ae31",
    "label": "mergeMap"
  },
  "df5c": {
    "id": "df5c",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "ae31"
    ]
  },
  "dd97": {
    "id": "dd97",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "09fc",
      "df5c"
    ]
  },
  "01c5": {
    "id": "01c5",
    "label": "concatMapTo"
  },
  "a85a": {
    "id": "a85a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "01c5"
    ]
  },
  "dee7": {
    "id": "dee7",
    "label": "concatMap"
  },
  "551f": {
    "id": "551f",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "a85a",
      "8695"
    ]
  },
  "28eb": {
    "id": "28eb",
    "label": "switchMapTo"
  },
  "c33f": {
    "id": "c33f",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "28eb"
    ]
  },
  "5b6d": {
    "id": "5b6d",
    "label": "switchMap"
  },
  "6b1c": {
    "id": "6b1c",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "5b6d"
    ]
  },
  "32cf": {
    "id": "32cf",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "c33f",
      "6b1c"
    ]
  },
  "aef5": {
    "id": "aef5",
    "label": "exhaustMap"
  },
  "0337": {
    "id": "0337",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "aef5"
    ]
  },
  "e48c": {
    "id": "e48c",
    "label": "expand"
  },
  "706d": {
    "id": "706d",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "e48c"
    ]
  },
  "9b15": {
    "id": "9b15",
    "label": "I want to start a new Observable for each value",
    "options": [
      "dd97",
      "551f",
      "32cf",
      "0337",
      "706d"
    ]
  },
  "0cb7": {
    "id": "0cb7",
    "label": "I want to perform custom operations",
    "options": [
      "7386"
    ]
  },
  "c7b3": {
    "id": "c7b3",
    "label": "share"
  },
  "f33b": {
    "id": "f33b",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "c7b3"
    ]
  },
  "68a2": {
    "id": "68a2",
    "label": "publish"
  },
  "242a": {
    "id": "242a",
    "label": "and start it manually or imperatively",
    "options": [
      "68a2"
    ]
  },
  "76ae": {
    "id": "76ae",
    "label": "using a conventional Subject",
    "options": [
      "f33b",
      "242a"
    ]
  },
  "2ce7": {
    "id": "2ce7",
    "label": "publishBehavior"
  },
  "c0a0": {
    "id": "c0a0",
    "label": "using a BehaviorSubject",
    "options": [
      "2ce7"
    ]
  },
  "dffc": {
    "id": "dffc",
    "label": "publishReplay"
  },
  "db41": {
    "id": "db41",
    "label": "using a ReplaySubject",
    "options": [
      "dffc"
    ]
  },
  "a134": {
    "id": "a134",
    "label": "publishLast"
  },
  "f385": {
    "id": "f385",
    "label": "using an AsyncSubject",
    "options": [
      "a134"
    ]
  },
  "bfb9": {
    "id": "bfb9",
    "label": "multicast"
  },
  "13fa": {
    "id": "13fa",
    "label": "using a specific subject implementation",
    "options": [
      "bfb9"
    ]
  },
  "d9dd": {
    "id": "d9dd",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "76ae",
      "c0a0",
      "db41",
      "f385",
      "13fa"
    ]
  },
  "2d91": {
    "id": "2d91",
    "label": "catchError"
  },
  "bd66": {
    "id": "bd66",
    "label": "I want to start a new Observable",
    "options": [
      "2d91"
    ]
  },
  "1e5b": {
    "id": "1e5b",
    "label": "retry"
  },
  "e325": {
    "id": "e325",
    "label": "immediately",
    "options": [
      "1e5b"
    ]
  },
  "dce6": {
    "id": "dce6",
    "label": "retryWhen"
  },
  "1bd9": {
    "id": "1bd9",
    "label": "when another Observable emits",
    "options": [
      "dce6"
    ]
  },
  "fda7": {
    "id": "fda7",
    "label": "I want to re-subscribe",
    "options": [
      "e325",
      "1bd9"
    ]
  },
  "466d": {
    "id": "466d",
    "label": "repeat"
  },
  "ce9c": {
    "id": "ce9c",
    "label": "immediately",
    "options": [
      "466d"
    ]
  },
  "c7e2": {
    "id": "c7e2",
    "label": "repeatWhen"
  },
  "acf7": {
    "id": "acf7",
    "label": "when another Observable emits",
    "options": [
      "c7e2"
    ]
  },
  "60dd": {
    "id": "60dd",
    "label": "I want to re-subscribe",
    "options": [
      "ce9c",
      "acf7"
    ]
  },
  "745b": {
    "id": "745b",
    "label": "concat"
  },
  "9cc2": {
    "id": "9cc2",
    "label": "I want to start a new Observable",
    "options": [
      "745b"
    ]
  },
  "fa63": {
    "id": "fa63",
    "label": "when it completes",
    "options": [
      "60dd",
      "9cc2"
    ]
  },
  "37e0": {
    "id": "37e0",
    "label": "finalize"
  },
  "b5db": {
    "id": "b5db",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "37e0"
    ]
  },
  "2d79": {
    "id": "2d79",
    "label": "subscribeOn"
  },
  "d269": {
    "id": "d269",
    "label": "that routes calls to subscribe",
    "options": [
      "2d79"
    ]
  },
  "3bbf": {
    "id": "3bbf",
    "label": "observeOn"
  },
  "d975": {
    "id": "d975",
    "label": "that routes values to observers",
    "options": [
      "3bbf"
    ]
  },
  "f852": {
    "id": "f852",
    "label": "race"
  },
  "2d64": {
    "id": "2d64",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "f852"
    ]
  },
  "e26a": {
    "id": "e26a",
    "label": "merge"
  },
  "a3ed": {
    "id": "a3ed",
    "label": "I want to output the values from either of them",
    "options": [
      "e26a"
    ]
  },
  "de78": {
    "id": "de78",
    "label": "combineLatest"
  },
  "776c": {
    "id": "776c",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "de78"
    ]
  },
  "ac13": {
    "id": "ac13",
    "label": "withLatestFrom"
  },
  "a3b8": {
    "id": "a3b8",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "ac13"
    ]
  },
  "70e9": {
    "id": "70e9",
    "label": "zip"
  },
  "1fb1": {
    "id": "1fb1",
    "label": "using each source value only once",
    "options": [
      "70e9"
    ]
  },
  "8e61": {
    "id": "8e61",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "2d64",
      "a3ed",
      "7834"
    ]
  },
  "38dd": {
    "id": "38dd",
    "label": "I have one existing Observable, and",
    "options": [
      "6768",
      "ac3b",
      "9430",
      "08f4",
      "0276",
      "b2bf",
      "2bbf",
      "1d0e",
      "bc30",
      "08ef",
      "0603",
      "cd56",
      "a48b",
      "9b15",
      "0cb7",
      "d9dd",
      "1012",
      "fa63",
      "b5db",
      "8965",
      "8e61"
    ]
  },
  "8ba1": {
    "id": "8ba1",
    "label": "race"
  },
  "2d3f": {
    "id": "2d3f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8ba1"
    ]
  },
  "0731": {
    "id": "0731",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "4121"
    ]
  },
  "6d65": {
    "id": "6d65",
    "label": "merge"
  },
  "748a": {
    "id": "748a",
    "label": "I want to output the values from either of them",
    "options": [
      "6d65"
    ]
  },
  "2deb": {
    "id": "2deb",
    "label": "combineLatest"
  },
  "d855": {
    "id": "d855",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2deb"
    ]
  },
  "5b0a": {
    "id": "5b0a",
    "label": "zip"
  },
  "218e": {
    "id": "218e",
    "label": "using each source value only once",
    "options": [
      "5b0a"
    ]
  },
  "c4ea": {
    "id": "c4ea",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "d855",
      "218e"
    ]
  },
  "23d8": {
    "id": "23d8",
    "label": "concat"
  },
  "88d8": {
    "id": "88d8",
    "label": "I want to subscribe to each in order",
    "options": [
      "23d8"
    ]
  },
  "34e8": {
    "id": "34e8",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "2d3f",
      "0731",
      "748a",
      "c4ea",
      "88d8"
    ]
  },
  "a242": {
    "id": "a242",
    "label": "Observable",
    "method": "create"
  },
  "674c": {
    "id": "674c",
    "label": "using custom logic",
    "options": [
      "a242"
    ]
  },
  "ac29": {
    "id": "ac29",
    "label": "generate"
  },
  "2d3a": {
    "id": "2d3a",
    "label": "throwError"
  },
  "bf87": {
    "id": "bf87",
    "label": "that throws an error",
    "options": [
      "2d3a"
    ]
  },
  "105a": {
    "id": "105a",
    "label": "EMPTY"
  },
  "14b2": {
    "id": "14b2",
    "label": "that just completes, without emitting values",
    "options": [
      "105a"
    ]
  },
  "0259": {
    "id": "0259",
    "label": "NEVER"
  },
  "442e": {
    "id": "442e",
    "label": "that never emits anything",
    "options": [
      "0259"
    ]
  },
  "4eeb": {
    "id": "4eeb",
    "label": "fromEvent"
  },
  "f9a1": {
    "id": "f9a1",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "4eeb"
    ]
  },
  "aab6": {
    "id": "aab6",
    "label": "fromEventPattern"
  },
  "905e": {
    "id": "905e",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "aab6"
    ]
  },
  "ce77": {
    "id": "ce77",
    "label": "from an existing source of events",
    "options": [
      "f9a1",
      "905e"
    ]
  },
  "b57d": {
    "id": "b57d",
    "label": "from"
  },
  "86b8": {
    "id": "86b8",
    "label": "from a Promise or an event source",
    "options": [
      "b57d"
    ]
  },
  "e1b5": {
    "id": "e1b5",
    "label": "from"
  },
  "948f": {
    "id": "948f",
    "label": "over the values in an array",
    "options": [
      "e1b5"
    ]
  },
  "bd78": {
    "id": "bd78",
    "label": "range"
  },
  "144f": {
    "id": "144f",
    "label": "over values in a numeric range",
    "options": [
      "bd78"
    ]
  },
  "a90e": {
    "id": "a90e",
    "label": "over prefined values given as arguments",
    "options": [
      "1080"
    ]
  },
  "4e11": {
    "id": "4e11",
    "label": "that iterates",
    "options": [
      "948f",
      "144f",
      "a90e"
    ]
  },
  "822e": {
    "id": "822e",
    "label": "interval"
  },
  "033f": {
    "id": "033f",
    "label": "regularly",
    "options": [
      "822e"
    ]
  },
  "a10d": {
    "id": "a10d",
    "label": "timer"
  },
  "0b42": {
    "id": "0b42",
    "label": "with an optional initial delay",
    "options": [
      "a10d"
    ]
  },
  "d350": {
    "id": "d350",
    "label": "that emits values on a timer",
    "options": [
      "033f",
      "0b42"
    ]
  },
  "9a05": {
    "id": "9a05",
    "label": "defer"
  },
  "5ca6": {
    "id": "5ca6",
    "label": "which is built on demand when subscribed",
    "options": [
      "9a05"
    ]
  },
  "bc0f": {
    "id": "bc0f",
    "label": "I want to create a new Observable",
    "options": [
      "674c",
      "1907",
      "bf87",
      "14b2",
      "442e",
      "ce77",
      "86b8",
      "4e11",
      "d350",
      "5ca6"
    ]
  },
  "e002": {
    "id": "e002",
    "label": "bindCallback"
  },
  "6e38": {
    "id": "6e38",
    "label": "supporting a conventional callback API",
    "options": [
      "e002"
    ]
  },
  "f0c2": {
    "id": "f0c2",
    "label": "bindNodeCallback"
  },
  "44b7": {
    "id": "44b7",
    "label": "supporting Node.js callback style API",
    "options": [
      "f0c2"
    ]
  },
  "f648": {
    "id": "f648",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "6e38",
      "44b7"
    ]
  },
  "da40": {
    "id": "da40",
    "label": "I have no Observables yet, and",
    "options": [
      "bc0f",
      "f648"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "38dd",
      "34e8",
      "da40"
    ]
  }
}