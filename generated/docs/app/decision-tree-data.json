{
  "1129": {
    "id": "1129",
    "label": "emitted just before the current value",
    "options": [
      "4690"
    ]
  },
  "1636": {
    "id": "1636",
    "label": "delay"
  },
  "1829": {
    "id": "1829",
    "label": "after a period of inactivity",
    "options": [
      "17c0",
      "7b25"
    ]
  },
  "1934": {
    "id": "1934",
    "label": "if they are at the end of the Observable",
    "options": [
      "5d41",
      "f3e6"
    ]
  },
  "1948": {
    "id": "1948",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "b078",
      "0a98",
      "c239"
    ]
  },
  "2020": {
    "id": "2020",
    "label": "combineLatest"
  },
  "2518": {
    "id": "2518",
    "label": "combineLatest"
  },
  "2630": {
    "id": "2630",
    "label": "based on custom logic",
    "options": [
      "5a4b"
    ]
  },
  "2720": {
    "id": "2720",
    "label": "generate"
  },
  "2860": {
    "id": "2860",
    "label": "that iterates",
    "options": [
      "50ba",
      "410e",
      "cfd4"
    ]
  },
  "3247": {
    "id": "3247",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "d142"
    ]
  },
  "3587": {
    "id": "3587",
    "label": "fromEventPattern"
  },
  "4139": {
    "id": "4139",
    "label": "according to value equality",
    "options": [
      "1129",
      "668f"
    ]
  },
  "4337": {
    "id": "4337",
    "label": "that routes values to observers",
    "options": [
      "41b3"
    ]
  },
  "4546": {
    "id": "4546",
    "label": "where time windows are determined by a time duration",
    "options": [
      "ead9"
    ]
  },
  "4629": {
    "id": "4629",
    "label": "until the Observable completes",
    "options": [
      "2a21",
      "1d28"
    ]
  },
  "4690": {
    "id": "4690",
    "label": "distinctUntilChanged"
  },
  "4919": {
    "id": "4919",
    "label": "until another Observable emits a value",
    "options": [
      "5a3b"
    ]
  },
  "5009": {
    "id": "5009",
    "label": "I want to subscribe to each in order",
    "options": [
      "33ef"
    ]
  },
  "5231": {
    "id": "5231",
    "label": "debounce"
  },
  "5493": {
    "id": "5493",
    "label": "I want to start a new Observable",
    "options": [
      "0710"
    ]
  },
  "5543": {
    "id": "5543",
    "label": "Observable",
    "method": "toPromise"
  },
  "5799": {
    "id": "5799",
    "label": "I want to prepend one value",
    "options": [
      "7b48"
    ]
  },
  "5929": {
    "id": "5929",
    "label": "based on a given amount",
    "options": [
      "93c2"
    ]
  },
  "7648": {
    "id": "7648",
    "label": "that occur too frequently",
    "options": [
      "7ef9",
      "0e5c",
      "b4d7"
    ]
  },
  "7728": {
    "id": "7728",
    "label": "and emit the group as a nested Observable",
    "options": [
      "39b1"
    ]
  },
  "8156": {
    "id": "8156",
    "label": "from an existing source of events",
    "options": [
      "8d46",
      "98ef"
    ]
  },
  "8251": {
    "id": "8251",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b061"
    ]
  },
  "8320": {
    "id": "8320",
    "label": "distinctUntilKeyChanged"
  },
  "8610": {
    "id": "8610",
    "label": "from"
  },
  "9452": {
    "id": "9452",
    "label": "pipe"
  },
  "9656": {
    "id": "9656",
    "label": "publishBehavior"
  },
  "e45a": {
    "id": "e45a",
    "label": "mapTo"
  },
  "5f88": {
    "id": "5f88",
    "label": "to be a constant value",
    "options": [
      "e45a"
    ]
  },
  "d8f1": {
    "id": "d8f1",
    "label": "map"
  },
  "058f": {
    "id": "058f",
    "label": "to be a value calculated through a formula",
    "options": [
      "d8f1"
    ]
  },
  "2d3e": {
    "id": "2d3e",
    "label": "I want to change each emitted value",
    "options": [
      "5f88",
      "058f"
    ]
  },
  "78a4": {
    "id": "78a4",
    "label": "pluck"
  },
  "e0be": {
    "id": "e0be",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "78a4"
    ]
  },
  "0adb": {
    "id": "0adb",
    "label": "tap"
  },
  "0b8b": {
    "id": "0b8b",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "0adb"
    ]
  },
  "5a4b": {
    "id": "5a4b",
    "label": "filter"
  },
  "0806": {
    "id": "0806",
    "label": "first"
  },
  "79c6": {
    "id": "79c6",
    "label": "and only the first value",
    "options": [
      "0806"
    ]
  },
  "93c2": {
    "id": "93c2",
    "label": "take"
  },
  "be33": {
    "id": "be33",
    "label": "takeWhile"
  },
  "11b1": {
    "id": "11b1",
    "label": "based on custom logic",
    "options": [
      "be33"
    ]
  },
  "32e9": {
    "id": "32e9",
    "label": "if they are at the start of the Observable",
    "options": [
      "79c6",
      "5929",
      "11b1"
    ]
  },
  "450b": {
    "id": "450b",
    "label": "elementAt"
  },
  "2a0a": {
    "id": "2a0a",
    "label": "if they are exactly the n-th emission",
    "options": [
      "450b"
    ]
  },
  "2a88": {
    "id": "2a88",
    "label": "last"
  },
  "5d41": {
    "id": "5d41",
    "label": "and only the last value",
    "options": [
      "2a88"
    ]
  },
  "09e2": {
    "id": "09e2",
    "label": "takeLast"
  },
  "f3e6": {
    "id": "f3e6",
    "label": "based on a given amount",
    "options": [
      "09e2"
    ]
  },
  "5a3b": {
    "id": "5a3b",
    "label": "takeUntil"
  },
  "1f81": {
    "id": "1f81",
    "label": "I want to allow some values to pass",
    "options": [
      "2630",
      "32e9",
      "2a0a",
      "1934",
      "4919"
    ]
  },
  "a80f": {
    "id": "a80f",
    "label": "ignoreElements"
  },
  "c204": {
    "id": "c204",
    "label": "altogether",
    "options": [
      "a80f"
    ]
  },
  "0cf3": {
    "id": "0cf3",
    "label": "skip"
  },
  "28df": {
    "id": "28df",
    "label": "based on a given amount",
    "options": [
      "0cf3"
    ]
  },
  "f2d0": {
    "id": "f2d0",
    "label": "skipWhile"
  },
  "80dd": {
    "id": "80dd",
    "label": "based on custom logic",
    "options": [
      "f2d0"
    ]
  },
  "2bef": {
    "id": "2bef",
    "label": "from the start of the Observable",
    "options": [
      "28df",
      "80dd"
    ]
  },
  "0e76": {
    "id": "0e76",
    "label": "skipLast"
  },
  "cac6": {
    "id": "cac6",
    "label": "from the end of the Observable",
    "options": [
      "0e76"
    ]
  },
  "01c2": {
    "id": "01c2",
    "label": "skipUntil"
  },
  "12e8": {
    "id": "12e8",
    "label": "until another Observable emits a value",
    "options": [
      "01c2"
    ]
  },
  "810d": {
    "id": "810d",
    "label": "distinct"
  },
  "668f": {
    "id": "668f",
    "label": "emitted some time in the past",
    "options": [
      "810d"
    ]
  },
  "bac7": {
    "id": "bac7",
    "label": "emitted just before the current value",
    "options": [
      "8320"
    ]
  },
  "cd37": {
    "id": "cd37",
    "label": "according to a key or object property",
    "options": [
      "bac7"
    ]
  },
  "e2d4": {
    "id": "e2d4",
    "label": "that match some previous value",
    "options": [
      "4139",
      "cd37"
    ]
  },
  "83b6": {
    "id": "83b6",
    "label": "throttle"
  },
  "bbb8": {
    "id": "bbb8",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "83b6"
    ]
  },
  "ead9": {
    "id": "ead9",
    "label": "throttleTime"
  },
  "7ef9": {
    "id": "7ef9",
    "label": "by emitting the first value in each time window",
    "options": [
      "bbb8",
      "4546"
    ]
  },
  "6ef1": {
    "id": "6ef1",
    "label": "audit"
  },
  "e608": {
    "id": "e608",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "6ef1"
    ]
  },
  "c502": {
    "id": "c502",
    "label": "auditTime"
  },
  "eb9a": {
    "id": "eb9a",
    "label": "where time windows are determined by a time duration",
    "options": [
      "c502"
    ]
  },
  "0e5c": {
    "id": "0e5c",
    "label": "by emitting the last value in each time window",
    "options": [
      "e608",
      "eb9a"
    ]
  },
  "50b5": {
    "id": "50b5",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "5231"
    ]
  },
  "592d": {
    "id": "592d",
    "label": "debounceTime"
  },
  "0cab": {
    "id": "0cab",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "592d"
    ]
  },
  "b4d7": {
    "id": "b4d7",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "50b5",
      "0cab"
    ]
  },
  "149c": {
    "id": "149c",
    "label": "I want to ignore values",
    "options": [
      "c204",
      "2bef",
      "cac6",
      "12e8",
      "e2d4",
      "7648"
    ]
  },
  "fdbb": {
    "id": "fdbb",
    "label": "reduce"
  },
  "523f": {
    "id": "523f",
    "label": "and only output the final computed value",
    "options": [
      "fdbb"
    ]
  },
  "c581": {
    "id": "c581",
    "label": "scan"
  },
  "156b": {
    "id": "156b",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "c581"
    ]
  },
  "240d": {
    "id": "240d",
    "label": "mergeScan"
  },
  "9e29": {
    "id": "9e29",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "240d"
    ]
  },
  "58d9": {
    "id": "58d9",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "523f",
      "156b",
      "9e29"
    ]
  },
  "e17d": {
    "id": "e17d",
    "label": "materialize"
  },
  "ee9d": {
    "id": "ee9d",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "e17d"
    ]
  },
  "6d3d": {
    "id": "6d3d",
    "label": "timeInterval"
  },
  "a07c": {
    "id": "a07c",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "6d3d"
    ]
  },
  "c4e1": {
    "id": "c4e1",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "ee9d",
      "a07c"
    ]
  },
  "912e": {
    "id": "912e",
    "label": "timeout"
  },
  "17c0": {
    "id": "17c0",
    "label": "I want to throw an error",
    "options": [
      "912e"
    ]
  },
  "6d7c": {
    "id": "6d7c",
    "label": "timeoutWith"
  },
  "7b25": {
    "id": "7b25",
    "label": "I want to switch to another Observable",
    "options": [
      "6d7c"
    ]
  },
  "5b82": {
    "id": "5b82",
    "label": "single"
  },
  "4baa": {
    "id": "4baa",
    "label": "I want to ensure there is only one value",
    "options": [
      "5b82"
    ]
  },
  "00fe": {
    "id": "00fe",
    "label": "count"
  },
  "cf55": {
    "id": "cf55",
    "label": "I want to know how many values it emits",
    "options": [
      "00fe"
    ]
  },
  "7b48": {
    "id": "7b48",
    "label": "startWith"
  },
  "1fb1": {
    "id": "1fb1",
    "label": "based on a given amount of time",
    "options": [
      "1636"
    ]
  },
  "0622": {
    "id": "0622",
    "label": "delayWhen"
  },
  "28e8": {
    "id": "28e8",
    "label": "based on the emissions of another Observable",
    "options": [
      "0622"
    ]
  },
  "b11f": {
    "id": "b11f",
    "label": "I want to delay the emissions",
    "options": [
      "1fb1",
      "28e8"
    ]
  },
  "3e3e": {
    "id": "3e3e",
    "label": "toArray"
  },
  "2a21": {
    "id": "2a21",
    "label": "and convert to an array",
    "options": [
      "3e3e"
    ]
  },
  "1d28": {
    "id": "1d28",
    "label": "and convert to a Promise",
    "options": [
      "5543"
    ]
  },
  "c966": {
    "id": "c966",
    "label": "pairwise"
  },
  "a845": {
    "id": "a845",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "c966"
    ]
  },
  "d142": {
    "id": "d142",
    "label": "partition"
  },
  "f213": {
    "id": "f213",
    "label": "bufferCount"
  },
  "52a6": {
    "id": "52a6",
    "label": "and emit the group as an array",
    "options": [
      "f213"
    ]
  },
  "4d17": {
    "id": "4d17",
    "label": "windowCount"
  },
  "c365": {
    "id": "c365",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4d17"
    ]
  },
  "de1d": {
    "id": "de1d",
    "label": "in batches of a particular size",
    "options": [
      "52a6",
      "c365"
    ]
  },
  "12cf": {
    "id": "12cf",
    "label": "bufferTime"
  },
  "4b2b": {
    "id": "4b2b",
    "label": "and emit the group as an array",
    "options": [
      "12cf"
    ]
  },
  "39b1": {
    "id": "39b1",
    "label": "windowTime"
  },
  "1be0": {
    "id": "1be0",
    "label": "based on time",
    "options": [
      "4b2b",
      "7728"
    ]
  },
  "7be6": {
    "id": "7be6",
    "label": "buffer"
  },
  "147a": {
    "id": "147a",
    "label": "and emit the group as an array",
    "options": [
      "7be6"
    ]
  },
  "2d77": {
    "id": "2d77",
    "label": "window"
  },
  "214c": {
    "id": "214c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2d77"
    ]
  },
  "e2ff": {
    "id": "e2ff",
    "label": "until another Observable emits",
    "options": [
      "147a",
      "214c"
    ]
  },
  "10d5": {
    "id": "10d5",
    "label": "bufferWhen"
  },
  "aac9": {
    "id": "aac9",
    "label": "and emit the group as an array",
    "options": [
      "10d5"
    ]
  },
  "fc9d": {
    "id": "fc9d",
    "label": "windowWhen"
  },
  "3bdc": {
    "id": "3bdc",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fc9d"
    ]
  },
  "8d3a": {
    "id": "8d3a",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "aac9",
      "3bdc"
    ]
  },
  "5b52": {
    "id": "5b52",
    "label": "bufferToggle"
  },
  "5f84": {
    "id": "5f84",
    "label": "and emit the group as an array",
    "options": [
      "5b52"
    ]
  },
  "37d8": {
    "id": "37d8",
    "label": "windowToggle"
  },
  "955c": {
    "id": "955c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "37d8"
    ]
  },
  "84bb": {
    "id": "84bb",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5f84",
      "955c"
    ]
  },
  "7f98": {
    "id": "7f98",
    "label": "groupBy"
  },
  "c74b": {
    "id": "c74b",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "7f98"
    ]
  },
  "04e4": {
    "id": "04e4",
    "label": "I want to group the values",
    "options": [
      "4629",
      "a845",
      "3247",
      "de1d",
      "1be0",
      "e2ff",
      "8d3a",
      "84bb",
      "c74b"
    ]
  },
  "d9c1": {
    "id": "d9c1",
    "label": "mergeMapTo"
  },
  "bf40": {
    "id": "bf40",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "d9c1"
    ]
  },
  "0f60": {
    "id": "0f60",
    "label": "mergeMap"
  },
  "c58b": {
    "id": "c58b",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0f60"
    ]
  },
  "b885": {
    "id": "b885",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "bf40",
      "c58b"
    ]
  },
  "4a0d": {
    "id": "4a0d",
    "label": "concatMapTo"
  },
  "bd87": {
    "id": "bd87",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "4a0d"
    ]
  },
  "b061": {
    "id": "b061",
    "label": "concatMap"
  },
  "82a2": {
    "id": "82a2",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "bd87",
      "8251"
    ]
  },
  "1a75": {
    "id": "1a75",
    "label": "switchMapTo"
  },
  "5d63": {
    "id": "5d63",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "1a75"
    ]
  },
  "df1c": {
    "id": "df1c",
    "label": "switchMap"
  },
  "b665": {
    "id": "b665",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "df1c"
    ]
  },
  "8f8f": {
    "id": "8f8f",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "5d63",
      "b665"
    ]
  },
  "f1cc": {
    "id": "f1cc",
    "label": "exhaustMap"
  },
  "75a5": {
    "id": "75a5",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "f1cc"
    ]
  },
  "0f4a": {
    "id": "0f4a",
    "label": "expand"
  },
  "d0ed": {
    "id": "d0ed",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "0f4a"
    ]
  },
  "47f3": {
    "id": "47f3",
    "label": "I want to start a new Observable for each value",
    "options": [
      "b885",
      "82a2",
      "8f8f",
      "75a5",
      "d0ed"
    ]
  },
  "e924": {
    "id": "e924",
    "label": "I want to perform custom operations",
    "options": [
      "9452"
    ]
  },
  "a045": {
    "id": "a045",
    "label": "share"
  },
  "c295": {
    "id": "c295",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "a045"
    ]
  },
  "377a": {
    "id": "377a",
    "label": "publish"
  },
  "1bc6": {
    "id": "1bc6",
    "label": "and start it manually or imperatively",
    "options": [
      "377a"
    ]
  },
  "8e45": {
    "id": "8e45",
    "label": "using a conventional Subject",
    "options": [
      "c295",
      "1bc6"
    ]
  },
  "d3e0": {
    "id": "d3e0",
    "label": "using a BehaviorSubject",
    "options": [
      "9656"
    ]
  },
  "5f94": {
    "id": "5f94",
    "label": "publishReplay"
  },
  "09a0": {
    "id": "09a0",
    "label": "using a ReplaySubject",
    "options": [
      "5f94"
    ]
  },
  "4e53": {
    "id": "4e53",
    "label": "publishLast"
  },
  "bc0f": {
    "id": "bc0f",
    "label": "using an AsyncSubject",
    "options": [
      "4e53"
    ]
  },
  "f7fa": {
    "id": "f7fa",
    "label": "multicast"
  },
  "f976": {
    "id": "f976",
    "label": "using a specific subject implementation",
    "options": [
      "f7fa"
    ]
  },
  "037d": {
    "id": "037d",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "8e45",
      "d3e0",
      "09a0",
      "bc0f",
      "f976"
    ]
  },
  "0710": {
    "id": "0710",
    "label": "catchError"
  },
  "f81c": {
    "id": "f81c",
    "label": "retry"
  },
  "0646": {
    "id": "0646",
    "label": "immediately",
    "options": [
      "f81c"
    ]
  },
  "058b": {
    "id": "058b",
    "label": "retryWhen"
  },
  "fe44": {
    "id": "fe44",
    "label": "when another Observable emits",
    "options": [
      "058b"
    ]
  },
  "84de": {
    "id": "84de",
    "label": "I want to re-subscribe",
    "options": [
      "0646",
      "fe44"
    ]
  },
  "bff1": {
    "id": "bff1",
    "label": "when an error occurs",
    "options": [
      "5493",
      "84de"
    ]
  },
  "d930": {
    "id": "d930",
    "label": "repeat"
  },
  "771f": {
    "id": "771f",
    "label": "immediately",
    "options": [
      "d930"
    ]
  },
  "eb02": {
    "id": "eb02",
    "label": "repeatWhen"
  },
  "38dd": {
    "id": "38dd",
    "label": "when another Observable emits",
    "options": [
      "eb02"
    ]
  },
  "183b": {
    "id": "183b",
    "label": "I want to re-subscribe",
    "options": [
      "771f",
      "38dd"
    ]
  },
  "b32e": {
    "id": "b32e",
    "label": "concat"
  },
  "261c": {
    "id": "261c",
    "label": "I want to start a new Observable",
    "options": [
      "b32e"
    ]
  },
  "a632": {
    "id": "a632",
    "label": "when it completes",
    "options": [
      "183b",
      "261c"
    ]
  },
  "f284": {
    "id": "f284",
    "label": "finalize"
  },
  "39dc": {
    "id": "39dc",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "f284"
    ]
  },
  "ea15": {
    "id": "ea15",
    "label": "subscribeOn"
  },
  "db69": {
    "id": "db69",
    "label": "that routes calls to subscribe",
    "options": [
      "ea15"
    ]
  },
  "41b3": {
    "id": "41b3",
    "label": "observeOn"
  },
  "8ed5": {
    "id": "8ed5",
    "label": "I want to change the scheduler",
    "options": [
      "db69",
      "4337"
    ]
  },
  "5eb3": {
    "id": "5eb3",
    "label": "race"
  },
  "b078": {
    "id": "b078",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "5eb3"
    ]
  },
  "d65f": {
    "id": "d65f",
    "label": "merge"
  },
  "0a98": {
    "id": "0a98",
    "label": "I want to output the values from either of them",
    "options": [
      "d65f"
    ]
  },
  "e8da": {
    "id": "e8da",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2020"
    ]
  },
  "f593": {
    "id": "f593",
    "label": "withLatestFrom"
  },
  "27ec": {
    "id": "27ec",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "f593"
    ]
  },
  "b828": {
    "id": "b828",
    "label": "zip"
  },
  "76b0": {
    "id": "76b0",
    "label": "using each source value only once",
    "options": [
      "b828"
    ]
  },
  "c239": {
    "id": "c239",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "e8da",
      "27ec",
      "76b0"
    ]
  },
  "7deb": {
    "id": "7deb",
    "label": "I have one existing Observable, and",
    "options": [
      "2d3e",
      "e0be",
      "0b8b",
      "1f81",
      "149c",
      "58d9",
      "c4e1",
      "1829",
      "4baa",
      "cf55",
      "5799",
      "b11f",
      "04e4",
      "47f3",
      "e924",
      "037d",
      "bff1",
      "a632",
      "39dc",
      "8ed5",
      "1948"
    ]
  },
  "051a": {
    "id": "051a",
    "label": "race"
  },
  "098a": {
    "id": "098a",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "051a"
    ]
  },
  "5f4d": {
    "id": "5f4d",
    "label": "forkJoin"
  },
  "210b": {
    "id": "210b",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "5f4d"
    ]
  },
  "f15c": {
    "id": "f15c",
    "label": "merge"
  },
  "5c97": {
    "id": "5c97",
    "label": "I want to output the values from either of them",
    "options": [
      "f15c"
    ]
  },
  "9d97": {
    "id": "9d97",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2518"
    ]
  },
  "cba9": {
    "id": "cba9",
    "label": "zip"
  },
  "bdfe": {
    "id": "bdfe",
    "label": "using each source value only once",
    "options": [
      "cba9"
    ]
  },
  "473f": {
    "id": "473f",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "9d97",
      "bdfe"
    ]
  },
  "33ef": {
    "id": "33ef",
    "label": "concat"
  },
  "b282": {
    "id": "b282",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "098a",
      "210b",
      "5c97",
      "473f",
      "5009"
    ]
  },
  "1fe0": {
    "id": "1fe0",
    "label": "Observable",
    "method": "create"
  },
  "ec8a": {
    "id": "ec8a",
    "label": "using custom logic",
    "options": [
      "1fe0"
    ]
  },
  "a1d5": {
    "id": "a1d5",
    "label": "using a state machine similar to a for loop",
    "options": [
      "2720"
    ]
  },
  "36cc": {
    "id": "36cc",
    "label": "throwError"
  },
  "e726": {
    "id": "e726",
    "label": "that throws an error",
    "options": [
      "36cc"
    ]
  },
  "5dfd": {
    "id": "5dfd",
    "label": "EMPTY"
  },
  "badb": {
    "id": "badb",
    "label": "that just completes, without emitting values",
    "options": [
      "5dfd"
    ]
  },
  "13db": {
    "id": "13db",
    "label": "NEVER"
  },
  "98cc": {
    "id": "98cc",
    "label": "that never emits anything",
    "options": [
      "13db"
    ]
  },
  "a252": {
    "id": "a252",
    "label": "fromEvent"
  },
  "8d46": {
    "id": "8d46",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "a252"
    ]
  },
  "98ef": {
    "id": "98ef",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "3587"
    ]
  },
  "d38e": {
    "id": "d38e",
    "label": "from a Promise or an event source",
    "options": [
      "8610"
    ]
  },
  "e093": {
    "id": "e093",
    "label": "from"
  },
  "50ba": {
    "id": "50ba",
    "label": "over the values in an array",
    "options": [
      "e093"
    ]
  },
  "ee32": {
    "id": "ee32",
    "label": "range"
  },
  "410e": {
    "id": "410e",
    "label": "over values in a numeric range",
    "options": [
      "ee32"
    ]
  },
  "b8a3": {
    "id": "b8a3",
    "label": "of"
  },
  "cfd4": {
    "id": "cfd4",
    "label": "over prefined values given as arguments",
    "options": [
      "b8a3"
    ]
  },
  "abcc": {
    "id": "abcc",
    "label": "interval"
  },
  "4e1d": {
    "id": "4e1d",
    "label": "regularly",
    "options": [
      "abcc"
    ]
  },
  "5cba": {
    "id": "5cba",
    "label": "timer"
  },
  "70d9": {
    "id": "70d9",
    "label": "with an optional initial delay",
    "options": [
      "5cba"
    ]
  },
  "d253": {
    "id": "d253",
    "label": "that emits values on a timer",
    "options": [
      "4e1d",
      "70d9"
    ]
  },
  "2d4b": {
    "id": "2d4b",
    "label": "defer"
  },
  "76fa": {
    "id": "76fa",
    "label": "which is built on demand when subscribed",
    "options": [
      "2d4b"
    ]
  },
  "d9a8": {
    "id": "d9a8",
    "label": "I want to create a new Observable",
    "options": [
      "ec8a",
      "a1d5",
      "e726",
      "badb",
      "98cc",
      "8156",
      "d38e",
      "2860",
      "d253",
      "76fa"
    ]
  },
  "fc8c": {
    "id": "fc8c",
    "label": "bindCallback"
  },
  "df62": {
    "id": "df62",
    "label": "supporting a conventional callback API",
    "options": [
      "fc8c"
    ]
  },
  "fee2": {
    "id": "fee2",
    "label": "bindNodeCallback"
  },
  "828a": {
    "id": "828a",
    "label": "supporting Node.js callback style API",
    "options": [
      "fee2"
    ]
  },
  "899b": {
    "id": "899b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "df62",
      "828a"
    ]
  },
  "0b33": {
    "id": "0b33",
    "label": "I have no Observables yet, and",
    "options": [
      "d9a8",
      "899b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "7deb",
      "b282",
      "0b33"
    ]
  }
}