{
  "2031": {
    "id": "2031",
    "label": "share"
  },
  "2323": {
    "id": "2323",
    "label": "and only the last value",
    "options": [
      "055f"
    ]
  },
  "2334": {
    "id": "2334",
    "label": "and emit the group as an array",
    "options": [
      "0411"
    ]
  },
  "2488": {
    "id": "2488",
    "label": "using a conventional Subject",
    "options": [
      "5639",
      "2d32"
    ]
  },
  "2538": {
    "id": "2538",
    "label": "that iterates",
    "options": [
      "9d40",
      "2673",
      "2e97"
    ]
  },
  "2628": {
    "id": "2628",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "8e88"
    ]
  },
  "2673": {
    "id": "2673",
    "label": "over values in a numeric range",
    "options": [
      "15b4"
    ]
  },
  "2681": {
    "id": "2681",
    "label": "I have no Observables yet, and",
    "options": [
      "51c5",
      "5cea"
    ]
  },
  "3269": {
    "id": "3269",
    "label": "I want to start a new Observable",
    "options": [
      "c1c0"
    ]
  },
  "3339": {
    "id": "3339",
    "label": "I want to ensure there is only one value",
    "options": [
      "1e83"
    ]
  },
  "3429": {
    "id": "3429",
    "label": "race"
  },
  "3552": {
    "id": "3552",
    "label": "bufferTime"
  },
  "3902": {
    "id": "3902",
    "label": "pipe"
  },
  "4717": {
    "id": "4717",
    "label": "based on a given amount",
    "options": [
      "9936"
    ]
  },
  "4926": {
    "id": "4926",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "ecd8"
    ]
  },
  "4978": {
    "id": "4978",
    "label": "until another Observable emits a value",
    "options": [
      "ecb0"
    ]
  },
  "5639": {
    "id": "5639",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "2031"
    ]
  },
  "5817": {
    "id": "5817",
    "label": "emitted just before the current value",
    "options": [
      "5874"
    ]
  },
  "5874": {
    "id": "5874",
    "label": "distinctUntilChanged"
  },
  "5910": {
    "id": "5910",
    "label": "first"
  },
  "6904": {
    "id": "6904",
    "label": "and only output the final computed value",
    "options": [
      "f7b8"
    ]
  },
  "7341": {
    "id": "7341",
    "label": "and only the first value",
    "options": [
      "5910"
    ]
  },
  "7577": {
    "id": "7577",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "153c",
      "f645"
    ]
  },
  "7676": {
    "id": "7676",
    "label": "pluck"
  },
  "7885": {
    "id": "7885",
    "label": "I want to re-subscribe",
    "options": [
      "dd7e",
      "09b0"
    ]
  },
  "7966": {
    "id": "7966",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "60fe",
      "96a6"
    ]
  },
  "8336": {
    "id": "8336",
    "label": "throttleTime"
  },
  "8506": {
    "id": "8506",
    "label": "and emit the group as an array",
    "options": [
      "0b69"
    ]
  },
  "8588": {
    "id": "8588",
    "label": "skipLast"
  },
  "8647": {
    "id": "8647",
    "label": "scan"
  },
  "9171": {
    "id": "9171",
    "label": "repeat"
  },
  "9503": {
    "id": "9503",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "64cb"
    ]
  },
  "9768": {
    "id": "9768",
    "label": "using custom logic",
    "options": [
      "e13c"
    ]
  },
  "9936": {
    "id": "9936",
    "label": "takeLast"
  },
  "1a04": {
    "id": "1a04",
    "label": "mapTo"
  },
  "8f43": {
    "id": "8f43",
    "label": "to be a constant value",
    "options": [
      "1a04"
    ]
  },
  "970a": {
    "id": "970a",
    "label": "map"
  },
  "70a5": {
    "id": "70a5",
    "label": "to be a value calculated through a formula",
    "options": [
      "970a"
    ]
  },
  "2e7a": {
    "id": "2e7a",
    "label": "I want to change each emitted value",
    "options": [
      "8f43",
      "70a5"
    ]
  },
  "eee9": {
    "id": "eee9",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "7676"
    ]
  },
  "9ce1": {
    "id": "9ce1",
    "label": "tap"
  },
  "921d": {
    "id": "921d",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "9ce1"
    ]
  },
  "eaaa": {
    "id": "eaaa",
    "label": "filter"
  },
  "2b4e": {
    "id": "2b4e",
    "label": "based on custom logic",
    "options": [
      "eaaa"
    ]
  },
  "0b9c": {
    "id": "0b9c",
    "label": "take"
  },
  "cdf0": {
    "id": "cdf0",
    "label": "based on a given amount",
    "options": [
      "0b9c"
    ]
  },
  "0933": {
    "id": "0933",
    "label": "takeWhile"
  },
  "d13b": {
    "id": "d13b",
    "label": "based on custom logic",
    "options": [
      "0933"
    ]
  },
  "d1a6": {
    "id": "d1a6",
    "label": "if they are at the start of the Observable",
    "options": [
      "7341",
      "cdf0",
      "d13b"
    ]
  },
  "04a9": {
    "id": "04a9",
    "label": "elementAt"
  },
  "9ffc": {
    "id": "9ffc",
    "label": "if they are exactly the n-th emission",
    "options": [
      "04a9"
    ]
  },
  "055f": {
    "id": "055f",
    "label": "last"
  },
  "e75d": {
    "id": "e75d",
    "label": "if they are at the end of the Observable",
    "options": [
      "2323",
      "4717"
    ]
  },
  "ecb0": {
    "id": "ecb0",
    "label": "takeUntil"
  },
  "7ba0": {
    "id": "7ba0",
    "label": "I want to allow some values to pass",
    "options": [
      "2b4e",
      "d1a6",
      "9ffc",
      "e75d",
      "4978"
    ]
  },
  "d542": {
    "id": "d542",
    "label": "ignoreElements"
  },
  "0b0e": {
    "id": "0b0e",
    "label": "altogether",
    "options": [
      "d542"
    ]
  },
  "3c5b": {
    "id": "3c5b",
    "label": "skip"
  },
  "27ba": {
    "id": "27ba",
    "label": "based on a given amount",
    "options": [
      "3c5b"
    ]
  },
  "fb70": {
    "id": "fb70",
    "label": "skipWhile"
  },
  "1c21": {
    "id": "1c21",
    "label": "based on custom logic",
    "options": [
      "fb70"
    ]
  },
  "0549": {
    "id": "0549",
    "label": "from the start of the Observable",
    "options": [
      "27ba",
      "1c21"
    ]
  },
  "2f6d": {
    "id": "2f6d",
    "label": "from the end of the Observable",
    "options": [
      "8588"
    ]
  },
  "053f": {
    "id": "053f",
    "label": "skipUntil"
  },
  "ba42": {
    "id": "ba42",
    "label": "until another Observable emits a value",
    "options": [
      "053f"
    ]
  },
  "2f34": {
    "id": "2f34",
    "label": "distinct"
  },
  "eaed": {
    "id": "eaed",
    "label": "emitted some time in the past",
    "options": [
      "2f34"
    ]
  },
  "5c24": {
    "id": "5c24",
    "label": "according to value equality",
    "options": [
      "5817",
      "eaed"
    ]
  },
  "3ccc": {
    "id": "3ccc",
    "label": "distinctUntilKeyChanged"
  },
  "75f3": {
    "id": "75f3",
    "label": "emitted just before the current value",
    "options": [
      "3ccc"
    ]
  },
  "5c13": {
    "id": "5c13",
    "label": "according to a key or object property",
    "options": [
      "75f3"
    ]
  },
  "89c4": {
    "id": "89c4",
    "label": "that match some previous value",
    "options": [
      "5c24",
      "5c13"
    ]
  },
  "d769": {
    "id": "d769",
    "label": "throttle"
  },
  "4eaa": {
    "id": "4eaa",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d769"
    ]
  },
  "3bc2": {
    "id": "3bc2",
    "label": "where time windows are determined by a time duration",
    "options": [
      "8336"
    ]
  },
  "cd87": {
    "id": "cd87",
    "label": "by emitting the first value in each time window",
    "options": [
      "4eaa",
      "3bc2"
    ]
  },
  "af55": {
    "id": "af55",
    "label": "audit"
  },
  "004a": {
    "id": "004a",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "af55"
    ]
  },
  "4fbb": {
    "id": "4fbb",
    "label": "auditTime"
  },
  "921c": {
    "id": "921c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "4fbb"
    ]
  },
  "24dd": {
    "id": "24dd",
    "label": "by emitting the last value in each time window",
    "options": [
      "004a",
      "921c"
    ]
  },
  "8e88": {
    "id": "8e88",
    "label": "debounce"
  },
  "b059": {
    "id": "b059",
    "label": "debounceTime"
  },
  "f8e4": {
    "id": "f8e4",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "b059"
    ]
  },
  "73a4": {
    "id": "73a4",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "2628",
      "f8e4"
    ]
  },
  "41c5": {
    "id": "41c5",
    "label": "that occur too frequently",
    "options": [
      "cd87",
      "24dd",
      "73a4"
    ]
  },
  "60fe": {
    "id": "60fe",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "d534"
    ]
  },
  "f7b8": {
    "id": "f7b8",
    "label": "reduce"
  },
  "762a": {
    "id": "762a",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "8647"
    ]
  },
  "bdc8": {
    "id": "bdc8",
    "label": "mergeScan"
  },
  "2cf4": {
    "id": "2cf4",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "bdc8"
    ]
  },
  "aed5": {
    "id": "aed5",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "6904",
      "762a",
      "2cf4"
    ]
  },
  "64cb": {
    "id": "64cb",
    "label": "materialize"
  },
  "d4ab": {
    "id": "d4ab",
    "label": "timeInterval"
  },
  "b576": {
    "id": "b576",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "d4ab"
    ]
  },
  "60b2": {
    "id": "60b2",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "9503",
      "b576"
    ]
  },
  "e341": {
    "id": "e341",
    "label": "timeout"
  },
  "a6db": {
    "id": "a6db",
    "label": "I want to throw an error",
    "options": [
      "e341"
    ]
  },
  "c307": {
    "id": "c307",
    "label": "timeoutWith"
  },
  "a917": {
    "id": "a917",
    "label": "I want to switch to another Observable",
    "options": [
      "c307"
    ]
  },
  "af1c": {
    "id": "af1c",
    "label": "after a period of inactivity",
    "options": [
      "a6db",
      "a917"
    ]
  },
  "1e83": {
    "id": "1e83",
    "label": "single"
  },
  "dd8e": {
    "id": "dd8e",
    "label": "count"
  },
  "68b9": {
    "id": "68b9",
    "label": "I want to know how many values it emits",
    "options": [
      "dd8e"
    ]
  },
  "4a5a": {
    "id": "4a5a",
    "label": "startWith"
  },
  "cac6": {
    "id": "cac6",
    "label": "I want to prepend one value",
    "options": [
      "4a5a"
    ]
  },
  "3d31": {
    "id": "3d31",
    "label": "delay"
  },
  "33d9": {
    "id": "33d9",
    "label": "based on a given amount of time",
    "options": [
      "3d31"
    ]
  },
  "4c9d": {
    "id": "4c9d",
    "label": "delayWhen"
  },
  "0744": {
    "id": "0744",
    "label": "based on the emissions of another Observable",
    "options": [
      "4c9d"
    ]
  },
  "afe6": {
    "id": "afe6",
    "label": "I want to delay the emissions",
    "options": [
      "33d9",
      "0744"
    ]
  },
  "29d7": {
    "id": "29d7",
    "label": "toArray"
  },
  "6abd": {
    "id": "6abd",
    "label": "and convert to an array",
    "options": [
      "29d7"
    ]
  },
  "5b6f": {
    "id": "5b6f",
    "label": "Observable",
    "method": "toPromise"
  },
  "e478": {
    "id": "e478",
    "label": "and convert to a Promise",
    "options": [
      "5b6f"
    ]
  },
  "15fe": {
    "id": "15fe",
    "label": "until the Observable completes",
    "options": [
      "6abd",
      "e478"
    ]
  },
  "4dfc": {
    "id": "4dfc",
    "label": "pairwise"
  },
  "b979": {
    "id": "b979",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "4dfc"
    ]
  },
  "f5e5": {
    "id": "f5e5",
    "label": "partition"
  },
  "f263": {
    "id": "f263",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "f5e5"
    ]
  },
  "0411": {
    "id": "0411",
    "label": "bufferCount"
  },
  "dd26": {
    "id": "dd26",
    "label": "windowCount"
  },
  "01f6": {
    "id": "01f6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "dd26"
    ]
  },
  "7c0d": {
    "id": "7c0d",
    "label": "in batches of a particular size",
    "options": [
      "2334",
      "01f6"
    ]
  },
  "b713": {
    "id": "b713",
    "label": "and emit the group as an array",
    "options": [
      "3552"
    ]
  },
  "5a7f": {
    "id": "5a7f",
    "label": "windowTime"
  },
  "63cb": {
    "id": "63cb",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5a7f"
    ]
  },
  "edc5": {
    "id": "edc5",
    "label": "based on time",
    "options": [
      "b713",
      "63cb"
    ]
  },
  "0142": {
    "id": "0142",
    "label": "buffer"
  },
  "2dca": {
    "id": "2dca",
    "label": "and emit the group as an array",
    "options": [
      "0142"
    ]
  },
  "42ba": {
    "id": "42ba",
    "label": "window"
  },
  "8f56": {
    "id": "8f56",
    "label": "and emit the group as a nested Observable",
    "options": [
      "42ba"
    ]
  },
  "92c6": {
    "id": "92c6",
    "label": "until another Observable emits",
    "options": [
      "2dca",
      "8f56"
    ]
  },
  "483e": {
    "id": "483e",
    "label": "bufferWhen"
  },
  "14b5": {
    "id": "14b5",
    "label": "and emit the group as an array",
    "options": [
      "483e"
    ]
  },
  "67b1": {
    "id": "67b1",
    "label": "windowWhen"
  },
  "98fe": {
    "id": "98fe",
    "label": "and emit the group as a nested Observable",
    "options": [
      "67b1"
    ]
  },
  "b71f": {
    "id": "b71f",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "14b5",
      "98fe"
    ]
  },
  "0b69": {
    "id": "0b69",
    "label": "bufferToggle"
  },
  "30ac": {
    "id": "30ac",
    "label": "windowToggle"
  },
  "5e84": {
    "id": "5e84",
    "label": "and emit the group as a nested Observable",
    "options": [
      "30ac"
    ]
  },
  "6fb6": {
    "id": "6fb6",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "8506",
      "5e84"
    ]
  },
  "2c20": {
    "id": "2c20",
    "label": "groupBy"
  },
  "7f49": {
    "id": "7f49",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "2c20"
    ]
  },
  "637b": {
    "id": "637b",
    "label": "I want to group the values",
    "options": [
      "15fe",
      "b979",
      "f263",
      "7c0d",
      "edc5",
      "92c6",
      "b71f",
      "6fb6",
      "7f49"
    ]
  },
  "444f": {
    "id": "444f",
    "label": "mergeMapTo"
  },
  "3e97": {
    "id": "3e97",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "444f"
    ]
  },
  "8bd3": {
    "id": "8bd3",
    "label": "mergeMap"
  },
  "82c6": {
    "id": "82c6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "8bd3"
    ]
  },
  "292d": {
    "id": "292d",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3e97",
      "82c6"
    ]
  },
  "d534": {
    "id": "d534",
    "label": "concatMapTo"
  },
  "7b25": {
    "id": "7b25",
    "label": "concatMap"
  },
  "96a6": {
    "id": "96a6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7b25"
    ]
  },
  "47a0": {
    "id": "47a0",
    "label": "switchMapTo"
  },
  "153c": {
    "id": "153c",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "47a0"
    ]
  },
  "c836": {
    "id": "c836",
    "label": "switchMap"
  },
  "f645": {
    "id": "f645",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c836"
    ]
  },
  "96b5": {
    "id": "96b5",
    "label": "exhaustMap"
  },
  "09d2": {
    "id": "09d2",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "96b5"
    ]
  },
  "0acd": {
    "id": "0acd",
    "label": "expand"
  },
  "17a2": {
    "id": "17a2",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "0acd"
    ]
  },
  "e7e2": {
    "id": "e7e2",
    "label": "I want to start a new Observable for each value",
    "options": [
      "292d",
      "7966",
      "7577",
      "09d2",
      "17a2"
    ]
  },
  "eaad": {
    "id": "eaad",
    "label": "I want to perform custom operations",
    "options": [
      "3902"
    ]
  },
  "6e22": {
    "id": "6e22",
    "label": "publish"
  },
  "2d32": {
    "id": "2d32",
    "label": "and start it manually or imperatively",
    "options": [
      "6e22"
    ]
  },
  "90ba": {
    "id": "90ba",
    "label": "publishBehavior"
  },
  "969b": {
    "id": "969b",
    "label": "using a BehaviorSubject",
    "options": [
      "90ba"
    ]
  },
  "7dbf": {
    "id": "7dbf",
    "label": "publishReplay"
  },
  "9ab3": {
    "id": "9ab3",
    "label": "using a ReplaySubject",
    "options": [
      "7dbf"
    ]
  },
  "3f26": {
    "id": "3f26",
    "label": "publishLast"
  },
  "0d3e": {
    "id": "0d3e",
    "label": "using an AsyncSubject",
    "options": [
      "3f26"
    ]
  },
  "e068": {
    "id": "e068",
    "label": "multicast"
  },
  "85b6": {
    "id": "85b6",
    "label": "using a specific subject implementation",
    "options": [
      "e068"
    ]
  },
  "c059": {
    "id": "c059",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "2488",
      "969b",
      "9ab3",
      "0d3e",
      "85b6"
    ]
  },
  "edea": {
    "id": "edea",
    "label": "catchError"
  },
  "952c": {
    "id": "952c",
    "label": "I want to start a new Observable",
    "options": [
      "edea"
    ]
  },
  "a9f5": {
    "id": "a9f5",
    "label": "retry"
  },
  "dd7e": {
    "id": "dd7e",
    "label": "immediately",
    "options": [
      "a9f5"
    ]
  },
  "53ab": {
    "id": "53ab",
    "label": "retryWhen"
  },
  "09b0": {
    "id": "09b0",
    "label": "when another Observable emits",
    "options": [
      "53ab"
    ]
  },
  "c14e": {
    "id": "c14e",
    "label": "when an error occurs",
    "options": [
      "952c",
      "7885"
    ]
  },
  "dfc1": {
    "id": "dfc1",
    "label": "immediately",
    "options": [
      "9171"
    ]
  },
  "abd4": {
    "id": "abd4",
    "label": "repeatWhen"
  },
  "fa20": {
    "id": "fa20",
    "label": "when another Observable emits",
    "options": [
      "abd4"
    ]
  },
  "3f86": {
    "id": "3f86",
    "label": "I want to re-subscribe",
    "options": [
      "dfc1",
      "fa20"
    ]
  },
  "c1c0": {
    "id": "c1c0",
    "label": "concat"
  },
  "3d5d": {
    "id": "3d5d",
    "label": "when it completes",
    "options": [
      "3f86",
      "3269"
    ]
  },
  "ecd8": {
    "id": "ecd8",
    "label": "finalize"
  },
  "bc42": {
    "id": "bc42",
    "label": "subscribeOn"
  },
  "f535": {
    "id": "f535",
    "label": "that routes calls to subscribe",
    "options": [
      "bc42"
    ]
  },
  "f090": {
    "id": "f090",
    "label": "observeOn"
  },
  "f486": {
    "id": "f486",
    "label": "that routes values to observers",
    "options": [
      "f090"
    ]
  },
  "d591": {
    "id": "d591",
    "label": "I want to change the scheduler",
    "options": [
      "f535",
      "f486"
    ]
  },
  "6fa7": {
    "id": "6fa7",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "3429"
    ]
  },
  "e423": {
    "id": "e423",
    "label": "merge"
  },
  "2b9d": {
    "id": "2b9d",
    "label": "I want to output the values from either of them",
    "options": [
      "e423"
    ]
  },
  "c103": {
    "id": "c103",
    "label": "combineLatest"
  },
  "e31c": {
    "id": "e31c",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "c103"
    ]
  },
  "0a3c": {
    "id": "0a3c",
    "label": "withLatestFrom"
  },
  "d584": {
    "id": "d584",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "0a3c"
    ]
  },
  "bfb8": {
    "id": "bfb8",
    "label": "zip"
  },
  "bf3d": {
    "id": "bf3d",
    "label": "using each source value only once",
    "options": [
      "bfb8"
    ]
  },
  "059c": {
    "id": "059c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "e31c",
      "d584",
      "bf3d"
    ]
  },
  "067a": {
    "id": "067a",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "6fa7",
      "2b9d",
      "059c"
    ]
  },
  "df6e": {
    "id": "df6e",
    "label": "I have one existing Observable, and",
    "options": [
      "2e7a",
      "eee9",
      "921d",
      "7ba0",
      "60fe",
      "aed5",
      "60b2",
      "af1c",
      "3339",
      "68b9",
      "cac6",
      "afe6",
      "637b",
      "e7e2",
      "eaad",
      "c059",
      "c14e",
      "3d5d",
      "4926",
      "d591",
      "067a"
    ]
  },
  "591f": {
    "id": "591f",
    "label": "race"
  },
  "0f86": {
    "id": "0f86",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "591f"
    ]
  },
  "ab5d": {
    "id": "ab5d",
    "label": "forkJoin"
  },
  "6ef1": {
    "id": "6ef1",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "ab5d"
    ]
  },
  "de49": {
    "id": "de49",
    "label": "merge"
  },
  "b74c": {
    "id": "b74c",
    "label": "I want to output the values from either of them",
    "options": [
      "de49"
    ]
  },
  "ae3f": {
    "id": "ae3f",
    "label": "combineLatest"
  },
  "f8a3": {
    "id": "f8a3",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ae3f"
    ]
  },
  "dfb9": {
    "id": "dfb9",
    "label": "zip"
  },
  "34da": {
    "id": "34da",
    "label": "using each source value only once",
    "options": [
      "dfb9"
    ]
  },
  "2c45": {
    "id": "2c45",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "f8a3",
      "34da"
    ]
  },
  "09a0": {
    "id": "09a0",
    "label": "concat"
  },
  "0b67": {
    "id": "0b67",
    "label": "I want to subscribe to each in order",
    "options": [
      "09a0"
    ]
  },
  "6f6d": {
    "id": "6f6d",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "0f86",
      "6ef1",
      "b74c",
      "2c45",
      "0b67"
    ]
  },
  "e13c": {
    "id": "e13c",
    "label": "Observable",
    "method": "create"
  },
  "095a": {
    "id": "095a",
    "label": "generate"
  },
  "52b7": {
    "id": "52b7",
    "label": "using a state machine similar to a for loop",
    "options": [
      "095a"
    ]
  },
  "eaae": {
    "id": "eaae",
    "label": "throwError"
  },
  "9b5d": {
    "id": "9b5d",
    "label": "that throws an error",
    "options": [
      "eaae"
    ]
  },
  "06ea": {
    "id": "06ea",
    "label": "EMPTY"
  },
  "1c43": {
    "id": "1c43",
    "label": "that just completes, without emitting values",
    "options": [
      "06ea"
    ]
  },
  "e2ca": {
    "id": "e2ca",
    "label": "NEVER"
  },
  "aa05": {
    "id": "aa05",
    "label": "that never emits anything",
    "options": [
      "e2ca"
    ]
  },
  "b29c": {
    "id": "b29c",
    "label": "fromEvent"
  },
  "81b9": {
    "id": "81b9",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "b29c"
    ]
  },
  "081f": {
    "id": "081f",
    "label": "fromEventPattern"
  },
  "b74a": {
    "id": "b74a",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "081f"
    ]
  },
  "37c9": {
    "id": "37c9",
    "label": "from an existing source of events",
    "options": [
      "81b9",
      "b74a"
    ]
  },
  "cde1": {
    "id": "cde1",
    "label": "from"
  },
  "86a6": {
    "id": "86a6",
    "label": "from a Promise or an event source",
    "options": [
      "cde1"
    ]
  },
  "0676": {
    "id": "0676",
    "label": "from"
  },
  "9d40": {
    "id": "9d40",
    "label": "over the values in an array",
    "options": [
      "0676"
    ]
  },
  "15b4": {
    "id": "15b4",
    "label": "range"
  },
  "333c": {
    "id": "333c",
    "label": "of"
  },
  "2e97": {
    "id": "2e97",
    "label": "over prefined values given as arguments",
    "options": [
      "333c"
    ]
  },
  "191f": {
    "id": "191f",
    "label": "interval"
  },
  "90cf": {
    "id": "90cf",
    "label": "regularly",
    "options": [
      "191f"
    ]
  },
  "c360": {
    "id": "c360",
    "label": "timer"
  },
  "3f05": {
    "id": "3f05",
    "label": "with an optional initial delay",
    "options": [
      "c360"
    ]
  },
  "54dc": {
    "id": "54dc",
    "label": "that emits values on a timer",
    "options": [
      "90cf",
      "3f05"
    ]
  },
  "c2f1": {
    "id": "c2f1",
    "label": "defer"
  },
  "00a6": {
    "id": "00a6",
    "label": "which is built on demand when subscribed",
    "options": [
      "c2f1"
    ]
  },
  "51c5": {
    "id": "51c5",
    "label": "I want to create a new Observable",
    "options": [
      "9768",
      "52b7",
      "9b5d",
      "1c43",
      "aa05",
      "37c9",
      "86a6",
      "2538",
      "54dc",
      "00a6"
    ]
  },
  "f831": {
    "id": "f831",
    "label": "bindCallback"
  },
  "b775": {
    "id": "b775",
    "label": "supporting a conventional callback API",
    "options": [
      "f831"
    ]
  },
  "d431": {
    "id": "d431",
    "label": "bindNodeCallback"
  },
  "c6ac": {
    "id": "c6ac",
    "label": "supporting Node.js callback style API",
    "options": [
      "d431"
    ]
  },
  "5cea": {
    "id": "5cea",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "b775",
      "c6ac"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "df6e",
      "6f6d",
      "2681"
    ]
  }
}