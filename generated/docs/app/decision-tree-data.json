{
  "1084": {
    "id": "1084",
    "label": "that routes calls to subscribe",
    "options": [
      "3fb5"
    ]
  },
  "1379": {
    "id": "1379",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "a308"
    ]
  },
  "1421": {
    "id": "1421",
    "label": "expand"
  },
  "1931": {
    "id": "1931",
    "label": "I want to ensure there is only one value",
    "options": [
      "b411"
    ]
  },
  "1958": {
    "id": "1958",
    "label": "after a period of inactivity",
    "options": [
      "e072",
      "bcf1"
    ]
  },
  "2159": {
    "id": "2159",
    "label": "I want to create a new Observable",
    "options": [
      "8498",
      "db42",
      "d8a9",
      "5f9c",
      "339e",
      "32ff",
      "7ecf",
      "bb12",
      "90fd",
      "761a"
    ]
  },
  "2176": {
    "id": "2176",
    "label": "elementAt"
  },
  "2222": {
    "id": "2222",
    "label": "distinctUntilKeyChanged"
  },
  "2661": {
    "id": "2661",
    "label": "based on a given amount",
    "options": [
      "8ae6"
    ]
  },
  "2786": {
    "id": "2786",
    "label": "concat"
  },
  "2801": {
    "id": "2801",
    "label": "I want to re-subscribe",
    "options": [
      "c8ed",
      "3532"
    ]
  },
  "3349": {
    "id": "3349",
    "label": "share"
  },
  "3423": {
    "id": "3423",
    "label": "merge"
  },
  "3532": {
    "id": "3532",
    "label": "when another Observable emits",
    "options": [
      "d4f8"
    ]
  },
  "3688": {
    "id": "3688",
    "label": "in batches of a particular size",
    "options": [
      "737b",
      "804b"
    ]
  },
  "4244": {
    "id": "4244",
    "label": "distinctUntilChanged"
  },
  "4565": {
    "id": "4565",
    "label": "mergeMapTo"
  },
  "4948": {
    "id": "4948",
    "label": "merge"
  },
  "5126": {
    "id": "5126",
    "label": "throttle"
  },
  "5182": {
    "id": "5182",
    "label": "multicast"
  },
  "5326": {
    "id": "5326",
    "label": "publishReplay"
  },
  "5444": {
    "id": "5444",
    "label": "from the start of the Observable",
    "options": [
      "dace",
      "2af5"
    ]
  },
  "6410": {
    "id": "6410",
    "label": "using each source value only once",
    "options": [
      "18df"
    ]
  },
  "6496": {
    "id": "6496",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "cb90",
      "60ee"
    ]
  },
  "6757": {
    "id": "6757",
    "label": "and emit the group as an array",
    "options": [
      "744a"
    ]
  },
  "7845": {
    "id": "7845",
    "label": "based on custom logic",
    "options": [
      "9616"
    ]
  },
  "8498": {
    "id": "8498",
    "label": "using custom logic",
    "options": [
      "f49d"
    ]
  },
  "8558": {
    "id": "8558",
    "label": "when an error occurs",
    "options": [
      "5cb7",
      "1ca7"
    ]
  },
  "8923": {
    "id": "8923",
    "label": "takeLast"
  },
  "9616": {
    "id": "9616",
    "label": "filter"
  },
  "9900": {
    "id": "9900",
    "label": "using a BehaviorSubject",
    "options": [
      "f4b9"
    ]
  },
  "90a7": {
    "id": "90a7",
    "label": "mapTo"
  },
  "d838": {
    "id": "d838",
    "label": "to be a constant value",
    "options": [
      "90a7"
    ]
  },
  "d7ef": {
    "id": "d7ef",
    "label": "map"
  },
  "5e93": {
    "id": "5e93",
    "label": "to be a value calculated through a formula",
    "options": [
      "d7ef"
    ]
  },
  "5c00": {
    "id": "5c00",
    "label": "I want to change each emitted value",
    "options": [
      "d838",
      "5e93"
    ]
  },
  "ce14": {
    "id": "ce14",
    "label": "pluck"
  },
  "b645": {
    "id": "b645",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "ce14"
    ]
  },
  "8aaf": {
    "id": "8aaf",
    "label": "tap"
  },
  "9f30": {
    "id": "9f30",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "8aaf"
    ]
  },
  "00cc": {
    "id": "00cc",
    "label": "first"
  },
  "dc84": {
    "id": "dc84",
    "label": "and only the first value",
    "options": [
      "00cc"
    ]
  },
  "8ae6": {
    "id": "8ae6",
    "label": "take"
  },
  "e85e": {
    "id": "e85e",
    "label": "takeWhile"
  },
  "4b1c": {
    "id": "4b1c",
    "label": "based on custom logic",
    "options": [
      "e85e"
    ]
  },
  "6bd8": {
    "id": "6bd8",
    "label": "if they are at the start of the Observable",
    "options": [
      "dc84",
      "2661",
      "4b1c"
    ]
  },
  "c9ce": {
    "id": "c9ce",
    "label": "if they are exactly the n-th emission",
    "options": [
      "2176"
    ]
  },
  "28b7": {
    "id": "28b7",
    "label": "last"
  },
  "d91a": {
    "id": "d91a",
    "label": "and only the last value",
    "options": [
      "28b7"
    ]
  },
  "66fb": {
    "id": "66fb",
    "label": "based on a given amount",
    "options": [
      "8923"
    ]
  },
  "d2f6": {
    "id": "d2f6",
    "label": "if they are at the end of the Observable",
    "options": [
      "d91a",
      "66fb"
    ]
  },
  "c8a5": {
    "id": "c8a5",
    "label": "takeUntil"
  },
  "fb9d": {
    "id": "fb9d",
    "label": "until another Observable emits a value",
    "options": [
      "c8a5"
    ]
  },
  "0944": {
    "id": "0944",
    "label": "I want to allow some values to pass",
    "options": [
      "7845",
      "6bd8",
      "c9ce",
      "d2f6",
      "fb9d"
    ]
  },
  "e334": {
    "id": "e334",
    "label": "ignoreElements"
  },
  "622c": {
    "id": "622c",
    "label": "altogether",
    "options": [
      "e334"
    ]
  },
  "2eab": {
    "id": "2eab",
    "label": "skip"
  },
  "dace": {
    "id": "dace",
    "label": "based on a given amount",
    "options": [
      "2eab"
    ]
  },
  "0408": {
    "id": "0408",
    "label": "skipWhile"
  },
  "2af5": {
    "id": "2af5",
    "label": "based on custom logic",
    "options": [
      "0408"
    ]
  },
  "db10": {
    "id": "db10",
    "label": "skipLast"
  },
  "4d9c": {
    "id": "4d9c",
    "label": "from the end of the Observable",
    "options": [
      "db10"
    ]
  },
  "e549": {
    "id": "e549",
    "label": "skipUntil"
  },
  "585e": {
    "id": "585e",
    "label": "until another Observable emits a value",
    "options": [
      "e549"
    ]
  },
  "d1c1": {
    "id": "d1c1",
    "label": "emitted just before the current value",
    "options": [
      "4244"
    ]
  },
  "eb6f": {
    "id": "eb6f",
    "label": "distinct"
  },
  "af2b": {
    "id": "af2b",
    "label": "emitted some time in the past",
    "options": [
      "eb6f"
    ]
  },
  "c797": {
    "id": "c797",
    "label": "according to value equality",
    "options": [
      "d1c1",
      "af2b"
    ]
  },
  "5b1c": {
    "id": "5b1c",
    "label": "emitted just before the current value",
    "options": [
      "2222"
    ]
  },
  "bea3": {
    "id": "bea3",
    "label": "according to a key or object property",
    "options": [
      "5b1c"
    ]
  },
  "4dcd": {
    "id": "4dcd",
    "label": "that match some previous value",
    "options": [
      "c797",
      "bea3"
    ]
  },
  "8a20": {
    "id": "8a20",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5126"
    ]
  },
  "23a1": {
    "id": "23a1",
    "label": "throttleTime"
  },
  "3b65": {
    "id": "3b65",
    "label": "where time windows are determined by a time duration",
    "options": [
      "23a1"
    ]
  },
  "235b": {
    "id": "235b",
    "label": "by emitting the first value in each time window",
    "options": [
      "8a20",
      "3b65"
    ]
  },
  "24ae": {
    "id": "24ae",
    "label": "audit"
  },
  "f90e": {
    "id": "f90e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "24ae"
    ]
  },
  "61f2": {
    "id": "61f2",
    "label": "auditTime"
  },
  "733e": {
    "id": "733e",
    "label": "where time windows are determined by a time duration",
    "options": [
      "61f2"
    ]
  },
  "947d": {
    "id": "947d",
    "label": "by emitting the last value in each time window",
    "options": [
      "f90e",
      "733e"
    ]
  },
  "4d52": {
    "id": "4d52",
    "label": "debounce"
  },
  "8aa5": {
    "id": "8aa5",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "4d52"
    ]
  },
  "ebbf": {
    "id": "ebbf",
    "label": "debounceTime"
  },
  "c7d5": {
    "id": "c7d5",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "ebbf"
    ]
  },
  "a20c": {
    "id": "a20c",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "8aa5",
      "c7d5"
    ]
  },
  "6c7d": {
    "id": "6c7d",
    "label": "that occur too frequently",
    "options": [
      "235b",
      "947d",
      "a20c"
    ]
  },
  "43fb": {
    "id": "43fb",
    "label": "I want to ignore values",
    "options": [
      "622c",
      "5444",
      "4d9c",
      "585e",
      "4dcd",
      "6c7d"
    ]
  },
  "790d": {
    "id": "790d",
    "label": "reduce"
  },
  "96d9": {
    "id": "96d9",
    "label": "and only output the final computed value",
    "options": [
      "790d"
    ]
  },
  "0382": {
    "id": "0382",
    "label": "scan"
  },
  "38db": {
    "id": "38db",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "0382"
    ]
  },
  "85a0": {
    "id": "85a0",
    "label": "mergeScan"
  },
  "f329": {
    "id": "f329",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "85a0"
    ]
  },
  "13e3": {
    "id": "13e3",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "96d9",
      "38db",
      "f329"
    ]
  },
  "750f": {
    "id": "750f",
    "label": "materialize"
  },
  "66ba": {
    "id": "66ba",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "750f"
    ]
  },
  "21e2": {
    "id": "21e2",
    "label": "timeInterval"
  },
  "675a": {
    "id": "675a",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "21e2"
    ]
  },
  "63e6": {
    "id": "63e6",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "66ba",
      "675a"
    ]
  },
  "2acd": {
    "id": "2acd",
    "label": "timeout"
  },
  "e072": {
    "id": "e072",
    "label": "I want to throw an error",
    "options": [
      "2acd"
    ]
  },
  "3b4a": {
    "id": "3b4a",
    "label": "timeoutWith"
  },
  "bcf1": {
    "id": "bcf1",
    "label": "I want to switch to another Observable",
    "options": [
      "3b4a"
    ]
  },
  "b411": {
    "id": "b411",
    "label": "single"
  },
  "fddb": {
    "id": "fddb",
    "label": "count"
  },
  "d86c": {
    "id": "d86c",
    "label": "I want to know how many values it emits",
    "options": [
      "fddb"
    ]
  },
  "ea98": {
    "id": "ea98",
    "label": "startWith"
  },
  "1e02": {
    "id": "1e02",
    "label": "I want to prepend one value",
    "options": [
      "ea98"
    ]
  },
  "42de": {
    "id": "42de",
    "label": "delay"
  },
  "da3b": {
    "id": "da3b",
    "label": "based on a given amount of time",
    "options": [
      "42de"
    ]
  },
  "427b": {
    "id": "427b",
    "label": "delayWhen"
  },
  "4ce9": {
    "id": "4ce9",
    "label": "based on the emissions of another Observable",
    "options": [
      "427b"
    ]
  },
  "36f5": {
    "id": "36f5",
    "label": "I want to delay the emissions",
    "options": [
      "da3b",
      "4ce9"
    ]
  },
  "05c3": {
    "id": "05c3",
    "label": "toArray"
  },
  "201b": {
    "id": "201b",
    "label": "and convert to an array",
    "options": [
      "05c3"
    ]
  },
  "c04a": {
    "id": "c04a",
    "label": "Observable",
    "method": "toPromise"
  },
  "dc57": {
    "id": "dc57",
    "label": "and convert to a Promise",
    "options": [
      "c04a"
    ]
  },
  "9b0c": {
    "id": "9b0c",
    "label": "until the Observable completes",
    "options": [
      "201b",
      "dc57"
    ]
  },
  "442d": {
    "id": "442d",
    "label": "pairwise"
  },
  "1dc7": {
    "id": "1dc7",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "442d"
    ]
  },
  "a308": {
    "id": "a308",
    "label": "partition"
  },
  "7f08": {
    "id": "7f08",
    "label": "bufferCount"
  },
  "737b": {
    "id": "737b",
    "label": "and emit the group as an array",
    "options": [
      "7f08"
    ]
  },
  "2b24": {
    "id": "2b24",
    "label": "windowCount"
  },
  "804b": {
    "id": "804b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2b24"
    ]
  },
  "3c6b": {
    "id": "3c6b",
    "label": "bufferTime"
  },
  "480e": {
    "id": "480e",
    "label": "and emit the group as an array",
    "options": [
      "3c6b"
    ]
  },
  "d519": {
    "id": "d519",
    "label": "windowTime"
  },
  "a455": {
    "id": "a455",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d519"
    ]
  },
  "8d05": {
    "id": "8d05",
    "label": "based on time",
    "options": [
      "480e",
      "a455"
    ]
  },
  "09b6": {
    "id": "09b6",
    "label": "buffer"
  },
  "b4c2": {
    "id": "b4c2",
    "label": "and emit the group as an array",
    "options": [
      "09b6"
    ]
  },
  "14f7": {
    "id": "14f7",
    "label": "window"
  },
  "28ab": {
    "id": "28ab",
    "label": "and emit the group as a nested Observable",
    "options": [
      "14f7"
    ]
  },
  "6bc2": {
    "id": "6bc2",
    "label": "until another Observable emits",
    "options": [
      "b4c2",
      "28ab"
    ]
  },
  "1f9b": {
    "id": "1f9b",
    "label": "bufferWhen"
  },
  "293a": {
    "id": "293a",
    "label": "and emit the group as an array",
    "options": [
      "1f9b"
    ]
  },
  "e89e": {
    "id": "e89e",
    "label": "windowWhen"
  },
  "c284": {
    "id": "c284",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e89e"
    ]
  },
  "f6ad": {
    "id": "f6ad",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "293a",
      "c284"
    ]
  },
  "744a": {
    "id": "744a",
    "label": "bufferToggle"
  },
  "b9d4": {
    "id": "b9d4",
    "label": "windowToggle"
  },
  "220f": {
    "id": "220f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b9d4"
    ]
  },
  "929a": {
    "id": "929a",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "6757",
      "220f"
    ]
  },
  "48fc": {
    "id": "48fc",
    "label": "groupBy"
  },
  "9ae6": {
    "id": "9ae6",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "48fc"
    ]
  },
  "15cd": {
    "id": "15cd",
    "label": "I want to group the values",
    "options": [
      "9b0c",
      "1dc7",
      "1379",
      "3688",
      "8d05",
      "6bc2",
      "f6ad",
      "929a",
      "9ae6"
    ]
  },
  "31d9": {
    "id": "31d9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "4565"
    ]
  },
  "d4d0": {
    "id": "d4d0",
    "label": "mergeMap"
  },
  "39f0": {
    "id": "39f0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "d4d0"
    ]
  },
  "64eb": {
    "id": "64eb",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "31d9",
      "39f0"
    ]
  },
  "1fed": {
    "id": "1fed",
    "label": "concatMapTo"
  },
  "cb90": {
    "id": "cb90",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "1fed"
    ]
  },
  "da04": {
    "id": "da04",
    "label": "concatMap"
  },
  "60ee": {
    "id": "60ee",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "da04"
    ]
  },
  "3c71": {
    "id": "3c71",
    "label": "switchMapTo"
  },
  "e351": {
    "id": "e351",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3c71"
    ]
  },
  "b39c": {
    "id": "b39c",
    "label": "switchMap"
  },
  "9bef": {
    "id": "9bef",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b39c"
    ]
  },
  "6afa": {
    "id": "6afa",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "e351",
      "9bef"
    ]
  },
  "b637": {
    "id": "b637",
    "label": "exhaustMap"
  },
  "aa6e": {
    "id": "aa6e",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "b637"
    ]
  },
  "61ce": {
    "id": "61ce",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "1421"
    ]
  },
  "6bda": {
    "id": "6bda",
    "label": "I want to start a new Observable for each value",
    "options": [
      "64eb",
      "6496",
      "6afa",
      "aa6e",
      "61ce"
    ]
  },
  "9a72": {
    "id": "9a72",
    "label": "pipe"
  },
  "a64f": {
    "id": "a64f",
    "label": "I want to perform custom operations",
    "options": [
      "9a72"
    ]
  },
  "f2cb": {
    "id": "f2cb",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "3349"
    ]
  },
  "96c6": {
    "id": "96c6",
    "label": "publish"
  },
  "3f53": {
    "id": "3f53",
    "label": "and start it manually or imperatively",
    "options": [
      "96c6"
    ]
  },
  "e693": {
    "id": "e693",
    "label": "using a conventional Subject",
    "options": [
      "f2cb",
      "3f53"
    ]
  },
  "f4b9": {
    "id": "f4b9",
    "label": "publishBehavior"
  },
  "c9ba": {
    "id": "c9ba",
    "label": "using a ReplaySubject",
    "options": [
      "5326"
    ]
  },
  "76ac": {
    "id": "76ac",
    "label": "publishLast"
  },
  "33ff": {
    "id": "33ff",
    "label": "using an AsyncSubject",
    "options": [
      "76ac"
    ]
  },
  "bbcf": {
    "id": "bbcf",
    "label": "using a specific subject implementation",
    "options": [
      "5182"
    ]
  },
  "a3c8": {
    "id": "a3c8",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "e693",
      "9900",
      "c9ba",
      "33ff",
      "bbcf"
    ]
  },
  "5da6": {
    "id": "5da6",
    "label": "catchError"
  },
  "5cb7": {
    "id": "5cb7",
    "label": "I want to start a new Observable",
    "options": [
      "5da6"
    ]
  },
  "5ca1": {
    "id": "5ca1",
    "label": "retry"
  },
  "9fae": {
    "id": "9fae",
    "label": "immediately",
    "options": [
      "5ca1"
    ]
  },
  "648b": {
    "id": "648b",
    "label": "retryWhen"
  },
  "3bbf": {
    "id": "3bbf",
    "label": "when another Observable emits",
    "options": [
      "648b"
    ]
  },
  "1ca7": {
    "id": "1ca7",
    "label": "I want to re-subscribe",
    "options": [
      "9fae",
      "3bbf"
    ]
  },
  "39dc": {
    "id": "39dc",
    "label": "repeat"
  },
  "c8ed": {
    "id": "c8ed",
    "label": "immediately",
    "options": [
      "39dc"
    ]
  },
  "d4f8": {
    "id": "d4f8",
    "label": "repeatWhen"
  },
  "e646": {
    "id": "e646",
    "label": "I want to start a new Observable",
    "options": [
      "2786"
    ]
  },
  "505b": {
    "id": "505b",
    "label": "when it completes",
    "options": [
      "2801",
      "e646"
    ]
  },
  "4dcc": {
    "id": "4dcc",
    "label": "finalize"
  },
  "e9ba": {
    "id": "e9ba",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "4dcc"
    ]
  },
  "3fb5": {
    "id": "3fb5",
    "label": "subscribeOn"
  },
  "fbef": {
    "id": "fbef",
    "label": "observeOn"
  },
  "8d06": {
    "id": "8d06",
    "label": "that routes values to observers",
    "options": [
      "fbef"
    ]
  },
  "6e67": {
    "id": "6e67",
    "label": "I want to change the scheduler",
    "options": [
      "1084",
      "8d06"
    ]
  },
  "7b2b": {
    "id": "7b2b",
    "label": "race"
  },
  "8f9f": {
    "id": "8f9f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "7b2b"
    ]
  },
  "94a6": {
    "id": "94a6",
    "label": "I want to output the values from either of them",
    "options": [
      "3423"
    ]
  },
  "b346": {
    "id": "b346",
    "label": "combineLatest"
  },
  "4c07": {
    "id": "4c07",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "b346"
    ]
  },
  "601b": {
    "id": "601b",
    "label": "withLatestFrom"
  },
  "98a4": {
    "id": "98a4",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "601b"
    ]
  },
  "57b6": {
    "id": "57b6",
    "label": "zip"
  },
  "022e": {
    "id": "022e",
    "label": "using each source value only once",
    "options": [
      "57b6"
    ]
  },
  "735e": {
    "id": "735e",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "4c07",
      "98a4",
      "022e"
    ]
  },
  "250d": {
    "id": "250d",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8f9f",
      "94a6",
      "735e"
    ]
  },
  "844e": {
    "id": "844e",
    "label": "I have one existing Observable, and",
    "options": [
      "5c00",
      "b645",
      "9f30",
      "0944",
      "43fb",
      "13e3",
      "63e6",
      "1958",
      "1931",
      "d86c",
      "1e02",
      "36f5",
      "15cd",
      "6bda",
      "a64f",
      "a3c8",
      "8558",
      "505b",
      "e9ba",
      "6e67",
      "250d"
    ]
  },
  "01e3": {
    "id": "01e3",
    "label": "race"
  },
  "b07e": {
    "id": "b07e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "01e3"
    ]
  },
  "18a2": {
    "id": "18a2",
    "label": "forkJoin"
  },
  "d267": {
    "id": "d267",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "18a2"
    ]
  },
  "838a": {
    "id": "838a",
    "label": "I want to output the values from either of them",
    "options": [
      "4948"
    ]
  },
  "759a": {
    "id": "759a",
    "label": "combineLatest"
  },
  "26ad": {
    "id": "26ad",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "759a"
    ]
  },
  "18df": {
    "id": "18df",
    "label": "zip"
  },
  "37bb": {
    "id": "37bb",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "26ad",
      "6410"
    ]
  },
  "d244": {
    "id": "d244",
    "label": "concat"
  },
  "a3bd": {
    "id": "a3bd",
    "label": "I want to subscribe to each in order",
    "options": [
      "d244"
    ]
  },
  "ac5b": {
    "id": "ac5b",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "b07e",
      "d267",
      "838a",
      "37bb",
      "a3bd"
    ]
  },
  "f49d": {
    "id": "f49d",
    "label": "Observable",
    "method": "create"
  },
  "6f35": {
    "id": "6f35",
    "label": "generate"
  },
  "db42": {
    "id": "db42",
    "label": "using a state machine similar to a for loop",
    "options": [
      "6f35"
    ]
  },
  "63ed": {
    "id": "63ed",
    "label": "throwError"
  },
  "d8a9": {
    "id": "d8a9",
    "label": "that throws an error",
    "options": [
      "63ed"
    ]
  },
  "a1ab": {
    "id": "a1ab",
    "label": "EMPTY"
  },
  "5f9c": {
    "id": "5f9c",
    "label": "that just completes, without emitting values",
    "options": [
      "a1ab"
    ]
  },
  "3ca0": {
    "id": "3ca0",
    "label": "NEVER"
  },
  "339e": {
    "id": "339e",
    "label": "that never emits anything",
    "options": [
      "3ca0"
    ]
  },
  "d543": {
    "id": "d543",
    "label": "fromEvent"
  },
  "0832": {
    "id": "0832",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "d543"
    ]
  },
  "af05": {
    "id": "af05",
    "label": "fromEventPattern"
  },
  "c36a": {
    "id": "c36a",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "af05"
    ]
  },
  "32ff": {
    "id": "32ff",
    "label": "from an existing source of events",
    "options": [
      "0832",
      "c36a"
    ]
  },
  "3b49": {
    "id": "3b49",
    "label": "from"
  },
  "7ecf": {
    "id": "7ecf",
    "label": "from a Promise or an event source",
    "options": [
      "3b49"
    ]
  },
  "7fae": {
    "id": "7fae",
    "label": "from"
  },
  "0a2e": {
    "id": "0a2e",
    "label": "over the values in an array",
    "options": [
      "7fae"
    ]
  },
  "307d": {
    "id": "307d",
    "label": "range"
  },
  "2af9": {
    "id": "2af9",
    "label": "over values in a numeric range",
    "options": [
      "307d"
    ]
  },
  "a0eb": {
    "id": "a0eb",
    "label": "of"
  },
  "aec8": {
    "id": "aec8",
    "label": "over prefined values given as arguments",
    "options": [
      "a0eb"
    ]
  },
  "bb12": {
    "id": "bb12",
    "label": "that iterates",
    "options": [
      "0a2e",
      "2af9",
      "aec8"
    ]
  },
  "ad9e": {
    "id": "ad9e",
    "label": "interval"
  },
  "70b3": {
    "id": "70b3",
    "label": "regularly",
    "options": [
      "ad9e"
    ]
  },
  "97bd": {
    "id": "97bd",
    "label": "timer"
  },
  "9f8a": {
    "id": "9f8a",
    "label": "with an optional initial delay",
    "options": [
      "97bd"
    ]
  },
  "90fd": {
    "id": "90fd",
    "label": "that emits values on a timer",
    "options": [
      "70b3",
      "9f8a"
    ]
  },
  "a7b6": {
    "id": "a7b6",
    "label": "defer"
  },
  "761a": {
    "id": "761a",
    "label": "which is built on demand when subscribed",
    "options": [
      "a7b6"
    ]
  },
  "5e8d": {
    "id": "5e8d",
    "label": "bindCallback"
  },
  "8f4d": {
    "id": "8f4d",
    "label": "supporting a conventional callback API",
    "options": [
      "5e8d"
    ]
  },
  "eaa0": {
    "id": "eaa0",
    "label": "bindNodeCallback"
  },
  "f622": {
    "id": "f622",
    "label": "supporting Node.js callback style API",
    "options": [
      "eaa0"
    ]
  },
  "8b02": {
    "id": "8b02",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "8f4d",
      "f622"
    ]
  },
  "dcfc": {
    "id": "dcfc",
    "label": "I have no Observables yet, and",
    "options": [
      "2159",
      "8b02"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "844e",
      "ac5b",
      "dcfc"
    ]
  }
}