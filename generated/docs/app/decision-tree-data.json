{
  "2502": {
    "id": "2502",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3cfb"
    ]
  },
  "3042": {
    "id": "3042",
    "label": "emitted just before the current value",
    "options": [
      "72f9"
    ]
  },
  "3204": {
    "id": "3204",
    "label": "and emit the group as an array",
    "options": [
      "a295"
    ]
  },
  "3230": {
    "id": "3230",
    "label": "when another Observable emits",
    "options": [
      "e578"
    ]
  },
  "3781": {
    "id": "3781",
    "label": "pipe"
  },
  "4816": {
    "id": "4816",
    "label": "and emit the group as an array",
    "options": [
      "b1b1"
    ]
  },
  "4841": {
    "id": "4841",
    "label": "finalize"
  },
  "4921": {
    "id": "4921",
    "label": "I want to subscribe to each in order",
    "options": [
      "a746"
    ]
  },
  "5442": {
    "id": "5442",
    "label": "emitted just before the current value",
    "options": [
      "d63d"
    ]
  },
  "5489": {
    "id": "5489",
    "label": "exhaustMap"
  },
  "5639": {
    "id": "5639",
    "label": "if they are at the end of the Observable",
    "options": [
      "df1c",
      "27b7"
    ]
  },
  "5786": {
    "id": "5786",
    "label": "from"
  },
  "6139": {
    "id": "6139",
    "label": "in batches of a particular size",
    "options": [
      "1b63",
      "f3b2"
    ]
  },
  "6188": {
    "id": "6188",
    "label": "that routes calls to subscribe",
    "options": [
      "d19b"
    ]
  },
  "6500": {
    "id": "6500",
    "label": "mergeMap"
  },
  "6598": {
    "id": "6598",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "1fd9"
    ]
  },
  "6732": {
    "id": "6732",
    "label": "that never emits anything",
    "options": [
      "88c0"
    ]
  },
  "6813": {
    "id": "6813",
    "label": "fromEvent"
  },
  "6887": {
    "id": "6887",
    "label": "pairwise"
  },
  "7418": {
    "id": "7418",
    "label": "and emit the group as a nested Observable",
    "options": [
      "93f3"
    ]
  },
  "7438": {
    "id": "7438",
    "label": "when an error occurs",
    "options": [
      "5cb3",
      "8a87"
    ]
  },
  "7448": {
    "id": "7448",
    "label": "repeat"
  },
  "7998": {
    "id": "7998",
    "label": "merge"
  },
  "8801": {
    "id": "8801",
    "label": "I want to output the values from either of them",
    "options": [
      "7998"
    ]
  },
  "9134": {
    "id": "9134",
    "label": "I want to throw an error",
    "options": [
      "e1f8"
    ]
  },
  "9557": {
    "id": "9557",
    "label": "I want to create a new Observable",
    "options": [
      "556c",
      "8aeb",
      "a7aa",
      "66ed",
      "6732",
      "5f6b",
      "2b50",
      "55bb",
      "d74a",
      "ed68"
    ]
  },
  "9898": {
    "id": "9898",
    "label": "based on a given amount",
    "options": [
      "2dc6"
    ]
  },
  "6d87": {
    "id": "6d87",
    "label": "mapTo"
  },
  "2dec": {
    "id": "2dec",
    "label": "to be a constant value",
    "options": [
      "6d87"
    ]
  },
  "464e": {
    "id": "464e",
    "label": "map"
  },
  "f8f5": {
    "id": "f8f5",
    "label": "to be a value calculated through a formula",
    "options": [
      "464e"
    ]
  },
  "f252": {
    "id": "f252",
    "label": "I want to change each emitted value",
    "options": [
      "2dec",
      "f8f5"
    ]
  },
  "6a24": {
    "id": "6a24",
    "label": "pluck"
  },
  "c2e6": {
    "id": "c2e6",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "6a24"
    ]
  },
  "e596": {
    "id": "e596",
    "label": "tap"
  },
  "855b": {
    "id": "855b",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "e596"
    ]
  },
  "2bd5": {
    "id": "2bd5",
    "label": "filter"
  },
  "ca82": {
    "id": "ca82",
    "label": "based on custom logic",
    "options": [
      "2bd5"
    ]
  },
  "257c": {
    "id": "257c",
    "label": "first"
  },
  "4f62": {
    "id": "4f62",
    "label": "and only the first value",
    "options": [
      "257c"
    ]
  },
  "2dc6": {
    "id": "2dc6",
    "label": "take"
  },
  "387b": {
    "id": "387b",
    "label": "takeWhile"
  },
  "d5f5": {
    "id": "d5f5",
    "label": "based on custom logic",
    "options": [
      "387b"
    ]
  },
  "e515": {
    "id": "e515",
    "label": "if they are at the start of the Observable",
    "options": [
      "4f62",
      "9898",
      "d5f5"
    ]
  },
  "d691": {
    "id": "d691",
    "label": "elementAt"
  },
  "e3bf": {
    "id": "e3bf",
    "label": "if they are exactly the n-th emission",
    "options": [
      "d691"
    ]
  },
  "b51c": {
    "id": "b51c",
    "label": "last"
  },
  "df1c": {
    "id": "df1c",
    "label": "and only the last value",
    "options": [
      "b51c"
    ]
  },
  "b678": {
    "id": "b678",
    "label": "takeLast"
  },
  "27b7": {
    "id": "27b7",
    "label": "based on a given amount",
    "options": [
      "b678"
    ]
  },
  "559c": {
    "id": "559c",
    "label": "takeUntil"
  },
  "18c0": {
    "id": "18c0",
    "label": "until another Observable emits a value",
    "options": [
      "559c"
    ]
  },
  "ad8f": {
    "id": "ad8f",
    "label": "I want to allow some values to pass",
    "options": [
      "ca82",
      "e515",
      "e3bf",
      "5639",
      "18c0"
    ]
  },
  "b58a": {
    "id": "b58a",
    "label": "ignoreElements"
  },
  "494c": {
    "id": "494c",
    "label": "altogether",
    "options": [
      "b58a"
    ]
  },
  "9bce": {
    "id": "9bce",
    "label": "skip"
  },
  "d555": {
    "id": "d555",
    "label": "based on a given amount",
    "options": [
      "9bce"
    ]
  },
  "f157": {
    "id": "f157",
    "label": "skipWhile"
  },
  "cc89": {
    "id": "cc89",
    "label": "based on custom logic",
    "options": [
      "f157"
    ]
  },
  "af44": {
    "id": "af44",
    "label": "from the start of the Observable",
    "options": [
      "d555",
      "cc89"
    ]
  },
  "7e4e": {
    "id": "7e4e",
    "label": "skipLast"
  },
  "3a7a": {
    "id": "3a7a",
    "label": "from the end of the Observable",
    "options": [
      "7e4e"
    ]
  },
  "62e6": {
    "id": "62e6",
    "label": "skipUntil"
  },
  "498c": {
    "id": "498c",
    "label": "until another Observable emits a value",
    "options": [
      "62e6"
    ]
  },
  "d63d": {
    "id": "d63d",
    "label": "distinctUntilChanged"
  },
  "7f54": {
    "id": "7f54",
    "label": "distinct"
  },
  "d29b": {
    "id": "d29b",
    "label": "emitted some time in the past",
    "options": [
      "7f54"
    ]
  },
  "0880": {
    "id": "0880",
    "label": "according to value equality",
    "options": [
      "5442",
      "d29b"
    ]
  },
  "72f9": {
    "id": "72f9",
    "label": "distinctUntilKeyChanged"
  },
  "0125": {
    "id": "0125",
    "label": "according to a key or object property",
    "options": [
      "3042"
    ]
  },
  "4b83": {
    "id": "4b83",
    "label": "that match some previous value",
    "options": [
      "0880",
      "0125"
    ]
  },
  "a72c": {
    "id": "a72c",
    "label": "throttle"
  },
  "9f21": {
    "id": "9f21",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a72c"
    ]
  },
  "412b": {
    "id": "412b",
    "label": "throttleTime"
  },
  "9c9a": {
    "id": "9c9a",
    "label": "where time windows are determined by a time duration",
    "options": [
      "412b"
    ]
  },
  "341b": {
    "id": "341b",
    "label": "by emitting the first value in each time window",
    "options": [
      "9f21",
      "9c9a"
    ]
  },
  "e036": {
    "id": "e036",
    "label": "audit"
  },
  "6fd8": {
    "id": "6fd8",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e036"
    ]
  },
  "5c85": {
    "id": "5c85",
    "label": "auditTime"
  },
  "e683": {
    "id": "e683",
    "label": "where time windows are determined by a time duration",
    "options": [
      "5c85"
    ]
  },
  "b3c0": {
    "id": "b3c0",
    "label": "by emitting the last value in each time window",
    "options": [
      "6fd8",
      "e683"
    ]
  },
  "fe20": {
    "id": "fe20",
    "label": "debounce"
  },
  "0fe6": {
    "id": "0fe6",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "fe20"
    ]
  },
  "1fd9": {
    "id": "1fd9",
    "label": "debounceTime"
  },
  "c7db": {
    "id": "c7db",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "0fe6",
      "6598"
    ]
  },
  "59bf": {
    "id": "59bf",
    "label": "that occur too frequently",
    "options": [
      "341b",
      "b3c0",
      "c7db"
    ]
  },
  "355d": {
    "id": "355d",
    "label": "I want to ignore values",
    "options": [
      "494c",
      "af44",
      "3a7a",
      "498c",
      "4b83",
      "59bf"
    ]
  },
  "ba07": {
    "id": "ba07",
    "label": "reduce"
  },
  "ed97": {
    "id": "ed97",
    "label": "and only output the final computed value",
    "options": [
      "ba07"
    ]
  },
  "91b6": {
    "id": "91b6",
    "label": "scan"
  },
  "d54c": {
    "id": "d54c",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "91b6"
    ]
  },
  "6a87": {
    "id": "6a87",
    "label": "mergeScan"
  },
  "d96f": {
    "id": "d96f",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "6a87"
    ]
  },
  "c8a9": {
    "id": "c8a9",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "ed97",
      "d54c",
      "d96f"
    ]
  },
  "d72a": {
    "id": "d72a",
    "label": "materialize"
  },
  "8fc9": {
    "id": "8fc9",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "d72a"
    ]
  },
  "6a39": {
    "id": "6a39",
    "label": "timeInterval"
  },
  "c63c": {
    "id": "c63c",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "6a39"
    ]
  },
  "88be": {
    "id": "88be",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "8fc9",
      "c63c"
    ]
  },
  "e1f8": {
    "id": "e1f8",
    "label": "timeout"
  },
  "71b5": {
    "id": "71b5",
    "label": "timeoutWith"
  },
  "c751": {
    "id": "c751",
    "label": "I want to switch to another Observable",
    "options": [
      "71b5"
    ]
  },
  "daea": {
    "id": "daea",
    "label": "after a period of inactivity",
    "options": [
      "9134",
      "c751"
    ]
  },
  "acb4": {
    "id": "acb4",
    "label": "single"
  },
  "da9b": {
    "id": "da9b",
    "label": "I want to ensure there is only one value",
    "options": [
      "acb4"
    ]
  },
  "d350": {
    "id": "d350",
    "label": "count"
  },
  "40ac": {
    "id": "40ac",
    "label": "I want to know how many values it emits",
    "options": [
      "d350"
    ]
  },
  "f7bf": {
    "id": "f7bf",
    "label": "startWith"
  },
  "0a97": {
    "id": "0a97",
    "label": "I want to prepend one value",
    "options": [
      "f7bf"
    ]
  },
  "63cc": {
    "id": "63cc",
    "label": "delay"
  },
  "e46a": {
    "id": "e46a",
    "label": "based on a given amount of time",
    "options": [
      "63cc"
    ]
  },
  "bd11": {
    "id": "bd11",
    "label": "delayWhen"
  },
  "bc76": {
    "id": "bc76",
    "label": "based on the emissions of another Observable",
    "options": [
      "bd11"
    ]
  },
  "41f6": {
    "id": "41f6",
    "label": "I want to delay the emissions",
    "options": [
      "e46a",
      "bc76"
    ]
  },
  "f677": {
    "id": "f677",
    "label": "toArray"
  },
  "4db1": {
    "id": "4db1",
    "label": "and convert to an array",
    "options": [
      "f677"
    ]
  },
  "99ff": {
    "id": "99ff",
    "label": "Observable",
    "method": "toPromise"
  },
  "8b68": {
    "id": "8b68",
    "label": "and convert to a Promise",
    "options": [
      "99ff"
    ]
  },
  "c906": {
    "id": "c906",
    "label": "until the Observable completes",
    "options": [
      "4db1",
      "8b68"
    ]
  },
  "fb49": {
    "id": "fb49",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "6887"
    ]
  },
  "b3a1": {
    "id": "b3a1",
    "label": "partition"
  },
  "622a": {
    "id": "622a",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "b3a1"
    ]
  },
  "b818": {
    "id": "b818",
    "label": "bufferCount"
  },
  "1b63": {
    "id": "1b63",
    "label": "and emit the group as an array",
    "options": [
      "b818"
    ]
  },
  "02ae": {
    "id": "02ae",
    "label": "windowCount"
  },
  "f3b2": {
    "id": "f3b2",
    "label": "and emit the group as a nested Observable",
    "options": [
      "02ae"
    ]
  },
  "b1b1": {
    "id": "b1b1",
    "label": "bufferTime"
  },
  "194f": {
    "id": "194f",
    "label": "windowTime"
  },
  "0aa3": {
    "id": "0aa3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "194f"
    ]
  },
  "db8c": {
    "id": "db8c",
    "label": "based on time",
    "options": [
      "4816",
      "0aa3"
    ]
  },
  "b453": {
    "id": "b453",
    "label": "buffer"
  },
  "ede8": {
    "id": "ede8",
    "label": "and emit the group as an array",
    "options": [
      "b453"
    ]
  },
  "93f3": {
    "id": "93f3",
    "label": "window"
  },
  "d7d8": {
    "id": "d7d8",
    "label": "until another Observable emits",
    "options": [
      "ede8",
      "7418"
    ]
  },
  "a295": {
    "id": "a295",
    "label": "bufferWhen"
  },
  "38a9": {
    "id": "38a9",
    "label": "windowWhen"
  },
  "ccce": {
    "id": "ccce",
    "label": "and emit the group as a nested Observable",
    "options": [
      "38a9"
    ]
  },
  "667f": {
    "id": "667f",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "3204",
      "ccce"
    ]
  },
  "291b": {
    "id": "291b",
    "label": "bufferToggle"
  },
  "96df": {
    "id": "96df",
    "label": "and emit the group as an array",
    "options": [
      "291b"
    ]
  },
  "9f87": {
    "id": "9f87",
    "label": "windowToggle"
  },
  "955b": {
    "id": "955b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9f87"
    ]
  },
  "efe0": {
    "id": "efe0",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "96df",
      "955b"
    ]
  },
  "14fe": {
    "id": "14fe",
    "label": "groupBy"
  },
  "0791": {
    "id": "0791",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "14fe"
    ]
  },
  "e410": {
    "id": "e410",
    "label": "I want to group the values",
    "options": [
      "c906",
      "fb49",
      "622a",
      "6139",
      "db8c",
      "d7d8",
      "667f",
      "efe0",
      "0791"
    ]
  },
  "cbb2": {
    "id": "cbb2",
    "label": "mergeMapTo"
  },
  "819a": {
    "id": "819a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "cbb2"
    ]
  },
  "87d2": {
    "id": "87d2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "6500"
    ]
  },
  "450f": {
    "id": "450f",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "819a",
      "87d2"
    ]
  },
  "0ab0": {
    "id": "0ab0",
    "label": "concatMapTo"
  },
  "9d82": {
    "id": "9d82",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "0ab0"
    ]
  },
  "b85e": {
    "id": "b85e",
    "label": "concatMap"
  },
  "fa2f": {
    "id": "fa2f",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b85e"
    ]
  },
  "f8a2": {
    "id": "f8a2",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "9d82",
      "fa2f"
    ]
  },
  "3cfb": {
    "id": "3cfb",
    "label": "switchMapTo"
  },
  "1c88": {
    "id": "1c88",
    "label": "switchMap"
  },
  "1ca6": {
    "id": "1ca6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1c88"
    ]
  },
  "d0ac": {
    "id": "d0ac",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "2502",
      "1ca6"
    ]
  },
  "992a": {
    "id": "992a",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "5489"
    ]
  },
  "92d0": {
    "id": "92d0",
    "label": "expand"
  },
  "385f": {
    "id": "385f",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "92d0"
    ]
  },
  "148f": {
    "id": "148f",
    "label": "I want to start a new Observable for each value",
    "options": [
      "450f",
      "f8a2",
      "d0ac",
      "992a",
      "385f"
    ]
  },
  "982a": {
    "id": "982a",
    "label": "I want to perform custom operations",
    "options": [
      "3781"
    ]
  },
  "ef1b": {
    "id": "ef1b",
    "label": "share"
  },
  "5fa5": {
    "id": "5fa5",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "ef1b"
    ]
  },
  "8f2d": {
    "id": "8f2d",
    "label": "publish"
  },
  "0a69": {
    "id": "0a69",
    "label": "and start it manually or imperatively",
    "options": [
      "8f2d"
    ]
  },
  "967e": {
    "id": "967e",
    "label": "using a conventional Subject",
    "options": [
      "5fa5",
      "0a69"
    ]
  },
  "49cf": {
    "id": "49cf",
    "label": "publishBehavior"
  },
  "de40": {
    "id": "de40",
    "label": "using a BehaviorSubject",
    "options": [
      "49cf"
    ]
  },
  "505b": {
    "id": "505b",
    "label": "publishReplay"
  },
  "545d": {
    "id": "545d",
    "label": "using a ReplaySubject",
    "options": [
      "505b"
    ]
  },
  "ecb8": {
    "id": "ecb8",
    "label": "publishLast"
  },
  "ffa9": {
    "id": "ffa9",
    "label": "using an AsyncSubject",
    "options": [
      "ecb8"
    ]
  },
  "a630": {
    "id": "a630",
    "label": "multicast"
  },
  "88e9": {
    "id": "88e9",
    "label": "using a specific subject implementation",
    "options": [
      "a630"
    ]
  },
  "dfe3": {
    "id": "dfe3",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "967e",
      "de40",
      "545d",
      "ffa9",
      "88e9"
    ]
  },
  "f81c": {
    "id": "f81c",
    "label": "catchError"
  },
  "5cb3": {
    "id": "5cb3",
    "label": "I want to start a new Observable",
    "options": [
      "f81c"
    ]
  },
  "a0fb": {
    "id": "a0fb",
    "label": "retry"
  },
  "29ba": {
    "id": "29ba",
    "label": "immediately",
    "options": [
      "a0fb"
    ]
  },
  "e578": {
    "id": "e578",
    "label": "retryWhen"
  },
  "8a87": {
    "id": "8a87",
    "label": "I want to re-subscribe",
    "options": [
      "29ba",
      "3230"
    ]
  },
  "96f6": {
    "id": "96f6",
    "label": "immediately",
    "options": [
      "7448"
    ]
  },
  "f5d6": {
    "id": "f5d6",
    "label": "repeatWhen"
  },
  "6d21": {
    "id": "6d21",
    "label": "when another Observable emits",
    "options": [
      "f5d6"
    ]
  },
  "7c41": {
    "id": "7c41",
    "label": "I want to re-subscribe",
    "options": [
      "96f6",
      "6d21"
    ]
  },
  "ed44": {
    "id": "ed44",
    "label": "concat"
  },
  "a234": {
    "id": "a234",
    "label": "I want to start a new Observable",
    "options": [
      "ed44"
    ]
  },
  "1cc2": {
    "id": "1cc2",
    "label": "when it completes",
    "options": [
      "7c41",
      "a234"
    ]
  },
  "b102": {
    "id": "b102",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "4841"
    ]
  },
  "d19b": {
    "id": "d19b",
    "label": "subscribeOn"
  },
  "81e5": {
    "id": "81e5",
    "label": "observeOn"
  },
  "404e": {
    "id": "404e",
    "label": "that routes values to observers",
    "options": [
      "81e5"
    ]
  },
  "074f": {
    "id": "074f",
    "label": "I want to change the scheduler",
    "options": [
      "6188",
      "404e"
    ]
  },
  "a7d5": {
    "id": "a7d5",
    "label": "race"
  },
  "b8bd": {
    "id": "b8bd",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a7d5"
    ]
  },
  "86f9": {
    "id": "86f9",
    "label": "merge"
  },
  "c26b": {
    "id": "c26b",
    "label": "I want to output the values from either of them",
    "options": [
      "86f9"
    ]
  },
  "e57e": {
    "id": "e57e",
    "label": "combineLatest"
  },
  "5a6a": {
    "id": "5a6a",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "e57e"
    ]
  },
  "e10b": {
    "id": "e10b",
    "label": "withLatestFrom"
  },
  "a146": {
    "id": "a146",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "e10b"
    ]
  },
  "9e65": {
    "id": "9e65",
    "label": "zip"
  },
  "e451": {
    "id": "e451",
    "label": "using each source value only once",
    "options": [
      "9e65"
    ]
  },
  "df78": {
    "id": "df78",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "5a6a",
      "a146",
      "e451"
    ]
  },
  "f162": {
    "id": "f162",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "b8bd",
      "c26b",
      "df78"
    ]
  },
  "338f": {
    "id": "338f",
    "label": "I have one existing Observable, and",
    "options": [
      "f252",
      "c2e6",
      "855b",
      "ad8f",
      "355d",
      "c8a9",
      "88be",
      "daea",
      "da9b",
      "40ac",
      "0a97",
      "41f6",
      "e410",
      "148f",
      "982a",
      "dfe3",
      "7438",
      "1cc2",
      "b102",
      "074f",
      "f162"
    ]
  },
  "40be": {
    "id": "40be",
    "label": "race"
  },
  "ea46": {
    "id": "ea46",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "40be"
    ]
  },
  "64b6": {
    "id": "64b6",
    "label": "forkJoin"
  },
  "e5b8": {
    "id": "e5b8",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "64b6"
    ]
  },
  "a8ce": {
    "id": "a8ce",
    "label": "combineLatest"
  },
  "d04b": {
    "id": "d04b",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "a8ce"
    ]
  },
  "edeb": {
    "id": "edeb",
    "label": "zip"
  },
  "5ff6": {
    "id": "5ff6",
    "label": "using each source value only once",
    "options": [
      "edeb"
    ]
  },
  "4ae5": {
    "id": "4ae5",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "d04b",
      "5ff6"
    ]
  },
  "a746": {
    "id": "a746",
    "label": "concat"
  },
  "4afb": {
    "id": "4afb",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "ea46",
      "e5b8",
      "8801",
      "4ae5",
      "4921"
    ]
  },
  "634c": {
    "id": "634c",
    "label": "Observable",
    "method": "create"
  },
  "556c": {
    "id": "556c",
    "label": "using custom logic",
    "options": [
      "634c"
    ]
  },
  "fb05": {
    "id": "fb05",
    "label": "generate"
  },
  "8aeb": {
    "id": "8aeb",
    "label": "using a state machine similar to a for loop",
    "options": [
      "fb05"
    ]
  },
  "f5de": {
    "id": "f5de",
    "label": "throwError"
  },
  "a7aa": {
    "id": "a7aa",
    "label": "that throws an error",
    "options": [
      "f5de"
    ]
  },
  "0e52": {
    "id": "0e52",
    "label": "EMPTY"
  },
  "66ed": {
    "id": "66ed",
    "label": "that just completes, without emitting values",
    "options": [
      "0e52"
    ]
  },
  "88c0": {
    "id": "88c0",
    "label": "NEVER"
  },
  "be25": {
    "id": "be25",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "6813"
    ]
  },
  "3b9f": {
    "id": "3b9f",
    "label": "fromEventPattern"
  },
  "333d": {
    "id": "333d",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "3b9f"
    ]
  },
  "5f6b": {
    "id": "5f6b",
    "label": "from an existing source of events",
    "options": [
      "be25",
      "333d"
    ]
  },
  "efa2": {
    "id": "efa2",
    "label": "from"
  },
  "2b50": {
    "id": "2b50",
    "label": "from a Promise or an event source",
    "options": [
      "efa2"
    ]
  },
  "1b54": {
    "id": "1b54",
    "label": "over the values in an array",
    "options": [
      "5786"
    ]
  },
  "552f": {
    "id": "552f",
    "label": "range"
  },
  "c9dd": {
    "id": "c9dd",
    "label": "over values in a numeric range",
    "options": [
      "552f"
    ]
  },
  "636c": {
    "id": "636c",
    "label": "of"
  },
  "a541": {
    "id": "a541",
    "label": "over prefined values given as arguments",
    "options": [
      "636c"
    ]
  },
  "55bb": {
    "id": "55bb",
    "label": "that iterates",
    "options": [
      "1b54",
      "c9dd",
      "a541"
    ]
  },
  "dc9b": {
    "id": "dc9b",
    "label": "interval"
  },
  "9cc6": {
    "id": "9cc6",
    "label": "regularly",
    "options": [
      "dc9b"
    ]
  },
  "d0e2": {
    "id": "d0e2",
    "label": "timer"
  },
  "48c9": {
    "id": "48c9",
    "label": "with an optional initial delay",
    "options": [
      "d0e2"
    ]
  },
  "d74a": {
    "id": "d74a",
    "label": "that emits values on a timer",
    "options": [
      "9cc6",
      "48c9"
    ]
  },
  "16c7": {
    "id": "16c7",
    "label": "defer"
  },
  "ed68": {
    "id": "ed68",
    "label": "which is built on demand when subscribed",
    "options": [
      "16c7"
    ]
  },
  "97be": {
    "id": "97be",
    "label": "bindCallback"
  },
  "f83c": {
    "id": "f83c",
    "label": "supporting a conventional callback API",
    "options": [
      "97be"
    ]
  },
  "91c5": {
    "id": "91c5",
    "label": "bindNodeCallback"
  },
  "e330": {
    "id": "e330",
    "label": "supporting Node.js callback style API",
    "options": [
      "91c5"
    ]
  },
  "edba": {
    "id": "edba",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "f83c",
      "e330"
    ]
  },
  "a77c": {
    "id": "a77c",
    "label": "I have no Observables yet, and",
    "options": [
      "9557",
      "edba"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "338f",
      "4afb",
      "a77c"
    ]
  }
}