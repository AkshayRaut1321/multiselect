{
  "1150": {
    "id": "1150",
    "label": "until another Observable emits a value",
    "options": [
      "d435"
    ]
  },
  "1269": {
    "id": "1269",
    "label": "of"
  },
  "1349": {
    "id": "1349",
    "label": "distinctUntilChanged"
  },
  "1365": {
    "id": "1365",
    "label": "withLatestFrom"
  },
  "1373": {
    "id": "1373",
    "label": "skipLast"
  },
  "1679": {
    "id": "1679",
    "label": "throttle"
  },
  "2930": {
    "id": "2930",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7bb6"
    ]
  },
  "3158": {
    "id": "3158",
    "label": "bufferToggle"
  },
  "3217": {
    "id": "3217",
    "label": "I want to delay the emissions",
    "options": [
      "1c4c",
      "b571"
    ]
  },
  "3272": {
    "id": "3272",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "ad66",
      "4433"
    ]
  },
  "3405": {
    "id": "3405",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "297b",
      "9ea4",
      "1c6d",
      "f0e3",
      "fdc9"
    ]
  },
  "3657": {
    "id": "3657",
    "label": "I want to create a new Observable",
    "options": [
      "3c14",
      "95c4",
      "3cb6",
      "6016",
      "59e1",
      "d17c",
      "894b",
      "92ed",
      "af2d",
      "6a49"
    ]
  },
  "4145": {
    "id": "4145",
    "label": "that routes values to observers",
    "options": [
      "45c6"
    ]
  },
  "4371": {
    "id": "4371",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "7c2c"
    ]
  },
  "4433": {
    "id": "4433",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "1b7a"
    ]
  },
  "4583": {
    "id": "4583",
    "label": "over the values in an array",
    "options": [
      "bd0b"
    ]
  },
  "5640": {
    "id": "5640",
    "label": "generate"
  },
  "5700": {
    "id": "5700",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "6291"
    ]
  },
  "5974": {
    "id": "5974",
    "label": "and emit the group as an array",
    "options": [
      "3158"
    ]
  },
  "6016": {
    "id": "6016",
    "label": "that just completes, without emitting values",
    "options": [
      "af82"
    ]
  },
  "6045": {
    "id": "6045",
    "label": "materialize"
  },
  "6062": {
    "id": "6062",
    "label": "combineLatest"
  },
  "6070": {
    "id": "6070",
    "label": "I want to ignore values",
    "options": [
      "5c90",
      "6342",
      "4cc5",
      "1150",
      "f6be",
      "863a"
    ]
  },
  "6283": {
    "id": "6283",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "c8dd"
    ]
  },
  "6291": {
    "id": "6291",
    "label": "share"
  },
  "6342": {
    "id": "6342",
    "label": "from the start of the Observable",
    "options": [
      "f8fe",
      "d3a7"
    ]
  },
  "6429": {
    "id": "6429",
    "label": "auditTime"
  },
  "6465": {
    "id": "6465",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "b564",
      "222b",
      "0d00"
    ]
  },
  "7144": {
    "id": "7144",
    "label": "according to value equality",
    "options": [
      "4abc",
      "afa5"
    ]
  },
  "7221": {
    "id": "7221",
    "label": "publishLast"
  },
  "7472": {
    "id": "7472",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "ba58",
      "0ade"
    ]
  },
  "7490": {
    "id": "7490",
    "label": "delay"
  },
  "8014": {
    "id": "8014",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e317"
    ]
  },
  "8381": {
    "id": "8381",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "2d69"
    ]
  },
  "8514": {
    "id": "8514",
    "label": "scan"
  },
  "8620": {
    "id": "8620",
    "label": "concatMap"
  },
  "8636": {
    "id": "8636",
    "label": "until another Observable emits",
    "options": [
      "85e5",
      "2930"
    ]
  },
  "9723": {
    "id": "9723",
    "label": "if they are exactly the n-th emission",
    "options": [
      "af4f"
    ]
  },
  "9883": {
    "id": "9883",
    "label": "buffer"
  },
  "9945": {
    "id": "9945",
    "label": "from"
  },
  "b507": {
    "id": "b507",
    "label": "mapTo"
  },
  "b991": {
    "id": "b991",
    "label": "to be a constant value",
    "options": [
      "b507"
    ]
  },
  "602f": {
    "id": "602f",
    "label": "map"
  },
  "f804": {
    "id": "f804",
    "label": "to be a value calculated through a formula",
    "options": [
      "602f"
    ]
  },
  "8dfd": {
    "id": "8dfd",
    "label": "I want to change each emitted value",
    "options": [
      "b991",
      "f804"
    ]
  },
  "b5ca": {
    "id": "b5ca",
    "label": "pluck"
  },
  "e164": {
    "id": "e164",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "b5ca"
    ]
  },
  "23de": {
    "id": "23de",
    "label": "tap"
  },
  "a1e0": {
    "id": "a1e0",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "23de"
    ]
  },
  "e201": {
    "id": "e201",
    "label": "filter"
  },
  "47cd": {
    "id": "47cd",
    "label": "based on custom logic",
    "options": [
      "e201"
    ]
  },
  "7e2a": {
    "id": "7e2a",
    "label": "first"
  },
  "e073": {
    "id": "e073",
    "label": "and only the first value",
    "options": [
      "7e2a"
    ]
  },
  "a53b": {
    "id": "a53b",
    "label": "take"
  },
  "f9f3": {
    "id": "f9f3",
    "label": "based on a given amount",
    "options": [
      "a53b"
    ]
  },
  "def4": {
    "id": "def4",
    "label": "takeWhile"
  },
  "5afa": {
    "id": "5afa",
    "label": "based on custom logic",
    "options": [
      "def4"
    ]
  },
  "d25d": {
    "id": "d25d",
    "label": "if they are at the start of the Observable",
    "options": [
      "e073",
      "f9f3",
      "5afa"
    ]
  },
  "af4f": {
    "id": "af4f",
    "label": "elementAt"
  },
  "e2a8": {
    "id": "e2a8",
    "label": "last"
  },
  "7c82": {
    "id": "7c82",
    "label": "and only the last value",
    "options": [
      "e2a8"
    ]
  },
  "0347": {
    "id": "0347",
    "label": "takeLast"
  },
  "e26b": {
    "id": "e26b",
    "label": "based on a given amount",
    "options": [
      "0347"
    ]
  },
  "76ec": {
    "id": "76ec",
    "label": "if they are at the end of the Observable",
    "options": [
      "7c82",
      "e26b"
    ]
  },
  "0f95": {
    "id": "0f95",
    "label": "takeUntil"
  },
  "f614": {
    "id": "f614",
    "label": "until another Observable emits a value",
    "options": [
      "0f95"
    ]
  },
  "5d30": {
    "id": "5d30",
    "label": "I want to allow some values to pass",
    "options": [
      "47cd",
      "d25d",
      "9723",
      "76ec",
      "f614"
    ]
  },
  "ba69": {
    "id": "ba69",
    "label": "ignoreElements"
  },
  "5c90": {
    "id": "5c90",
    "label": "altogether",
    "options": [
      "ba69"
    ]
  },
  "8c74": {
    "id": "8c74",
    "label": "skip"
  },
  "f8fe": {
    "id": "f8fe",
    "label": "based on a given amount",
    "options": [
      "8c74"
    ]
  },
  "86bd": {
    "id": "86bd",
    "label": "skipWhile"
  },
  "d3a7": {
    "id": "d3a7",
    "label": "based on custom logic",
    "options": [
      "86bd"
    ]
  },
  "4cc5": {
    "id": "4cc5",
    "label": "from the end of the Observable",
    "options": [
      "1373"
    ]
  },
  "d435": {
    "id": "d435",
    "label": "skipUntil"
  },
  "4abc": {
    "id": "4abc",
    "label": "emitted just before the current value",
    "options": [
      "1349"
    ]
  },
  "aaf6": {
    "id": "aaf6",
    "label": "distinct"
  },
  "afa5": {
    "id": "afa5",
    "label": "emitted some time in the past",
    "options": [
      "aaf6"
    ]
  },
  "b936": {
    "id": "b936",
    "label": "distinctUntilKeyChanged"
  },
  "ec4a": {
    "id": "ec4a",
    "label": "emitted just before the current value",
    "options": [
      "b936"
    ]
  },
  "2da5": {
    "id": "2da5",
    "label": "according to a key or object property",
    "options": [
      "ec4a"
    ]
  },
  "f6be": {
    "id": "f6be",
    "label": "that match some previous value",
    "options": [
      "7144",
      "2da5"
    ]
  },
  "79d6": {
    "id": "79d6",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "1679"
    ]
  },
  "ea2a": {
    "id": "ea2a",
    "label": "throttleTime"
  },
  "1bea": {
    "id": "1bea",
    "label": "where time windows are determined by a time duration",
    "options": [
      "ea2a"
    ]
  },
  "bc46": {
    "id": "bc46",
    "label": "by emitting the first value in each time window",
    "options": [
      "79d6",
      "1bea"
    ]
  },
  "d4d1": {
    "id": "d4d1",
    "label": "audit"
  },
  "bfd8": {
    "id": "bfd8",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d4d1"
    ]
  },
  "d7a6": {
    "id": "d7a6",
    "label": "where time windows are determined by a time duration",
    "options": [
      "6429"
    ]
  },
  "30b3": {
    "id": "30b3",
    "label": "by emitting the last value in each time window",
    "options": [
      "bfd8",
      "d7a6"
    ]
  },
  "c8b5": {
    "id": "c8b5",
    "label": "debounce"
  },
  "ad66": {
    "id": "ad66",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "c8b5"
    ]
  },
  "1b7a": {
    "id": "1b7a",
    "label": "debounceTime"
  },
  "863a": {
    "id": "863a",
    "label": "that occur too frequently",
    "options": [
      "bc46",
      "30b3",
      "3272"
    ]
  },
  "295e": {
    "id": "295e",
    "label": "reduce"
  },
  "b564": {
    "id": "b564",
    "label": "and only output the final computed value",
    "options": [
      "295e"
    ]
  },
  "222b": {
    "id": "222b",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "8514"
    ]
  },
  "bd91": {
    "id": "bd91",
    "label": "mergeScan"
  },
  "0d00": {
    "id": "0d00",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "bd91"
    ]
  },
  "c625": {
    "id": "c625",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "6045"
    ]
  },
  "7c2c": {
    "id": "7c2c",
    "label": "timeInterval"
  },
  "5c06": {
    "id": "5c06",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "c625",
      "4371"
    ]
  },
  "0baa": {
    "id": "0baa",
    "label": "timeout"
  },
  "df77": {
    "id": "df77",
    "label": "I want to throw an error",
    "options": [
      "0baa"
    ]
  },
  "0138": {
    "id": "0138",
    "label": "timeoutWith"
  },
  "7b5e": {
    "id": "7b5e",
    "label": "I want to switch to another Observable",
    "options": [
      "0138"
    ]
  },
  "009e": {
    "id": "009e",
    "label": "after a period of inactivity",
    "options": [
      "df77",
      "7b5e"
    ]
  },
  "dfee": {
    "id": "dfee",
    "label": "single"
  },
  "bbbd": {
    "id": "bbbd",
    "label": "I want to ensure there is only one value",
    "options": [
      "dfee"
    ]
  },
  "87fe": {
    "id": "87fe",
    "label": "count"
  },
  "464c": {
    "id": "464c",
    "label": "I want to know how many values it emits",
    "options": [
      "87fe"
    ]
  },
  "656e": {
    "id": "656e",
    "label": "startWith"
  },
  "7e13": {
    "id": "7e13",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "1b54",
      "0316"
    ]
  },
  "1c4c": {
    "id": "1c4c",
    "label": "based on a given amount of time",
    "options": [
      "7490"
    ]
  },
  "063e": {
    "id": "063e",
    "label": "delayWhen"
  },
  "b571": {
    "id": "b571",
    "label": "based on the emissions of another Observable",
    "options": [
      "063e"
    ]
  },
  "d681": {
    "id": "d681",
    "label": "toArray"
  },
  "fcc1": {
    "id": "fcc1",
    "label": "and convert to an array",
    "options": [
      "d681"
    ]
  },
  "ad35": {
    "id": "ad35",
    "label": "Observable",
    "method": "toPromise"
  },
  "6d18": {
    "id": "6d18",
    "label": "and convert to a Promise",
    "options": [
      "ad35"
    ]
  },
  "f5db": {
    "id": "f5db",
    "label": "until the Observable completes",
    "options": [
      "fcc1",
      "6d18"
    ]
  },
  "c8dd": {
    "id": "c8dd",
    "label": "pairwise"
  },
  "1d0d": {
    "id": "1d0d",
    "label": "partition"
  },
  "ca65": {
    "id": "ca65",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "1d0d"
    ]
  },
  "f5cf": {
    "id": "f5cf",
    "label": "bufferCount"
  },
  "bc33": {
    "id": "bc33",
    "label": "and emit the group as an array",
    "options": [
      "f5cf"
    ]
  },
  "b349": {
    "id": "b349",
    "label": "windowCount"
  },
  "233e": {
    "id": "233e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b349"
    ]
  },
  "4dd0": {
    "id": "4dd0",
    "label": "in batches of a particular size",
    "options": [
      "bc33",
      "233e"
    ]
  },
  "cae9": {
    "id": "cae9",
    "label": "bufferTime"
  },
  "8e1e": {
    "id": "8e1e",
    "label": "and emit the group as an array",
    "options": [
      "cae9"
    ]
  },
  "2b4f": {
    "id": "2b4f",
    "label": "windowTime"
  },
  "e2a4": {
    "id": "e2a4",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2b4f"
    ]
  },
  "ba82": {
    "id": "ba82",
    "label": "based on time",
    "options": [
      "8e1e",
      "e2a4"
    ]
  },
  "85e5": {
    "id": "85e5",
    "label": "and emit the group as an array",
    "options": [
      "9883"
    ]
  },
  "7bb6": {
    "id": "7bb6",
    "label": "window"
  },
  "549c": {
    "id": "549c",
    "label": "bufferWhen"
  },
  "ba58": {
    "id": "ba58",
    "label": "and emit the group as an array",
    "options": [
      "549c"
    ]
  },
  "6f29": {
    "id": "6f29",
    "label": "windowWhen"
  },
  "0ade": {
    "id": "0ade",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6f29"
    ]
  },
  "d83e": {
    "id": "d83e",
    "label": "windowToggle"
  },
  "47cb": {
    "id": "47cb",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d83e"
    ]
  },
  "7d7f": {
    "id": "7d7f",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5974",
      "47cb"
    ]
  },
  "8a9e": {
    "id": "8a9e",
    "label": "groupBy"
  },
  "9dcb": {
    "id": "9dcb",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "8a9e"
    ]
  },
  "9de2": {
    "id": "9de2",
    "label": "I want to group the values",
    "options": [
      "f5db",
      "6283",
      "ca65",
      "4dd0",
      "ba82",
      "8636",
      "7472",
      "7d7f",
      "9dcb"
    ]
  },
  "673a": {
    "id": "673a",
    "label": "mergeMapTo"
  },
  "1b54": {
    "id": "1b54",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "673a"
    ]
  },
  "bdc0": {
    "id": "bdc0",
    "label": "mergeMap"
  },
  "0316": {
    "id": "0316",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "bdc0"
    ]
  },
  "b133": {
    "id": "b133",
    "label": "concatMapTo"
  },
  "ad54": {
    "id": "ad54",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b133"
    ]
  },
  "b72d": {
    "id": "b72d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "8620"
    ]
  },
  "89b4": {
    "id": "89b4",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "ad54",
      "b72d"
    ]
  },
  "62dc": {
    "id": "62dc",
    "label": "switchMapTo"
  },
  "d7ca": {
    "id": "d7ca",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "62dc"
    ]
  },
  "e317": {
    "id": "e317",
    "label": "switchMap"
  },
  "d913": {
    "id": "d913",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "d7ca",
      "8014"
    ]
  },
  "e2da": {
    "id": "e2da",
    "label": "exhaustMap"
  },
  "21b5": {
    "id": "21b5",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "e2da"
    ]
  },
  "e9eb": {
    "id": "e9eb",
    "label": "expand"
  },
  "9bfb": {
    "id": "9bfb",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "e9eb"
    ]
  },
  "506c": {
    "id": "506c",
    "label": "I want to start a new Observable for each value",
    "options": [
      "7e13",
      "89b4",
      "d913",
      "21b5",
      "9bfb"
    ]
  },
  "b8e3": {
    "id": "b8e3",
    "label": "pipe"
  },
  "d0ae": {
    "id": "d0ae",
    "label": "I want to perform custom operations",
    "options": [
      "b8e3"
    ]
  },
  "bf02": {
    "id": "bf02",
    "label": "publish"
  },
  "c89e": {
    "id": "c89e",
    "label": "and start it manually or imperatively",
    "options": [
      "bf02"
    ]
  },
  "1f46": {
    "id": "1f46",
    "label": "using a conventional Subject",
    "options": [
      "5700",
      "c89e"
    ]
  },
  "037a": {
    "id": "037a",
    "label": "publishBehavior"
  },
  "cb84": {
    "id": "cb84",
    "label": "using a BehaviorSubject",
    "options": [
      "037a"
    ]
  },
  "21b9": {
    "id": "21b9",
    "label": "publishReplay"
  },
  "50fd": {
    "id": "50fd",
    "label": "using a ReplaySubject",
    "options": [
      "21b9"
    ]
  },
  "a3e2": {
    "id": "a3e2",
    "label": "using an AsyncSubject",
    "options": [
      "7221"
    ]
  },
  "af93": {
    "id": "af93",
    "label": "multicast"
  },
  "071e": {
    "id": "071e",
    "label": "using a specific subject implementation",
    "options": [
      "af93"
    ]
  },
  "a4d3": {
    "id": "a4d3",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "1f46",
      "cb84",
      "50fd",
      "a3e2",
      "071e"
    ]
  },
  "28e5": {
    "id": "28e5",
    "label": "catchError"
  },
  "25c4": {
    "id": "25c4",
    "label": "I want to start a new Observable",
    "options": [
      "28e5"
    ]
  },
  "490f": {
    "id": "490f",
    "label": "retry"
  },
  "c781": {
    "id": "c781",
    "label": "immediately",
    "options": [
      "490f"
    ]
  },
  "7a14": {
    "id": "7a14",
    "label": "retryWhen"
  },
  "d71a": {
    "id": "d71a",
    "label": "when another Observable emits",
    "options": [
      "7a14"
    ]
  },
  "b3c2": {
    "id": "b3c2",
    "label": "I want to re-subscribe",
    "options": [
      "c781",
      "d71a"
    ]
  },
  "99c2": {
    "id": "99c2",
    "label": "when an error occurs",
    "options": [
      "25c4",
      "b3c2"
    ]
  },
  "409b": {
    "id": "409b",
    "label": "repeat"
  },
  "5b17": {
    "id": "5b17",
    "label": "immediately",
    "options": [
      "409b"
    ]
  },
  "5df7": {
    "id": "5df7",
    "label": "repeatWhen"
  },
  "be99": {
    "id": "be99",
    "label": "when another Observable emits",
    "options": [
      "5df7"
    ]
  },
  "e1c3": {
    "id": "e1c3",
    "label": "I want to re-subscribe",
    "options": [
      "5b17",
      "be99"
    ]
  },
  "82a6": {
    "id": "82a6",
    "label": "concat"
  },
  "c0c5": {
    "id": "c0c5",
    "label": "I want to start a new Observable",
    "options": [
      "82a6"
    ]
  },
  "949a": {
    "id": "949a",
    "label": "when it completes",
    "options": [
      "e1c3",
      "c0c5"
    ]
  },
  "e1a8": {
    "id": "e1a8",
    "label": "finalize"
  },
  "d2ec": {
    "id": "d2ec",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "e1a8"
    ]
  },
  "415a": {
    "id": "415a",
    "label": "subscribeOn"
  },
  "e04b": {
    "id": "e04b",
    "label": "that routes calls to subscribe",
    "options": [
      "415a"
    ]
  },
  "45c6": {
    "id": "45c6",
    "label": "observeOn"
  },
  "3c32": {
    "id": "3c32",
    "label": "I want to change the scheduler",
    "options": [
      "e04b",
      "4145"
    ]
  },
  "2d69": {
    "id": "2d69",
    "label": "race"
  },
  "5c31": {
    "id": "5c31",
    "label": "merge"
  },
  "2ea9": {
    "id": "2ea9",
    "label": "I want to output the values from either of them",
    "options": [
      "5c31"
    ]
  },
  "b64e": {
    "id": "b64e",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "6062"
    ]
  },
  "c076": {
    "id": "c076",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "1365"
    ]
  },
  "b354": {
    "id": "b354",
    "label": "zip"
  },
  "9d9b": {
    "id": "9d9b",
    "label": "using each source value only once",
    "options": [
      "b354"
    ]
  },
  "baba": {
    "id": "baba",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b64e",
      "c076",
      "9d9b"
    ]
  },
  "30ef": {
    "id": "30ef",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8381",
      "2ea9",
      "baba"
    ]
  },
  "4c7f": {
    "id": "4c7f",
    "label": "I have one existing Observable, and",
    "options": [
      "8dfd",
      "e164",
      "a1e0",
      "5d30",
      "6070",
      "6465",
      "5c06",
      "009e",
      "bbbd",
      "464c",
      "7e13",
      "3217",
      "9de2",
      "506c",
      "d0ae",
      "a4d3",
      "99c2",
      "949a",
      "d2ec",
      "3c32",
      "30ef"
    ]
  },
  "f344": {
    "id": "f344",
    "label": "race"
  },
  "297b": {
    "id": "297b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "f344"
    ]
  },
  "f71c": {
    "id": "f71c",
    "label": "forkJoin"
  },
  "9ea4": {
    "id": "9ea4",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "f71c"
    ]
  },
  "c15e": {
    "id": "c15e",
    "label": "merge"
  },
  "1c6d": {
    "id": "1c6d",
    "label": "I want to output the values from either of them",
    "options": [
      "c15e"
    ]
  },
  "39a7": {
    "id": "39a7",
    "label": "combineLatest"
  },
  "ba61": {
    "id": "ba61",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "39a7"
    ]
  },
  "8e6b": {
    "id": "8e6b",
    "label": "zip"
  },
  "404d": {
    "id": "404d",
    "label": "using each source value only once",
    "options": [
      "8e6b"
    ]
  },
  "f0e3": {
    "id": "f0e3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ba61",
      "404d"
    ]
  },
  "569b": {
    "id": "569b",
    "label": "concat"
  },
  "fdc9": {
    "id": "fdc9",
    "label": "I want to subscribe to each in order",
    "options": [
      "569b"
    ]
  },
  "e4e4": {
    "id": "e4e4",
    "label": "Observable",
    "method": "create"
  },
  "3c14": {
    "id": "3c14",
    "label": "using custom logic",
    "options": [
      "e4e4"
    ]
  },
  "95c4": {
    "id": "95c4",
    "label": "using a state machine similar to a for loop",
    "options": [
      "5640"
    ]
  },
  "906a": {
    "id": "906a",
    "label": "throwError"
  },
  "3cb6": {
    "id": "3cb6",
    "label": "that throws an error",
    "options": [
      "906a"
    ]
  },
  "af82": {
    "id": "af82",
    "label": "EMPTY"
  },
  "3bd5": {
    "id": "3bd5",
    "label": "NEVER"
  },
  "59e1": {
    "id": "59e1",
    "label": "that never emits anything",
    "options": [
      "3bd5"
    ]
  },
  "b084": {
    "id": "b084",
    "label": "fromEvent"
  },
  "a28c": {
    "id": "a28c",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "b084"
    ]
  },
  "0427": {
    "id": "0427",
    "label": "fromEventPattern"
  },
  "25cf": {
    "id": "25cf",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "0427"
    ]
  },
  "d17c": {
    "id": "d17c",
    "label": "from an existing source of events",
    "options": [
      "a28c",
      "25cf"
    ]
  },
  "894b": {
    "id": "894b",
    "label": "from a Promise or an event source",
    "options": [
      "9945"
    ]
  },
  "bd0b": {
    "id": "bd0b",
    "label": "from"
  },
  "4e20": {
    "id": "4e20",
    "label": "range"
  },
  "b334": {
    "id": "b334",
    "label": "over values in a numeric range",
    "options": [
      "4e20"
    ]
  },
  "cb2e": {
    "id": "cb2e",
    "label": "over prefined values given as arguments",
    "options": [
      "1269"
    ]
  },
  "92ed": {
    "id": "92ed",
    "label": "that iterates",
    "options": [
      "4583",
      "b334",
      "cb2e"
    ]
  },
  "ebed": {
    "id": "ebed",
    "label": "interval"
  },
  "ea5a": {
    "id": "ea5a",
    "label": "regularly",
    "options": [
      "ebed"
    ]
  },
  "c50f": {
    "id": "c50f",
    "label": "timer"
  },
  "4d62": {
    "id": "4d62",
    "label": "with an optional initial delay",
    "options": [
      "c50f"
    ]
  },
  "af2d": {
    "id": "af2d",
    "label": "that emits values on a timer",
    "options": [
      "ea5a",
      "4d62"
    ]
  },
  "f662": {
    "id": "f662",
    "label": "defer"
  },
  "6a49": {
    "id": "6a49",
    "label": "which is built on demand when subscribed",
    "options": [
      "f662"
    ]
  },
  "97b9": {
    "id": "97b9",
    "label": "bindCallback"
  },
  "4e1c": {
    "id": "4e1c",
    "label": "supporting a conventional callback API",
    "options": [
      "97b9"
    ]
  },
  "11e5": {
    "id": "11e5",
    "label": "bindNodeCallback"
  },
  "e88c": {
    "id": "e88c",
    "label": "supporting Node.js callback style API",
    "options": [
      "11e5"
    ]
  },
  "2f66": {
    "id": "2f66",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4e1c",
      "e88c"
    ]
  },
  "ac1b": {
    "id": "ac1b",
    "label": "I have no Observables yet, and",
    "options": [
      "3657",
      "2f66"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "4c7f",
      "3405",
      "ac1b"
    ]
  }
}