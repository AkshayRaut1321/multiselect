{
  "1229": {
    "id": "1229",
    "label": "groupBy"
  },
  "1436": {
    "id": "1436",
    "label": "I want to prepend one value",
    "options": [
      "c2ea"
    ]
  },
  "1485": {
    "id": "1485",
    "label": "I want to perform custom operations",
    "options": [
      "cdd7"
    ]
  },
  "1914": {
    "id": "1914",
    "label": "until the Observable completes",
    "options": [
      "6a40",
      "a9ea"
    ]
  },
  "2101": {
    "id": "2101",
    "label": "which is built on demand when subscribed",
    "options": [
      "1a51"
    ]
  },
  "2187": {
    "id": "2187",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "a6f7"
    ]
  },
  "2349": {
    "id": "2349",
    "label": "immediately",
    "options": [
      "ce31"
    ]
  },
  "3043": {
    "id": "3043",
    "label": "of"
  },
  "3806": {
    "id": "3806",
    "label": "I want to ignore values",
    "options": [
      "fe71",
      "eca0",
      "5ec2",
      "be20",
      "99a3",
      "d9ee"
    ]
  },
  "4082": {
    "id": "4082",
    "label": "supporting a conventional callback API",
    "options": [
      "b70e"
    ]
  },
  "4807": {
    "id": "4807",
    "label": "distinctUntilChanged"
  },
  "5111": {
    "id": "5111",
    "label": "based on a given amount of time",
    "options": [
      "4de5"
    ]
  },
  "5145": {
    "id": "5145",
    "label": "merge"
  },
  "6026": {
    "id": "6026",
    "label": "I want to re-subscribe",
    "options": [
      "f2cf",
      "33b7"
    ]
  },
  "6104": {
    "id": "6104",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "df33"
    ]
  },
  "6130": {
    "id": "6130",
    "label": "publishReplay"
  },
  "6193": {
    "id": "6193",
    "label": "map"
  },
  "6394": {
    "id": "6394",
    "label": "using a state machine similar to a for loop",
    "options": [
      "412c"
    ]
  },
  "6482": {
    "id": "6482",
    "label": "and only output the final computed value",
    "options": [
      "a797"
    ]
  },
  "6498": {
    "id": "6498",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "fcc0",
      "98e0",
      "8246",
      "864c",
      "8d3b"
    ]
  },
  "6531": {
    "id": "6531",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "9a6d",
      "bce7"
    ]
  },
  "6643": {
    "id": "6643",
    "label": "that routes calls to subscribe",
    "options": [
      "90fe"
    ]
  },
  "7431": {
    "id": "7431",
    "label": "materialize"
  },
  "8246": {
    "id": "8246",
    "label": "using a ReplaySubject",
    "options": [
      "6130"
    ]
  },
  "8850": {
    "id": "8850",
    "label": "emitted just before the current value",
    "options": [
      "4807"
    ]
  },
  "9176": {
    "id": "9176",
    "label": "observeOn"
  },
  "9891": {
    "id": "9891",
    "label": "partition"
  },
  "bd4b": {
    "id": "bd4b",
    "label": "mapTo"
  },
  "a0a9": {
    "id": "a0a9",
    "label": "to be a constant value",
    "options": [
      "bd4b"
    ]
  },
  "8c09": {
    "id": "8c09",
    "label": "to be a value calculated through a formula",
    "options": [
      "6193"
    ]
  },
  "b309": {
    "id": "b309",
    "label": "I want to change each emitted value",
    "options": [
      "a0a9",
      "8c09"
    ]
  },
  "f73e": {
    "id": "f73e",
    "label": "pluck"
  },
  "d300": {
    "id": "d300",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "f73e"
    ]
  },
  "b08f": {
    "id": "b08f",
    "label": "tap"
  },
  "f3b0": {
    "id": "f3b0",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "b08f"
    ]
  },
  "2e4f": {
    "id": "2e4f",
    "label": "filter"
  },
  "758a": {
    "id": "758a",
    "label": "based on custom logic",
    "options": [
      "2e4f"
    ]
  },
  "1b03": {
    "id": "1b03",
    "label": "first"
  },
  "c04a": {
    "id": "c04a",
    "label": "and only the first value",
    "options": [
      "1b03"
    ]
  },
  "3ec3": {
    "id": "3ec3",
    "label": "take"
  },
  "5f8e": {
    "id": "5f8e",
    "label": "based on a given amount",
    "options": [
      "3ec3"
    ]
  },
  "fea1": {
    "id": "fea1",
    "label": "takeWhile"
  },
  "e00c": {
    "id": "e00c",
    "label": "based on custom logic",
    "options": [
      "fea1"
    ]
  },
  "d719": {
    "id": "d719",
    "label": "if they are at the start of the Observable",
    "options": [
      "c04a",
      "5f8e",
      "e00c"
    ]
  },
  "4cab": {
    "id": "4cab",
    "label": "elementAt"
  },
  "bb75": {
    "id": "bb75",
    "label": "if they are exactly the n-th emission",
    "options": [
      "4cab"
    ]
  },
  "be0a": {
    "id": "be0a",
    "label": "last"
  },
  "3ff8": {
    "id": "3ff8",
    "label": "and only the last value",
    "options": [
      "be0a"
    ]
  },
  "c2be": {
    "id": "c2be",
    "label": "takeLast"
  },
  "badc": {
    "id": "badc",
    "label": "based on a given amount",
    "options": [
      "c2be"
    ]
  },
  "499a": {
    "id": "499a",
    "label": "if they are at the end of the Observable",
    "options": [
      "3ff8",
      "badc"
    ]
  },
  "d40f": {
    "id": "d40f",
    "label": "takeUntil"
  },
  "10eb": {
    "id": "10eb",
    "label": "until another Observable emits a value",
    "options": [
      "d40f"
    ]
  },
  "bac9": {
    "id": "bac9",
    "label": "I want to allow some values to pass",
    "options": [
      "758a",
      "d719",
      "bb75",
      "499a",
      "10eb"
    ]
  },
  "1ee9": {
    "id": "1ee9",
    "label": "ignoreElements"
  },
  "fe71": {
    "id": "fe71",
    "label": "altogether",
    "options": [
      "1ee9"
    ]
  },
  "4bf3": {
    "id": "4bf3",
    "label": "skip"
  },
  "c761": {
    "id": "c761",
    "label": "based on a given amount",
    "options": [
      "4bf3"
    ]
  },
  "ac90": {
    "id": "ac90",
    "label": "skipWhile"
  },
  "cfb5": {
    "id": "cfb5",
    "label": "based on custom logic",
    "options": [
      "ac90"
    ]
  },
  "eca0": {
    "id": "eca0",
    "label": "from the start of the Observable",
    "options": [
      "c761",
      "cfb5"
    ]
  },
  "c57c": {
    "id": "c57c",
    "label": "skipLast"
  },
  "5ec2": {
    "id": "5ec2",
    "label": "from the end of the Observable",
    "options": [
      "c57c"
    ]
  },
  "724f": {
    "id": "724f",
    "label": "skipUntil"
  },
  "be20": {
    "id": "be20",
    "label": "until another Observable emits a value",
    "options": [
      "724f"
    ]
  },
  "72da": {
    "id": "72da",
    "label": "distinct"
  },
  "41c4": {
    "id": "41c4",
    "label": "emitted some time in the past",
    "options": [
      "72da"
    ]
  },
  "67d1": {
    "id": "67d1",
    "label": "according to value equality",
    "options": [
      "8850",
      "41c4"
    ]
  },
  "588c": {
    "id": "588c",
    "label": "distinctUntilKeyChanged"
  },
  "cf29": {
    "id": "cf29",
    "label": "emitted just before the current value",
    "options": [
      "588c"
    ]
  },
  "c22c": {
    "id": "c22c",
    "label": "according to a key or object property",
    "options": [
      "cf29"
    ]
  },
  "99a3": {
    "id": "99a3",
    "label": "that match some previous value",
    "options": [
      "67d1",
      "c22c"
    ]
  },
  "88e5": {
    "id": "88e5",
    "label": "throttle"
  },
  "657f": {
    "id": "657f",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "88e5"
    ]
  },
  "f4ec": {
    "id": "f4ec",
    "label": "throttleTime"
  },
  "fa47": {
    "id": "fa47",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f4ec"
    ]
  },
  "bebb": {
    "id": "bebb",
    "label": "by emitting the first value in each time window",
    "options": [
      "657f",
      "fa47"
    ]
  },
  "c429": {
    "id": "c429",
    "label": "audit"
  },
  "efae": {
    "id": "efae",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "c429"
    ]
  },
  "e704": {
    "id": "e704",
    "label": "auditTime"
  },
  "8e4f": {
    "id": "8e4f",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e704"
    ]
  },
  "df10": {
    "id": "df10",
    "label": "by emitting the last value in each time window",
    "options": [
      "efae",
      "8e4f"
    ]
  },
  "f375": {
    "id": "f375",
    "label": "debounce"
  },
  "fc55": {
    "id": "fc55",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "f375"
    ]
  },
  "c7c7": {
    "id": "c7c7",
    "label": "debounceTime"
  },
  "34b3": {
    "id": "34b3",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "c7c7"
    ]
  },
  "77d0": {
    "id": "77d0",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "fc55",
      "34b3"
    ]
  },
  "d9ee": {
    "id": "d9ee",
    "label": "that occur too frequently",
    "options": [
      "bebb",
      "df10",
      "77d0"
    ]
  },
  "a797": {
    "id": "a797",
    "label": "reduce"
  },
  "afc2": {
    "id": "afc2",
    "label": "scan"
  },
  "a063": {
    "id": "a063",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "afc2"
    ]
  },
  "1d08": {
    "id": "1d08",
    "label": "mergeScan"
  },
  "c090": {
    "id": "c090",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "1d08"
    ]
  },
  "415b": {
    "id": "415b",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "6482",
      "a063",
      "c090"
    ]
  },
  "505a": {
    "id": "505a",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "7431"
    ]
  },
  "71a5": {
    "id": "71a5",
    "label": "timeInterval"
  },
  "4a52": {
    "id": "4a52",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "71a5"
    ]
  },
  "f509": {
    "id": "f509",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "505a",
      "4a52"
    ]
  },
  "163a": {
    "id": "163a",
    "label": "timeout"
  },
  "ecaf": {
    "id": "ecaf",
    "label": "I want to throw an error",
    "options": [
      "163a"
    ]
  },
  "bdad": {
    "id": "bdad",
    "label": "timeoutWith"
  },
  "2cbc": {
    "id": "2cbc",
    "label": "I want to switch to another Observable",
    "options": [
      "bdad"
    ]
  },
  "9ed3": {
    "id": "9ed3",
    "label": "after a period of inactivity",
    "options": [
      "ecaf",
      "2cbc"
    ]
  },
  "0c28": {
    "id": "0c28",
    "label": "single"
  },
  "85b4": {
    "id": "85b4",
    "label": "I want to ensure there is only one value",
    "options": [
      "0c28"
    ]
  },
  "ec29": {
    "id": "ec29",
    "label": "count"
  },
  "342d": {
    "id": "342d",
    "label": "I want to know how many values it emits",
    "options": [
      "ec29"
    ]
  },
  "c2ea": {
    "id": "c2ea",
    "label": "startWith"
  },
  "4de5": {
    "id": "4de5",
    "label": "delay"
  },
  "5de2": {
    "id": "5de2",
    "label": "delayWhen"
  },
  "445c": {
    "id": "445c",
    "label": "based on the emissions of another Observable",
    "options": [
      "5de2"
    ]
  },
  "22f7": {
    "id": "22f7",
    "label": "I want to delay the emissions",
    "options": [
      "5111",
      "445c"
    ]
  },
  "01eb": {
    "id": "01eb",
    "label": "toArray"
  },
  "6a40": {
    "id": "6a40",
    "label": "and convert to an array",
    "options": [
      "01eb"
    ]
  },
  "e43f": {
    "id": "e43f",
    "label": "Observable",
    "method": "toPromise"
  },
  "a9ea": {
    "id": "a9ea",
    "label": "and convert to a Promise",
    "options": [
      "e43f"
    ]
  },
  "c40c": {
    "id": "c40c",
    "label": "pairwise"
  },
  "5b2c": {
    "id": "5b2c",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "c40c"
    ]
  },
  "85d8": {
    "id": "85d8",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "9891"
    ]
  },
  "b94c": {
    "id": "b94c",
    "label": "bufferCount"
  },
  "5a6b": {
    "id": "5a6b",
    "label": "and emit the group as an array",
    "options": [
      "b94c"
    ]
  },
  "b042": {
    "id": "b042",
    "label": "windowCount"
  },
  "e81e": {
    "id": "e81e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b042"
    ]
  },
  "cb8d": {
    "id": "cb8d",
    "label": "in batches of a particular size",
    "options": [
      "5a6b",
      "e81e"
    ]
  },
  "21f8": {
    "id": "21f8",
    "label": "bufferTime"
  },
  "6c7e": {
    "id": "6c7e",
    "label": "and emit the group as an array",
    "options": [
      "21f8"
    ]
  },
  "fd00": {
    "id": "fd00",
    "label": "windowTime"
  },
  "afdb": {
    "id": "afdb",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fd00"
    ]
  },
  "ea53": {
    "id": "ea53",
    "label": "based on time",
    "options": [
      "6c7e",
      "afdb"
    ]
  },
  "7bf8": {
    "id": "7bf8",
    "label": "buffer"
  },
  "b39c": {
    "id": "b39c",
    "label": "and emit the group as an array",
    "options": [
      "7bf8"
    ]
  },
  "415e": {
    "id": "415e",
    "label": "window"
  },
  "9eac": {
    "id": "9eac",
    "label": "and emit the group as a nested Observable",
    "options": [
      "415e"
    ]
  },
  "0702": {
    "id": "0702",
    "label": "until another Observable emits",
    "options": [
      "b39c",
      "9eac"
    ]
  },
  "7b29": {
    "id": "7b29",
    "label": "bufferWhen"
  },
  "9a6d": {
    "id": "9a6d",
    "label": "and emit the group as an array",
    "options": [
      "7b29"
    ]
  },
  "cd35": {
    "id": "cd35",
    "label": "windowWhen"
  },
  "bce7": {
    "id": "bce7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "cd35"
    ]
  },
  "0072": {
    "id": "0072",
    "label": "bufferToggle"
  },
  "6b12": {
    "id": "6b12",
    "label": "and emit the group as an array",
    "options": [
      "0072"
    ]
  },
  "47a7": {
    "id": "47a7",
    "label": "windowToggle"
  },
  "c5b3": {
    "id": "c5b3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "47a7"
    ]
  },
  "902e": {
    "id": "902e",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "6b12",
      "c5b3"
    ]
  },
  "d5bb": {
    "id": "d5bb",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "1229"
    ]
  },
  "2b54": {
    "id": "2b54",
    "label": "I want to group the values",
    "options": [
      "1914",
      "5b2c",
      "85d8",
      "cb8d",
      "ea53",
      "0702",
      "6531",
      "902e",
      "d5bb"
    ]
  },
  "4c8a": {
    "id": "4c8a",
    "label": "mergeMapTo"
  },
  "5a57": {
    "id": "5a57",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "4c8a"
    ]
  },
  "0475": {
    "id": "0475",
    "label": "mergeMap"
  },
  "f961": {
    "id": "f961",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0475"
    ]
  },
  "ff11": {
    "id": "ff11",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "5a57",
      "f961"
    ]
  },
  "f1de": {
    "id": "f1de",
    "label": "concatMapTo"
  },
  "3bf0": {
    "id": "3bf0",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "f1de"
    ]
  },
  "0a43": {
    "id": "0a43",
    "label": "concatMap"
  },
  "b07c": {
    "id": "b07c",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0a43"
    ]
  },
  "6a1f": {
    "id": "6a1f",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "3bf0",
      "b07c"
    ]
  },
  "bec2": {
    "id": "bec2",
    "label": "switchMapTo"
  },
  "88d2": {
    "id": "88d2",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "bec2"
    ]
  },
  "b9dd": {
    "id": "b9dd",
    "label": "switchMap"
  },
  "4e78": {
    "id": "4e78",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b9dd"
    ]
  },
  "5cee": {
    "id": "5cee",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "88d2",
      "4e78"
    ]
  },
  "52a8": {
    "id": "52a8",
    "label": "exhaustMap"
  },
  "ecad": {
    "id": "ecad",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "52a8"
    ]
  },
  "47ef": {
    "id": "47ef",
    "label": "expand"
  },
  "0edb": {
    "id": "0edb",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "47ef"
    ]
  },
  "cc47": {
    "id": "cc47",
    "label": "I want to start a new Observable for each value",
    "options": [
      "ff11",
      "6a1f",
      "5cee",
      "ecad",
      "0edb"
    ]
  },
  "cdd7": {
    "id": "cdd7",
    "label": "pipe"
  },
  "a6f7": {
    "id": "a6f7",
    "label": "share"
  },
  "b0df": {
    "id": "b0df",
    "label": "publish"
  },
  "e616": {
    "id": "e616",
    "label": "and start it manually or imperatively",
    "options": [
      "b0df"
    ]
  },
  "fcc0": {
    "id": "fcc0",
    "label": "using a conventional Subject",
    "options": [
      "2187",
      "e616"
    ]
  },
  "0095": {
    "id": "0095",
    "label": "publishBehavior"
  },
  "98e0": {
    "id": "98e0",
    "label": "using a BehaviorSubject",
    "options": [
      "0095"
    ]
  },
  "38de": {
    "id": "38de",
    "label": "publishLast"
  },
  "864c": {
    "id": "864c",
    "label": "using an AsyncSubject",
    "options": [
      "38de"
    ]
  },
  "d358": {
    "id": "d358",
    "label": "multicast"
  },
  "8d3b": {
    "id": "8d3b",
    "label": "using a specific subject implementation",
    "options": [
      "d358"
    ]
  },
  "54c0": {
    "id": "54c0",
    "label": "catchError"
  },
  "9e89": {
    "id": "9e89",
    "label": "I want to start a new Observable",
    "options": [
      "54c0"
    ]
  },
  "d4f3": {
    "id": "d4f3",
    "label": "retry"
  },
  "f2cf": {
    "id": "f2cf",
    "label": "immediately",
    "options": [
      "d4f3"
    ]
  },
  "fd2f": {
    "id": "fd2f",
    "label": "retryWhen"
  },
  "33b7": {
    "id": "33b7",
    "label": "when another Observable emits",
    "options": [
      "fd2f"
    ]
  },
  "72b2": {
    "id": "72b2",
    "label": "when an error occurs",
    "options": [
      "9e89",
      "6026"
    ]
  },
  "ce31": {
    "id": "ce31",
    "label": "repeat"
  },
  "5a0f": {
    "id": "5a0f",
    "label": "repeatWhen"
  },
  "30b2": {
    "id": "30b2",
    "label": "when another Observable emits",
    "options": [
      "5a0f"
    ]
  },
  "a26f": {
    "id": "a26f",
    "label": "I want to re-subscribe",
    "options": [
      "2349",
      "30b2"
    ]
  },
  "ec99": {
    "id": "ec99",
    "label": "concat"
  },
  "023b": {
    "id": "023b",
    "label": "I want to start a new Observable",
    "options": [
      "ec99"
    ]
  },
  "12cc": {
    "id": "12cc",
    "label": "when it completes",
    "options": [
      "a26f",
      "023b"
    ]
  },
  "a3f8": {
    "id": "a3f8",
    "label": "finalize"
  },
  "9a86": {
    "id": "9a86",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "a3f8"
    ]
  },
  "90fe": {
    "id": "90fe",
    "label": "subscribeOn"
  },
  "155a": {
    "id": "155a",
    "label": "that routes values to observers",
    "options": [
      "9176"
    ]
  },
  "22e7": {
    "id": "22e7",
    "label": "I want to change the scheduler",
    "options": [
      "6643",
      "155a"
    ]
  },
  "4ef7": {
    "id": "4ef7",
    "label": "race"
  },
  "ede3": {
    "id": "ede3",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "4ef7"
    ]
  },
  "e78e": {
    "id": "e78e",
    "label": "merge"
  },
  "fd23": {
    "id": "fd23",
    "label": "I want to output the values from either of them",
    "options": [
      "e78e"
    ]
  },
  "b239": {
    "id": "b239",
    "label": "combineLatest"
  },
  "5a76": {
    "id": "5a76",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "b239"
    ]
  },
  "df33": {
    "id": "df33",
    "label": "withLatestFrom"
  },
  "fc1b": {
    "id": "fc1b",
    "label": "zip"
  },
  "0169": {
    "id": "0169",
    "label": "using each source value only once",
    "options": [
      "fc1b"
    ]
  },
  "261e": {
    "id": "261e",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "5a76",
      "6104",
      "0169"
    ]
  },
  "8b27": {
    "id": "8b27",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "ede3",
      "fd23",
      "261e"
    ]
  },
  "8b25": {
    "id": "8b25",
    "label": "I have one existing Observable, and",
    "options": [
      "b309",
      "d300",
      "f3b0",
      "bac9",
      "3806",
      "415b",
      "f509",
      "9ed3",
      "85b4",
      "342d",
      "1436",
      "22f7",
      "2b54",
      "cc47",
      "1485",
      "6498",
      "72b2",
      "12cc",
      "9a86",
      "22e7",
      "8b27"
    ]
  },
  "f939": {
    "id": "f939",
    "label": "race"
  },
  "7c6d": {
    "id": "7c6d",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "f939"
    ]
  },
  "fdb6": {
    "id": "fdb6",
    "label": "forkJoin"
  },
  "4f8e": {
    "id": "4f8e",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "fdb6"
    ]
  },
  "6d88": {
    "id": "6d88",
    "label": "I want to output the values from either of them",
    "options": [
      "5145"
    ]
  },
  "4dc8": {
    "id": "4dc8",
    "label": "combineLatest"
  },
  "a353": {
    "id": "a353",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "4dc8"
    ]
  },
  "890c": {
    "id": "890c",
    "label": "zip"
  },
  "3aff": {
    "id": "3aff",
    "label": "using each source value only once",
    "options": [
      "890c"
    ]
  },
  "9be3": {
    "id": "9be3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a353",
      "3aff"
    ]
  },
  "0409": {
    "id": "0409",
    "label": "concat"
  },
  "cecb": {
    "id": "cecb",
    "label": "I want to subscribe to each in order",
    "options": [
      "0409"
    ]
  },
  "f6e9": {
    "id": "f6e9",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "7c6d",
      "4f8e",
      "6d88",
      "9be3",
      "cecb"
    ]
  },
  "98d2": {
    "id": "98d2",
    "label": "Observable",
    "method": "create"
  },
  "311f": {
    "id": "311f",
    "label": "using custom logic",
    "options": [
      "98d2"
    ]
  },
  "412c": {
    "id": "412c",
    "label": "generate"
  },
  "3d3b": {
    "id": "3d3b",
    "label": "throwError"
  },
  "a84c": {
    "id": "a84c",
    "label": "that throws an error",
    "options": [
      "3d3b"
    ]
  },
  "c76a": {
    "id": "c76a",
    "label": "EMPTY"
  },
  "bb45": {
    "id": "bb45",
    "label": "that just completes, without emitting values",
    "options": [
      "c76a"
    ]
  },
  "dfdb": {
    "id": "dfdb",
    "label": "NEVER"
  },
  "9aeb": {
    "id": "9aeb",
    "label": "that never emits anything",
    "options": [
      "dfdb"
    ]
  },
  "cd14": {
    "id": "cd14",
    "label": "fromEvent"
  },
  "cdf5": {
    "id": "cdf5",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "cd14"
    ]
  },
  "547e": {
    "id": "547e",
    "label": "fromEventPattern"
  },
  "5a40": {
    "id": "5a40",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "547e"
    ]
  },
  "e0d4": {
    "id": "e0d4",
    "label": "from an existing source of events",
    "options": [
      "cdf5",
      "5a40"
    ]
  },
  "db69": {
    "id": "db69",
    "label": "from"
  },
  "dd68": {
    "id": "dd68",
    "label": "from a Promise or an event source",
    "options": [
      "db69"
    ]
  },
  "31ef": {
    "id": "31ef",
    "label": "from"
  },
  "83a4": {
    "id": "83a4",
    "label": "over the values in an array",
    "options": [
      "31ef"
    ]
  },
  "047e": {
    "id": "047e",
    "label": "range"
  },
  "6cfc": {
    "id": "6cfc",
    "label": "over values in a numeric range",
    "options": [
      "047e"
    ]
  },
  "787f": {
    "id": "787f",
    "label": "over prefined values given as arguments",
    "options": [
      "3043"
    ]
  },
  "b8cd": {
    "id": "b8cd",
    "label": "that iterates",
    "options": [
      "83a4",
      "6cfc",
      "787f"
    ]
  },
  "955f": {
    "id": "955f",
    "label": "interval"
  },
  "4bd8": {
    "id": "4bd8",
    "label": "regularly",
    "options": [
      "955f"
    ]
  },
  "0c13": {
    "id": "0c13",
    "label": "timer"
  },
  "b38c": {
    "id": "b38c",
    "label": "with an optional initial delay",
    "options": [
      "0c13"
    ]
  },
  "827b": {
    "id": "827b",
    "label": "that emits values on a timer",
    "options": [
      "4bd8",
      "b38c"
    ]
  },
  "1a51": {
    "id": "1a51",
    "label": "defer"
  },
  "ae99": {
    "id": "ae99",
    "label": "I want to create a new Observable",
    "options": [
      "311f",
      "6394",
      "a84c",
      "bb45",
      "9aeb",
      "e0d4",
      "dd68",
      "b8cd",
      "827b",
      "2101"
    ]
  },
  "b70e": {
    "id": "b70e",
    "label": "bindCallback"
  },
  "cea7": {
    "id": "cea7",
    "label": "bindNodeCallback"
  },
  "00ab": {
    "id": "00ab",
    "label": "supporting Node.js callback style API",
    "options": [
      "cea7"
    ]
  },
  "d429": {
    "id": "d429",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4082",
      "00ab"
    ]
  },
  "b600": {
    "id": "b600",
    "label": "I have no Observables yet, and",
    "options": [
      "ae99",
      "d429"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "8b25",
      "f6e9",
      "b600"
    ]
  }
}