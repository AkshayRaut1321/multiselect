{
  "1275": {
    "id": "1275",
    "label": "supporting Node.js callback style API",
    "options": [
      "c176"
    ]
  },
  "1773": {
    "id": "1773",
    "label": "tap"
  },
  "2371": {
    "id": "2371",
    "label": "that never emits anything",
    "options": [
      "90fe"
    ]
  },
  "2424": {
    "id": "2424",
    "label": "supporting a conventional callback API",
    "options": [
      "093a"
    ]
  },
  "2433": {
    "id": "2433",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "84c6",
      "fe70"
    ]
  },
  "2597": {
    "id": "2597",
    "label": "and emit the group as an array",
    "options": [
      "236b"
    ]
  },
  "2656": {
    "id": "2656",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "6e3a"
    ]
  },
  "2738": {
    "id": "2738",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f6eb"
    ]
  },
  "2889": {
    "id": "2889",
    "label": "I want to switch to another Observable",
    "options": [
      "6df3"
    ]
  },
  "2927": {
    "id": "2927",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7479"
    ]
  },
  "3021": {
    "id": "3021",
    "label": "single"
  },
  "3589": {
    "id": "3589",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "7a28",
      "6249"
    ]
  },
  "3831": {
    "id": "3831",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "79a4",
      "51cc",
      "c376"
    ]
  },
  "3957": {
    "id": "3957",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "90dd"
    ]
  },
  "4091": {
    "id": "4091",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3d4b"
    ]
  },
  "4301": {
    "id": "4301",
    "label": "using a specific subject implementation",
    "options": [
      "c16f"
    ]
  },
  "4492": {
    "id": "4492",
    "label": "and convert to an array",
    "options": [
      "c788"
    ]
  },
  "4548": {
    "id": "4548",
    "label": "based on custom logic",
    "options": [
      "0d80"
    ]
  },
  "4750": {
    "id": "4750",
    "label": "based on custom logic",
    "options": [
      "9e12"
    ]
  },
  "4790": {
    "id": "4790",
    "label": "defer"
  },
  "5102": {
    "id": "5102",
    "label": "based on a given amount",
    "options": [
      "ebd2"
    ]
  },
  "5969": {
    "id": "5969",
    "label": "that match some previous value",
    "options": [
      "d86e",
      "855e"
    ]
  },
  "6143": {
    "id": "6143",
    "label": "pipe"
  },
  "6249": {
    "id": "6249",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e1e0"
    ]
  },
  "6573": {
    "id": "6573",
    "label": "throttleTime"
  },
  "6937": {
    "id": "6937",
    "label": "count"
  },
  "7025": {
    "id": "7025",
    "label": "groupBy"
  },
  "7046": {
    "id": "7046",
    "label": "Observable",
    "method": "create"
  },
  "7090": {
    "id": "7090",
    "label": "I want to re-subscribe",
    "options": [
      "baa2",
      "ee0e"
    ]
  },
  "7111": {
    "id": "7111",
    "label": "from a Promise or an event source",
    "options": [
      "0daf"
    ]
  },
  "7117": {
    "id": "7117",
    "label": "zip"
  },
  "7308": {
    "id": "7308",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "8ed3"
    ]
  },
  "7479": {
    "id": "7479",
    "label": "switchMapTo"
  },
  "7526": {
    "id": "7526",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "f45b",
      "7308",
      "5e76",
      "7879",
      "0a7b"
    ]
  },
  "7642": {
    "id": "7642",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a32e"
    ]
  },
  "7879": {
    "id": "7879",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "dbda",
      "76ab"
    ]
  },
  "8472": {
    "id": "8472",
    "label": "from an existing source of events",
    "options": [
      "19a1",
      "c71b"
    ]
  },
  "8488": {
    "id": "8488",
    "label": "bufferWhen"
  },
  "8628": {
    "id": "8628",
    "label": "I want to throw an error",
    "options": [
      "a2d7"
    ]
  },
  "8916": {
    "id": "8916",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a2b6"
    ]
  },
  "9099": {
    "id": "9099",
    "label": "skipUntil"
  },
  "9340": {
    "id": "9340",
    "label": "debounceTime"
  },
  "6b08": {
    "id": "6b08",
    "label": "mapTo"
  },
  "da96": {
    "id": "da96",
    "label": "to be a constant value",
    "options": [
      "6b08"
    ]
  },
  "4ee9": {
    "id": "4ee9",
    "label": "map"
  },
  "2e2f": {
    "id": "2e2f",
    "label": "to be a value calculated through a formula",
    "options": [
      "4ee9"
    ]
  },
  "09cc": {
    "id": "09cc",
    "label": "I want to change each emitted value",
    "options": [
      "da96",
      "2e2f"
    ]
  },
  "d06e": {
    "id": "d06e",
    "label": "pluck"
  },
  "05c4": {
    "id": "05c4",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "d06e"
    ]
  },
  "fd32": {
    "id": "fd32",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "1773"
    ]
  },
  "0d80": {
    "id": "0d80",
    "label": "filter"
  },
  "b445": {
    "id": "b445",
    "label": "first"
  },
  "276d": {
    "id": "276d",
    "label": "and only the first value",
    "options": [
      "b445"
    ]
  },
  "ebd2": {
    "id": "ebd2",
    "label": "take"
  },
  "b2fa": {
    "id": "b2fa",
    "label": "takeWhile"
  },
  "22d1": {
    "id": "22d1",
    "label": "based on custom logic",
    "options": [
      "b2fa"
    ]
  },
  "7e45": {
    "id": "7e45",
    "label": "if they are at the start of the Observable",
    "options": [
      "276d",
      "5102",
      "22d1"
    ]
  },
  "3c95": {
    "id": "3c95",
    "label": "elementAt"
  },
  "0412": {
    "id": "0412",
    "label": "if they are exactly the n-th emission",
    "options": [
      "3c95"
    ]
  },
  "0f79": {
    "id": "0f79",
    "label": "last"
  },
  "f52f": {
    "id": "f52f",
    "label": "and only the last value",
    "options": [
      "0f79"
    ]
  },
  "7b8a": {
    "id": "7b8a",
    "label": "takeLast"
  },
  "224f": {
    "id": "224f",
    "label": "based on a given amount",
    "options": [
      "7b8a"
    ]
  },
  "872b": {
    "id": "872b",
    "label": "if they are at the end of the Observable",
    "options": [
      "f52f",
      "224f"
    ]
  },
  "b6f1": {
    "id": "b6f1",
    "label": "takeUntil"
  },
  "5dc6": {
    "id": "5dc6",
    "label": "until another Observable emits a value",
    "options": [
      "b6f1"
    ]
  },
  "22f7": {
    "id": "22f7",
    "label": "I want to allow some values to pass",
    "options": [
      "4548",
      "7e45",
      "0412",
      "872b",
      "5dc6"
    ]
  },
  "458f": {
    "id": "458f",
    "label": "ignoreElements"
  },
  "a9e6": {
    "id": "a9e6",
    "label": "altogether",
    "options": [
      "458f"
    ]
  },
  "db6d": {
    "id": "db6d",
    "label": "skip"
  },
  "dbeb": {
    "id": "dbeb",
    "label": "based on a given amount",
    "options": [
      "db6d"
    ]
  },
  "9e12": {
    "id": "9e12",
    "label": "skipWhile"
  },
  "e83b": {
    "id": "e83b",
    "label": "from the start of the Observable",
    "options": [
      "dbeb",
      "4750"
    ]
  },
  "24bd": {
    "id": "24bd",
    "label": "skipLast"
  },
  "2a41": {
    "id": "2a41",
    "label": "from the end of the Observable",
    "options": [
      "24bd"
    ]
  },
  "9a58": {
    "id": "9a58",
    "label": "until another Observable emits a value",
    "options": [
      "9099"
    ]
  },
  "724a": {
    "id": "724a",
    "label": "distinctUntilChanged"
  },
  "f6d8": {
    "id": "f6d8",
    "label": "emitted just before the current value",
    "options": [
      "724a"
    ]
  },
  "9f05": {
    "id": "9f05",
    "label": "distinct"
  },
  "d3ca": {
    "id": "d3ca",
    "label": "emitted some time in the past",
    "options": [
      "9f05"
    ]
  },
  "d86e": {
    "id": "d86e",
    "label": "according to value equality",
    "options": [
      "f6d8",
      "d3ca"
    ]
  },
  "5b86": {
    "id": "5b86",
    "label": "distinctUntilKeyChanged"
  },
  "c143": {
    "id": "c143",
    "label": "emitted just before the current value",
    "options": [
      "5b86"
    ]
  },
  "855e": {
    "id": "855e",
    "label": "according to a key or object property",
    "options": [
      "c143"
    ]
  },
  "e377": {
    "id": "e377",
    "label": "throttle"
  },
  "d362": {
    "id": "d362",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e377"
    ]
  },
  "123d": {
    "id": "123d",
    "label": "where time windows are determined by a time duration",
    "options": [
      "6573"
    ]
  },
  "a57b": {
    "id": "a57b",
    "label": "by emitting the first value in each time window",
    "options": [
      "d362",
      "123d"
    ]
  },
  "a0a6": {
    "id": "a0a6",
    "label": "audit"
  },
  "f3f8": {
    "id": "f3f8",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a0a6"
    ]
  },
  "6d5a": {
    "id": "6d5a",
    "label": "auditTime"
  },
  "fd3a": {
    "id": "fd3a",
    "label": "where time windows are determined by a time duration",
    "options": [
      "6d5a"
    ]
  },
  "d4b1": {
    "id": "d4b1",
    "label": "by emitting the last value in each time window",
    "options": [
      "f3f8",
      "fd3a"
    ]
  },
  "3e0f": {
    "id": "3e0f",
    "label": "debounce"
  },
  "c78f": {
    "id": "c78f",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "3e0f"
    ]
  },
  "0569": {
    "id": "0569",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "9340"
    ]
  },
  "465c": {
    "id": "465c",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "c78f",
      "0569"
    ]
  },
  "3e6d": {
    "id": "3e6d",
    "label": "that occur too frequently",
    "options": [
      "a57b",
      "d4b1",
      "465c"
    ]
  },
  "da5d": {
    "id": "da5d",
    "label": "I want to ignore values",
    "options": [
      "a9e6",
      "e83b",
      "2a41",
      "9a58",
      "5969",
      "3e6d"
    ]
  },
  "35e9": {
    "id": "35e9",
    "label": "reduce"
  },
  "79a4": {
    "id": "79a4",
    "label": "and only output the final computed value",
    "options": [
      "35e9"
    ]
  },
  "14a5": {
    "id": "14a5",
    "label": "scan"
  },
  "51cc": {
    "id": "51cc",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "14a5"
    ]
  },
  "dd9a": {
    "id": "dd9a",
    "label": "mergeScan"
  },
  "c376": {
    "id": "c376",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "dd9a"
    ]
  },
  "b6ab": {
    "id": "b6ab",
    "label": "materialize"
  },
  "84c6": {
    "id": "84c6",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "b6ab"
    ]
  },
  "57c0": {
    "id": "57c0",
    "label": "timeInterval"
  },
  "fe70": {
    "id": "fe70",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "57c0"
    ]
  },
  "a2d7": {
    "id": "a2d7",
    "label": "timeout"
  },
  "6df3": {
    "id": "6df3",
    "label": "timeoutWith"
  },
  "c618": {
    "id": "c618",
    "label": "after a period of inactivity",
    "options": [
      "8628",
      "2889"
    ]
  },
  "2b1c": {
    "id": "2b1c",
    "label": "I want to ensure there is only one value",
    "options": [
      "3021"
    ]
  },
  "b7af": {
    "id": "b7af",
    "label": "I want to know how many values it emits",
    "options": [
      "6937"
    ]
  },
  "07d8": {
    "id": "07d8",
    "label": "startWith"
  },
  "86c3": {
    "id": "86c3",
    "label": "I want to prepend one value",
    "options": [
      "07d8"
    ]
  },
  "2b42": {
    "id": "2b42",
    "label": "delay"
  },
  "424a": {
    "id": "424a",
    "label": "based on a given amount of time",
    "options": [
      "2b42"
    ]
  },
  "3b7c": {
    "id": "3b7c",
    "label": "delayWhen"
  },
  "d0ab": {
    "id": "d0ab",
    "label": "based on the emissions of another Observable",
    "options": [
      "3b7c"
    ]
  },
  "c423": {
    "id": "c423",
    "label": "I want to delay the emissions",
    "options": [
      "424a",
      "d0ab"
    ]
  },
  "c788": {
    "id": "c788",
    "label": "toArray"
  },
  "6b00": {
    "id": "6b00",
    "label": "Observable",
    "method": "toPromise"
  },
  "8f9a": {
    "id": "8f9a",
    "label": "and convert to a Promise",
    "options": [
      "6b00"
    ]
  },
  "6f21": {
    "id": "6f21",
    "label": "until the Observable completes",
    "options": [
      "4492",
      "8f9a"
    ]
  },
  "8b7d": {
    "id": "8b7d",
    "label": "pairwise"
  },
  "eb9e": {
    "id": "eb9e",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "8b7d"
    ]
  },
  "6e3a": {
    "id": "6e3a",
    "label": "partition"
  },
  "c54b": {
    "id": "c54b",
    "label": "bufferCount"
  },
  "915e": {
    "id": "915e",
    "label": "and emit the group as an array",
    "options": [
      "c54b"
    ]
  },
  "3d4b": {
    "id": "3d4b",
    "label": "windowCount"
  },
  "32bc": {
    "id": "32bc",
    "label": "in batches of a particular size",
    "options": [
      "915e",
      "4091"
    ]
  },
  "236b": {
    "id": "236b",
    "label": "bufferTime"
  },
  "f6eb": {
    "id": "f6eb",
    "label": "windowTime"
  },
  "2e29": {
    "id": "2e29",
    "label": "based on time",
    "options": [
      "2597",
      "2738"
    ]
  },
  "a11d": {
    "id": "a11d",
    "label": "buffer"
  },
  "8de4": {
    "id": "8de4",
    "label": "and emit the group as an array",
    "options": [
      "a11d"
    ]
  },
  "c668": {
    "id": "c668",
    "label": "window"
  },
  "e7a3": {
    "id": "e7a3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c668"
    ]
  },
  "dbbc": {
    "id": "dbbc",
    "label": "until another Observable emits",
    "options": [
      "8de4",
      "e7a3"
    ]
  },
  "7a28": {
    "id": "7a28",
    "label": "and emit the group as an array",
    "options": [
      "8488"
    ]
  },
  "e1e0": {
    "id": "e1e0",
    "label": "windowWhen"
  },
  "0eac": {
    "id": "0eac",
    "label": "bufferToggle"
  },
  "5b0d": {
    "id": "5b0d",
    "label": "and emit the group as an array",
    "options": [
      "0eac"
    ]
  },
  "68fe": {
    "id": "68fe",
    "label": "windowToggle"
  },
  "1f3c": {
    "id": "1f3c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "68fe"
    ]
  },
  "8c3a": {
    "id": "8c3a",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "5b0d",
      "1f3c"
    ]
  },
  "f25a": {
    "id": "f25a",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "7025"
    ]
  },
  "a22c": {
    "id": "a22c",
    "label": "I want to group the values",
    "options": [
      "6f21",
      "eb9e",
      "2656",
      "32bc",
      "2e29",
      "dbbc",
      "3589",
      "8c3a",
      "f25a"
    ]
  },
  "cfa6": {
    "id": "cfa6",
    "label": "mergeMapTo"
  },
  "1f4e": {
    "id": "1f4e",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "cfa6"
    ]
  },
  "90dd": {
    "id": "90dd",
    "label": "mergeMap"
  },
  "94f7": {
    "id": "94f7",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "1f4e",
      "3957"
    ]
  },
  "a32e": {
    "id": "a32e",
    "label": "concatMapTo"
  },
  "75f6": {
    "id": "75f6",
    "label": "concatMap"
  },
  "9de7": {
    "id": "9de7",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "75f6"
    ]
  },
  "0459": {
    "id": "0459",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "7642",
      "9de7"
    ]
  },
  "01e6": {
    "id": "01e6",
    "label": "switchMap"
  },
  "64a2": {
    "id": "64a2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "01e6"
    ]
  },
  "af89": {
    "id": "af89",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "2927",
      "64a2"
    ]
  },
  "b063": {
    "id": "b063",
    "label": "exhaustMap"
  },
  "0c21": {
    "id": "0c21",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "b063"
    ]
  },
  "c444": {
    "id": "c444",
    "label": "expand"
  },
  "e339": {
    "id": "e339",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "c444"
    ]
  },
  "93b1": {
    "id": "93b1",
    "label": "I want to start a new Observable for each value",
    "options": [
      "94f7",
      "0459",
      "af89",
      "0c21",
      "e339"
    ]
  },
  "fd76": {
    "id": "fd76",
    "label": "I want to perform custom operations",
    "options": [
      "6143"
    ]
  },
  "38a9": {
    "id": "38a9",
    "label": "share"
  },
  "05a4": {
    "id": "05a4",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "38a9"
    ]
  },
  "a443": {
    "id": "a443",
    "label": "publish"
  },
  "5bfb": {
    "id": "5bfb",
    "label": "and start it manually or imperatively",
    "options": [
      "a443"
    ]
  },
  "9c06": {
    "id": "9c06",
    "label": "using a conventional Subject",
    "options": [
      "05a4",
      "5bfb"
    ]
  },
  "7dae": {
    "id": "7dae",
    "label": "publishBehavior"
  },
  "f5b1": {
    "id": "f5b1",
    "label": "using a BehaviorSubject",
    "options": [
      "7dae"
    ]
  },
  "f008": {
    "id": "f008",
    "label": "publishReplay"
  },
  "d529": {
    "id": "d529",
    "label": "using a ReplaySubject",
    "options": [
      "f008"
    ]
  },
  "1ef0": {
    "id": "1ef0",
    "label": "publishLast"
  },
  "b84b": {
    "id": "b84b",
    "label": "using an AsyncSubject",
    "options": [
      "1ef0"
    ]
  },
  "c16f": {
    "id": "c16f",
    "label": "multicast"
  },
  "a325": {
    "id": "a325",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "9c06",
      "f5b1",
      "d529",
      "b84b",
      "4301"
    ]
  },
  "e3e0": {
    "id": "e3e0",
    "label": "catchError"
  },
  "dbde": {
    "id": "dbde",
    "label": "I want to start a new Observable",
    "options": [
      "e3e0"
    ]
  },
  "642b": {
    "id": "642b",
    "label": "retry"
  },
  "baa2": {
    "id": "baa2",
    "label": "immediately",
    "options": [
      "642b"
    ]
  },
  "be58": {
    "id": "be58",
    "label": "retryWhen"
  },
  "ee0e": {
    "id": "ee0e",
    "label": "when another Observable emits",
    "options": [
      "be58"
    ]
  },
  "dd45": {
    "id": "dd45",
    "label": "when an error occurs",
    "options": [
      "dbde",
      "7090"
    ]
  },
  "f771": {
    "id": "f771",
    "label": "repeat"
  },
  "80d3": {
    "id": "80d3",
    "label": "immediately",
    "options": [
      "f771"
    ]
  },
  "d348": {
    "id": "d348",
    "label": "repeatWhen"
  },
  "f071": {
    "id": "f071",
    "label": "when another Observable emits",
    "options": [
      "d348"
    ]
  },
  "8bef": {
    "id": "8bef",
    "label": "I want to re-subscribe",
    "options": [
      "80d3",
      "f071"
    ]
  },
  "cf01": {
    "id": "cf01",
    "label": "concat"
  },
  "12a1": {
    "id": "12a1",
    "label": "I want to start a new Observable",
    "options": [
      "cf01"
    ]
  },
  "e78b": {
    "id": "e78b",
    "label": "when it completes",
    "options": [
      "8bef",
      "12a1"
    ]
  },
  "094f": {
    "id": "094f",
    "label": "finalize"
  },
  "6dfa": {
    "id": "6dfa",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "094f"
    ]
  },
  "9d9a": {
    "id": "9d9a",
    "label": "subscribeOn"
  },
  "76bf": {
    "id": "76bf",
    "label": "that routes calls to subscribe",
    "options": [
      "9d9a"
    ]
  },
  "6da0": {
    "id": "6da0",
    "label": "observeOn"
  },
  "0d6e": {
    "id": "0d6e",
    "label": "that routes values to observers",
    "options": [
      "6da0"
    ]
  },
  "0b59": {
    "id": "0b59",
    "label": "I want to change the scheduler",
    "options": [
      "76bf",
      "0d6e"
    ]
  },
  "a2b6": {
    "id": "a2b6",
    "label": "race"
  },
  "b9f8": {
    "id": "b9f8",
    "label": "merge"
  },
  "693f": {
    "id": "693f",
    "label": "I want to output the values from either of them",
    "options": [
      "b9f8"
    ]
  },
  "4af1": {
    "id": "4af1",
    "label": "combineLatest"
  },
  "6ce4": {
    "id": "6ce4",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "4af1"
    ]
  },
  "07f8": {
    "id": "07f8",
    "label": "withLatestFrom"
  },
  "8f9b": {
    "id": "8f9b",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "07f8"
    ]
  },
  "0f20": {
    "id": "0f20",
    "label": "zip"
  },
  "3f18": {
    "id": "3f18",
    "label": "using each source value only once",
    "options": [
      "0f20"
    ]
  },
  "3bad": {
    "id": "3bad",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "6ce4",
      "8f9b",
      "3f18"
    ]
  },
  "092a": {
    "id": "092a",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8916",
      "693f",
      "3bad"
    ]
  },
  "ef95": {
    "id": "ef95",
    "label": "I have one existing Observable, and",
    "options": [
      "09cc",
      "05c4",
      "fd32",
      "22f7",
      "da5d",
      "3831",
      "2433",
      "c618",
      "2b1c",
      "b7af",
      "86c3",
      "c423",
      "a22c",
      "93b1",
      "fd76",
      "a325",
      "dd45",
      "e78b",
      "6dfa",
      "0b59",
      "092a"
    ]
  },
  "3f53": {
    "id": "3f53",
    "label": "race"
  },
  "f45b": {
    "id": "f45b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "3f53"
    ]
  },
  "8ed3": {
    "id": "8ed3",
    "label": "forkJoin"
  },
  "f962": {
    "id": "f962",
    "label": "merge"
  },
  "5e76": {
    "id": "5e76",
    "label": "I want to output the values from either of them",
    "options": [
      "f962"
    ]
  },
  "8e36": {
    "id": "8e36",
    "label": "combineLatest"
  },
  "dbda": {
    "id": "dbda",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "8e36"
    ]
  },
  "76ab": {
    "id": "76ab",
    "label": "using each source value only once",
    "options": [
      "7117"
    ]
  },
  "a1f0": {
    "id": "a1f0",
    "label": "concat"
  },
  "0a7b": {
    "id": "0a7b",
    "label": "I want to subscribe to each in order",
    "options": [
      "a1f0"
    ]
  },
  "64e5": {
    "id": "64e5",
    "label": "using custom logic",
    "options": [
      "7046"
    ]
  },
  "cc56": {
    "id": "cc56",
    "label": "generate"
  },
  "edb9": {
    "id": "edb9",
    "label": "using a state machine similar to a for loop",
    "options": [
      "cc56"
    ]
  },
  "cf9b": {
    "id": "cf9b",
    "label": "throwError"
  },
  "4b59": {
    "id": "4b59",
    "label": "that throws an error",
    "options": [
      "cf9b"
    ]
  },
  "9cb5": {
    "id": "9cb5",
    "label": "EMPTY"
  },
  "36b4": {
    "id": "36b4",
    "label": "that just completes, without emitting values",
    "options": [
      "9cb5"
    ]
  },
  "90fe": {
    "id": "90fe",
    "label": "NEVER"
  },
  "4ed6": {
    "id": "4ed6",
    "label": "fromEvent"
  },
  "19a1": {
    "id": "19a1",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "4ed6"
    ]
  },
  "8ae7": {
    "id": "8ae7",
    "label": "fromEventPattern"
  },
  "c71b": {
    "id": "c71b",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "8ae7"
    ]
  },
  "0daf": {
    "id": "0daf",
    "label": "from"
  },
  "291b": {
    "id": "291b",
    "label": "from"
  },
  "8fe7": {
    "id": "8fe7",
    "label": "over the values in an array",
    "options": [
      "291b"
    ]
  },
  "2cb9": {
    "id": "2cb9",
    "label": "range"
  },
  "c756": {
    "id": "c756",
    "label": "over values in a numeric range",
    "options": [
      "2cb9"
    ]
  },
  "103a": {
    "id": "103a",
    "label": "of"
  },
  "4d53": {
    "id": "4d53",
    "label": "over prefined values given as arguments",
    "options": [
      "103a"
    ]
  },
  "323c": {
    "id": "323c",
    "label": "that iterates",
    "options": [
      "8fe7",
      "c756",
      "4d53"
    ]
  },
  "e5c5": {
    "id": "e5c5",
    "label": "interval"
  },
  "31f2": {
    "id": "31f2",
    "label": "regularly",
    "options": [
      "e5c5"
    ]
  },
  "b3ec": {
    "id": "b3ec",
    "label": "timer"
  },
  "f716": {
    "id": "f716",
    "label": "with an optional initial delay",
    "options": [
      "b3ec"
    ]
  },
  "71ea": {
    "id": "71ea",
    "label": "that emits values on a timer",
    "options": [
      "31f2",
      "f716"
    ]
  },
  "851f": {
    "id": "851f",
    "label": "which is built on demand when subscribed",
    "options": [
      "4790"
    ]
  },
  "f4a6": {
    "id": "f4a6",
    "label": "I want to create a new Observable",
    "options": [
      "64e5",
      "edb9",
      "4b59",
      "36b4",
      "2371",
      "8472",
      "7111",
      "323c",
      "71ea",
      "851f"
    ]
  },
  "093a": {
    "id": "093a",
    "label": "bindCallback"
  },
  "c176": {
    "id": "c176",
    "label": "bindNodeCallback"
  },
  "00dc": {
    "id": "00dc",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "2424",
      "1275"
    ]
  },
  "49f4": {
    "id": "49f4",
    "label": "I have no Observables yet, and",
    "options": [
      "f4a6",
      "00dc"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ef95",
      "7526",
      "49f4"
    ]
  }
}