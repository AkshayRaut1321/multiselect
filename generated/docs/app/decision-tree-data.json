{
  "1027": {
    "id": "1027",
    "label": "I want to allow some values to pass",
    "options": [
      "dee3",
      "758c",
      "4696",
      "d972",
      "f869"
    ]
  },
  "1080": {
    "id": "1080",
    "label": "materialize"
  },
  "1140": {
    "id": "1140",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7ce8"
    ]
  },
  "1588": {
    "id": "1588",
    "label": "pairwise"
  },
  "2322": {
    "id": "2322",
    "label": "I want to ignore values",
    "options": [
      "e000",
      "b5fc",
      "badc",
      "f434",
      "b56d",
      "e9f3"
    ]
  },
  "3790": {
    "id": "3790",
    "label": "which is built on demand when subscribed",
    "options": [
      "82ea"
    ]
  },
  "4696": {
    "id": "4696",
    "label": "if they are exactly the n-th emission",
    "options": [
      "dc4c"
    ]
  },
  "4966": {
    "id": "4966",
    "label": "finalize"
  },
  "5126": {
    "id": "5126",
    "label": "based on a given amount",
    "options": [
      "0840"
    ]
  },
  "5372": {
    "id": "5372",
    "label": "Observable",
    "method": "toPromise"
  },
  "5806": {
    "id": "5806",
    "label": "based on time",
    "options": [
      "b5db",
      "b77f"
    ]
  },
  "6161": {
    "id": "6161",
    "label": "to be a value calculated through a formula",
    "options": [
      "d97a"
    ]
  },
  "6820": {
    "id": "6820",
    "label": "and emit the group as an array",
    "options": [
      "b513"
    ]
  },
  "8949": {
    "id": "8949",
    "label": "timeoutWith"
  },
  "8981": {
    "id": "8981",
    "label": "forkJoin"
  },
  "9299": {
    "id": "9299",
    "label": "concat"
  },
  "9475": {
    "id": "9475",
    "label": "ignoreElements"
  },
  "9751": {
    "id": "9751",
    "label": "over the values in an array",
    "options": [
      "57e3"
    ]
  },
  "e556": {
    "id": "e556",
    "label": "mapTo"
  },
  "dea0": {
    "id": "dea0",
    "label": "to be a constant value",
    "options": [
      "e556"
    ]
  },
  "d97a": {
    "id": "d97a",
    "label": "map"
  },
  "d6c4": {
    "id": "d6c4",
    "label": "I want to change each emitted value",
    "options": [
      "dea0",
      "6161"
    ]
  },
  "a59f": {
    "id": "a59f",
    "label": "pluck"
  },
  "c573": {
    "id": "c573",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "a59f"
    ]
  },
  "61de": {
    "id": "61de",
    "label": "tap"
  },
  "12b0": {
    "id": "12b0",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "61de"
    ]
  },
  "a450": {
    "id": "a450",
    "label": "filter"
  },
  "dee3": {
    "id": "dee3",
    "label": "based on custom logic",
    "options": [
      "a450"
    ]
  },
  "17b0": {
    "id": "17b0",
    "label": "first"
  },
  "47e9": {
    "id": "47e9",
    "label": "and only the first value",
    "options": [
      "17b0"
    ]
  },
  "0840": {
    "id": "0840",
    "label": "take"
  },
  "6f35": {
    "id": "6f35",
    "label": "takeWhile"
  },
  "b56c": {
    "id": "b56c",
    "label": "based on custom logic",
    "options": [
      "6f35"
    ]
  },
  "758c": {
    "id": "758c",
    "label": "if they are at the start of the Observable",
    "options": [
      "47e9",
      "5126",
      "b56c"
    ]
  },
  "dc4c": {
    "id": "dc4c",
    "label": "elementAt"
  },
  "a508": {
    "id": "a508",
    "label": "last"
  },
  "8a46": {
    "id": "8a46",
    "label": "and only the last value",
    "options": [
      "a508"
    ]
  },
  "93b3": {
    "id": "93b3",
    "label": "takeLast"
  },
  "e721": {
    "id": "e721",
    "label": "based on a given amount",
    "options": [
      "93b3"
    ]
  },
  "d972": {
    "id": "d972",
    "label": "if they are at the end of the Observable",
    "options": [
      "8a46",
      "e721"
    ]
  },
  "378b": {
    "id": "378b",
    "label": "takeUntil"
  },
  "f869": {
    "id": "f869",
    "label": "until another Observable emits a value",
    "options": [
      "378b"
    ]
  },
  "e000": {
    "id": "e000",
    "label": "altogether",
    "options": [
      "9475"
    ]
  },
  "6c74": {
    "id": "6c74",
    "label": "skip"
  },
  "567a": {
    "id": "567a",
    "label": "based on a given amount",
    "options": [
      "6c74"
    ]
  },
  "f0f5": {
    "id": "f0f5",
    "label": "skipWhile"
  },
  "7c61": {
    "id": "7c61",
    "label": "based on custom logic",
    "options": [
      "f0f5"
    ]
  },
  "b5fc": {
    "id": "b5fc",
    "label": "from the start of the Observable",
    "options": [
      "567a",
      "7c61"
    ]
  },
  "5cbd": {
    "id": "5cbd",
    "label": "skipLast"
  },
  "badc": {
    "id": "badc",
    "label": "from the end of the Observable",
    "options": [
      "5cbd"
    ]
  },
  "b775": {
    "id": "b775",
    "label": "skipUntil"
  },
  "f434": {
    "id": "f434",
    "label": "until another Observable emits a value",
    "options": [
      "b775"
    ]
  },
  "729d": {
    "id": "729d",
    "label": "distinctUntilChanged"
  },
  "5ff1": {
    "id": "5ff1",
    "label": "emitted just before the current value",
    "options": [
      "729d"
    ]
  },
  "2cfc": {
    "id": "2cfc",
    "label": "distinct"
  },
  "adda": {
    "id": "adda",
    "label": "emitted some time in the past",
    "options": [
      "2cfc"
    ]
  },
  "1bf4": {
    "id": "1bf4",
    "label": "according to value equality",
    "options": [
      "5ff1",
      "adda"
    ]
  },
  "f758": {
    "id": "f758",
    "label": "distinctUntilKeyChanged"
  },
  "037b": {
    "id": "037b",
    "label": "emitted just before the current value",
    "options": [
      "f758"
    ]
  },
  "ffab": {
    "id": "ffab",
    "label": "according to a key or object property",
    "options": [
      "037b"
    ]
  },
  "b56d": {
    "id": "b56d",
    "label": "that match some previous value",
    "options": [
      "1bf4",
      "ffab"
    ]
  },
  "35ee": {
    "id": "35ee",
    "label": "throttle"
  },
  "3f6a": {
    "id": "3f6a",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "35ee"
    ]
  },
  "01bc": {
    "id": "01bc",
    "label": "throttleTime"
  },
  "6c56": {
    "id": "6c56",
    "label": "where time windows are determined by a time duration",
    "options": [
      "01bc"
    ]
  },
  "46df": {
    "id": "46df",
    "label": "by emitting the first value in each time window",
    "options": [
      "3f6a",
      "6c56"
    ]
  },
  "5d2f": {
    "id": "5d2f",
    "label": "audit"
  },
  "b071": {
    "id": "b071",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5d2f"
    ]
  },
  "7ce8": {
    "id": "7ce8",
    "label": "auditTime"
  },
  "a951": {
    "id": "a951",
    "label": "by emitting the last value in each time window",
    "options": [
      "b071",
      "1140"
    ]
  },
  "19b7": {
    "id": "19b7",
    "label": "debounce"
  },
  "c1ca": {
    "id": "c1ca",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "19b7"
    ]
  },
  "b18b": {
    "id": "b18b",
    "label": "debounceTime"
  },
  "43c4": {
    "id": "43c4",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "b18b"
    ]
  },
  "f2b6": {
    "id": "f2b6",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "c1ca",
      "43c4"
    ]
  },
  "e9f3": {
    "id": "e9f3",
    "label": "that occur too frequently",
    "options": [
      "46df",
      "a951",
      "f2b6"
    ]
  },
  "0d24": {
    "id": "0d24",
    "label": "reduce"
  },
  "2c0c": {
    "id": "2c0c",
    "label": "and only output the final computed value",
    "options": [
      "0d24"
    ]
  },
  "28c1": {
    "id": "28c1",
    "label": "scan"
  },
  "5b86": {
    "id": "5b86",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "28c1"
    ]
  },
  "73e0": {
    "id": "73e0",
    "label": "mergeScan"
  },
  "5a93": {
    "id": "5a93",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "73e0"
    ]
  },
  "66f1": {
    "id": "66f1",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "2c0c",
      "5b86",
      "5a93"
    ]
  },
  "b5cd": {
    "id": "b5cd",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "1080"
    ]
  },
  "0cc9": {
    "id": "0cc9",
    "label": "timeInterval"
  },
  "f2ce": {
    "id": "f2ce",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "0cc9"
    ]
  },
  "dad9": {
    "id": "dad9",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "b5cd",
      "f2ce"
    ]
  },
  "ee31": {
    "id": "ee31",
    "label": "timeout"
  },
  "5a02": {
    "id": "5a02",
    "label": "I want to throw an error",
    "options": [
      "ee31"
    ]
  },
  "7eab": {
    "id": "7eab",
    "label": "I want to switch to another Observable",
    "options": [
      "8949"
    ]
  },
  "33fa": {
    "id": "33fa",
    "label": "after a period of inactivity",
    "options": [
      "5a02",
      "7eab"
    ]
  },
  "c260": {
    "id": "c260",
    "label": "single"
  },
  "ce34": {
    "id": "ce34",
    "label": "I want to ensure there is only one value",
    "options": [
      "c260"
    ]
  },
  "fff3": {
    "id": "fff3",
    "label": "count"
  },
  "e3d0": {
    "id": "e3d0",
    "label": "I want to know how many values it emits",
    "options": [
      "fff3"
    ]
  },
  "b411": {
    "id": "b411",
    "label": "startWith"
  },
  "bd49": {
    "id": "bd49",
    "label": "I want to prepend one value",
    "options": [
      "b411"
    ]
  },
  "88e2": {
    "id": "88e2",
    "label": "delay"
  },
  "c2e0": {
    "id": "c2e0",
    "label": "based on a given amount of time",
    "options": [
      "88e2"
    ]
  },
  "3b09": {
    "id": "3b09",
    "label": "delayWhen"
  },
  "9e60": {
    "id": "9e60",
    "label": "based on the emissions of another Observable",
    "options": [
      "3b09"
    ]
  },
  "404f": {
    "id": "404f",
    "label": "I want to delay the emissions",
    "options": [
      "c2e0",
      "9e60"
    ]
  },
  "e7a0": {
    "id": "e7a0",
    "label": "toArray"
  },
  "79ca": {
    "id": "79ca",
    "label": "and convert to an array",
    "options": [
      "e7a0"
    ]
  },
  "0575": {
    "id": "0575",
    "label": "and convert to a Promise",
    "options": [
      "5372"
    ]
  },
  "829a": {
    "id": "829a",
    "label": "until the Observable completes",
    "options": [
      "79ca",
      "0575"
    ]
  },
  "c362": {
    "id": "c362",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "1588"
    ]
  },
  "f5c8": {
    "id": "f5c8",
    "label": "partition"
  },
  "6c51": {
    "id": "6c51",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "f5c8"
    ]
  },
  "b513": {
    "id": "b513",
    "label": "bufferCount"
  },
  "b61f": {
    "id": "b61f",
    "label": "windowCount"
  },
  "7f9a": {
    "id": "7f9a",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b61f"
    ]
  },
  "1b0b": {
    "id": "1b0b",
    "label": "in batches of a particular size",
    "options": [
      "6820",
      "7f9a"
    ]
  },
  "995f": {
    "id": "995f",
    "label": "bufferTime"
  },
  "b5db": {
    "id": "b5db",
    "label": "and emit the group as an array",
    "options": [
      "995f"
    ]
  },
  "e09e": {
    "id": "e09e",
    "label": "windowTime"
  },
  "b77f": {
    "id": "b77f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e09e"
    ]
  },
  "169b": {
    "id": "169b",
    "label": "buffer"
  },
  "545e": {
    "id": "545e",
    "label": "and emit the group as an array",
    "options": [
      "169b"
    ]
  },
  "c39e": {
    "id": "c39e",
    "label": "window"
  },
  "3b25": {
    "id": "3b25",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c39e"
    ]
  },
  "c53e": {
    "id": "c53e",
    "label": "until another Observable emits",
    "options": [
      "545e",
      "3b25"
    ]
  },
  "89b9": {
    "id": "89b9",
    "label": "bufferWhen"
  },
  "5b12": {
    "id": "5b12",
    "label": "and emit the group as an array",
    "options": [
      "89b9"
    ]
  },
  "e668": {
    "id": "e668",
    "label": "windowWhen"
  },
  "7b0f": {
    "id": "7b0f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e668"
    ]
  },
  "250f": {
    "id": "250f",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "5b12",
      "7b0f"
    ]
  },
  "35f8": {
    "id": "35f8",
    "label": "bufferToggle"
  },
  "b1fb": {
    "id": "b1fb",
    "label": "and emit the group as an array",
    "options": [
      "35f8"
    ]
  },
  "f23d": {
    "id": "f23d",
    "label": "windowToggle"
  },
  "04b1": {
    "id": "04b1",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f23d"
    ]
  },
  "aab1": {
    "id": "aab1",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "b1fb",
      "04b1"
    ]
  },
  "e8ca": {
    "id": "e8ca",
    "label": "groupBy"
  },
  "6c84": {
    "id": "6c84",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "e8ca"
    ]
  },
  "24d8": {
    "id": "24d8",
    "label": "I want to group the values",
    "options": [
      "829a",
      "c362",
      "6c51",
      "1b0b",
      "5806",
      "c53e",
      "250f",
      "aab1",
      "6c84"
    ]
  },
  "b27f": {
    "id": "b27f",
    "label": "mergeMapTo"
  },
  "7cd3": {
    "id": "7cd3",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b27f"
    ]
  },
  "a798": {
    "id": "a798",
    "label": "mergeMap"
  },
  "a143": {
    "id": "a143",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a798"
    ]
  },
  "2a01": {
    "id": "2a01",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "7cd3",
      "a143"
    ]
  },
  "e735": {
    "id": "e735",
    "label": "concatMapTo"
  },
  "9a0c": {
    "id": "9a0c",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e735"
    ]
  },
  "96ec": {
    "id": "96ec",
    "label": "concatMap"
  },
  "bc99": {
    "id": "bc99",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "96ec"
    ]
  },
  "b5ad": {
    "id": "b5ad",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "9a0c",
      "bc99"
    ]
  },
  "c248": {
    "id": "c248",
    "label": "switchMapTo"
  },
  "fb01": {
    "id": "fb01",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c248"
    ]
  },
  "cea6": {
    "id": "cea6",
    "label": "switchMap"
  },
  "2e59": {
    "id": "2e59",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "cea6"
    ]
  },
  "4ee0": {
    "id": "4ee0",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "fb01",
      "2e59"
    ]
  },
  "aae7": {
    "id": "aae7",
    "label": "exhaustMap"
  },
  "23c2": {
    "id": "23c2",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "aae7"
    ]
  },
  "a46f": {
    "id": "a46f",
    "label": "expand"
  },
  "8dc5": {
    "id": "8dc5",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "a46f"
    ]
  },
  "bbde": {
    "id": "bbde",
    "label": "I want to start a new Observable for each value",
    "options": [
      "2a01",
      "b5ad",
      "4ee0",
      "23c2",
      "8dc5"
    ]
  },
  "385d": {
    "id": "385d",
    "label": "pipe"
  },
  "2a85": {
    "id": "2a85",
    "label": "I want to perform custom operations",
    "options": [
      "385d"
    ]
  },
  "e9e8": {
    "id": "e9e8",
    "label": "share"
  },
  "05a8": {
    "id": "05a8",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "e9e8"
    ]
  },
  "09b6": {
    "id": "09b6",
    "label": "publish"
  },
  "ec71": {
    "id": "ec71",
    "label": "and start it manually or imperatively",
    "options": [
      "09b6"
    ]
  },
  "efc1": {
    "id": "efc1",
    "label": "using a conventional Subject",
    "options": [
      "05a8",
      "ec71"
    ]
  },
  "97f9": {
    "id": "97f9",
    "label": "publishBehavior"
  },
  "8bfe": {
    "id": "8bfe",
    "label": "using a BehaviorSubject",
    "options": [
      "97f9"
    ]
  },
  "2f37": {
    "id": "2f37",
    "label": "publishReplay"
  },
  "e44d": {
    "id": "e44d",
    "label": "using a ReplaySubject",
    "options": [
      "2f37"
    ]
  },
  "6a22": {
    "id": "6a22",
    "label": "publishLast"
  },
  "2e53": {
    "id": "2e53",
    "label": "using an AsyncSubject",
    "options": [
      "6a22"
    ]
  },
  "79e5": {
    "id": "79e5",
    "label": "multicast"
  },
  "d3a5": {
    "id": "d3a5",
    "label": "using a specific subject implementation",
    "options": [
      "79e5"
    ]
  },
  "0e84": {
    "id": "0e84",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "efc1",
      "8bfe",
      "e44d",
      "2e53",
      "d3a5"
    ]
  },
  "f79e": {
    "id": "f79e",
    "label": "catchError"
  },
  "7f4a": {
    "id": "7f4a",
    "label": "I want to start a new Observable",
    "options": [
      "f79e"
    ]
  },
  "8da6": {
    "id": "8da6",
    "label": "retry"
  },
  "aa69": {
    "id": "aa69",
    "label": "immediately",
    "options": [
      "8da6"
    ]
  },
  "275d": {
    "id": "275d",
    "label": "retryWhen"
  },
  "8a84": {
    "id": "8a84",
    "label": "when another Observable emits",
    "options": [
      "275d"
    ]
  },
  "fe0f": {
    "id": "fe0f",
    "label": "I want to re-subscribe",
    "options": [
      "aa69",
      "8a84"
    ]
  },
  "dd57": {
    "id": "dd57",
    "label": "when an error occurs",
    "options": [
      "7f4a",
      "fe0f"
    ]
  },
  "519c": {
    "id": "519c",
    "label": "repeat"
  },
  "652c": {
    "id": "652c",
    "label": "immediately",
    "options": [
      "519c"
    ]
  },
  "ec05": {
    "id": "ec05",
    "label": "repeatWhen"
  },
  "ae80": {
    "id": "ae80",
    "label": "when another Observable emits",
    "options": [
      "ec05"
    ]
  },
  "be8b": {
    "id": "be8b",
    "label": "I want to re-subscribe",
    "options": [
      "652c",
      "ae80"
    ]
  },
  "5f31": {
    "id": "5f31",
    "label": "I want to start a new Observable",
    "options": [
      "9299"
    ]
  },
  "cb87": {
    "id": "cb87",
    "label": "when it completes",
    "options": [
      "be8b",
      "5f31"
    ]
  },
  "9e20": {
    "id": "9e20",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "4966"
    ]
  },
  "8a64": {
    "id": "8a64",
    "label": "subscribeOn"
  },
  "d7b3": {
    "id": "d7b3",
    "label": "that routes calls to subscribe",
    "options": [
      "8a64"
    ]
  },
  "ccda": {
    "id": "ccda",
    "label": "observeOn"
  },
  "c6e3": {
    "id": "c6e3",
    "label": "that routes values to observers",
    "options": [
      "ccda"
    ]
  },
  "e526": {
    "id": "e526",
    "label": "I want to change the scheduler",
    "options": [
      "d7b3",
      "c6e3"
    ]
  },
  "504f": {
    "id": "504f",
    "label": "race"
  },
  "43b7": {
    "id": "43b7",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "504f"
    ]
  },
  "f241": {
    "id": "f241",
    "label": "merge"
  },
  "48cb": {
    "id": "48cb",
    "label": "I want to output the values from either of them",
    "options": [
      "f241"
    ]
  },
  "c0b6": {
    "id": "c0b6",
    "label": "combineLatest"
  },
  "ed3d": {
    "id": "ed3d",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "c0b6"
    ]
  },
  "b7f1": {
    "id": "b7f1",
    "label": "withLatestFrom"
  },
  "9f08": {
    "id": "9f08",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "b7f1"
    ]
  },
  "df95": {
    "id": "df95",
    "label": "zip"
  },
  "a4ac": {
    "id": "a4ac",
    "label": "using each source value only once",
    "options": [
      "df95"
    ]
  },
  "ba88": {
    "id": "ba88",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ed3d",
      "9f08",
      "a4ac"
    ]
  },
  "f3ac": {
    "id": "f3ac",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "43b7",
      "48cb",
      "ba88"
    ]
  },
  "50c8": {
    "id": "50c8",
    "label": "I have one existing Observable, and",
    "options": [
      "d6c4",
      "c573",
      "12b0",
      "1027",
      "2322",
      "66f1",
      "dad9",
      "33fa",
      "ce34",
      "e3d0",
      "bd49",
      "404f",
      "24d8",
      "bbde",
      "2a85",
      "0e84",
      "dd57",
      "cb87",
      "9e20",
      "e526",
      "f3ac"
    ]
  },
  "9aa0": {
    "id": "9aa0",
    "label": "race"
  },
  "191f": {
    "id": "191f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "9aa0"
    ]
  },
  "fa70": {
    "id": "fa70",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "8981"
    ]
  },
  "0771": {
    "id": "0771",
    "label": "merge"
  },
  "c8c7": {
    "id": "c8c7",
    "label": "I want to output the values from either of them",
    "options": [
      "0771"
    ]
  },
  "994b": {
    "id": "994b",
    "label": "combineLatest"
  },
  "0102": {
    "id": "0102",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "994b"
    ]
  },
  "90b1": {
    "id": "90b1",
    "label": "zip"
  },
  "28aa": {
    "id": "28aa",
    "label": "using each source value only once",
    "options": [
      "90b1"
    ]
  },
  "c42a": {
    "id": "c42a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "0102",
      "28aa"
    ]
  },
  "e8b3": {
    "id": "e8b3",
    "label": "concat"
  },
  "c998": {
    "id": "c998",
    "label": "I want to subscribe to each in order",
    "options": [
      "e8b3"
    ]
  },
  "ba04": {
    "id": "ba04",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "191f",
      "fa70",
      "c8c7",
      "c42a",
      "c998"
    ]
  },
  "dcec": {
    "id": "dcec",
    "label": "Observable",
    "method": "create"
  },
  "c57b": {
    "id": "c57b",
    "label": "using custom logic",
    "options": [
      "dcec"
    ]
  },
  "18ab": {
    "id": "18ab",
    "label": "generate"
  },
  "18c8": {
    "id": "18c8",
    "label": "using a state machine similar to a for loop",
    "options": [
      "18ab"
    ]
  },
  "bb86": {
    "id": "bb86",
    "label": "throwError"
  },
  "c0a9": {
    "id": "c0a9",
    "label": "that throws an error",
    "options": [
      "bb86"
    ]
  },
  "0075": {
    "id": "0075",
    "label": "EMPTY"
  },
  "47cf": {
    "id": "47cf",
    "label": "that just completes, without emitting values",
    "options": [
      "0075"
    ]
  },
  "e7ce": {
    "id": "e7ce",
    "label": "NEVER"
  },
  "cc1c": {
    "id": "cc1c",
    "label": "that never emits anything",
    "options": [
      "e7ce"
    ]
  },
  "afb7": {
    "id": "afb7",
    "label": "fromEvent"
  },
  "6b10": {
    "id": "6b10",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "afb7"
    ]
  },
  "1ef8": {
    "id": "1ef8",
    "label": "fromEventPattern"
  },
  "8d73": {
    "id": "8d73",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "1ef8"
    ]
  },
  "d68d": {
    "id": "d68d",
    "label": "from an existing source of events",
    "options": [
      "6b10",
      "8d73"
    ]
  },
  "8bbe": {
    "id": "8bbe",
    "label": "from"
  },
  "fe39": {
    "id": "fe39",
    "label": "from a Promise or an event source",
    "options": [
      "8bbe"
    ]
  },
  "57e3": {
    "id": "57e3",
    "label": "from"
  },
  "717b": {
    "id": "717b",
    "label": "range"
  },
  "1c1e": {
    "id": "1c1e",
    "label": "over values in a numeric range",
    "options": [
      "717b"
    ]
  },
  "0c91": {
    "id": "0c91",
    "label": "of"
  },
  "81f3": {
    "id": "81f3",
    "label": "over prefined values given as arguments",
    "options": [
      "0c91"
    ]
  },
  "82d4": {
    "id": "82d4",
    "label": "that iterates",
    "options": [
      "9751",
      "1c1e",
      "81f3"
    ]
  },
  "2df9": {
    "id": "2df9",
    "label": "interval"
  },
  "fe73": {
    "id": "fe73",
    "label": "regularly",
    "options": [
      "2df9"
    ]
  },
  "5d1d": {
    "id": "5d1d",
    "label": "timer"
  },
  "123b": {
    "id": "123b",
    "label": "with an optional initial delay",
    "options": [
      "5d1d"
    ]
  },
  "037a": {
    "id": "037a",
    "label": "that emits values on a timer",
    "options": [
      "fe73",
      "123b"
    ]
  },
  "82ea": {
    "id": "82ea",
    "label": "defer"
  },
  "3f3e": {
    "id": "3f3e",
    "label": "I want to create a new Observable",
    "options": [
      "c57b",
      "18c8",
      "c0a9",
      "47cf",
      "cc1c",
      "d68d",
      "fe39",
      "82d4",
      "037a",
      "3790"
    ]
  },
  "45c4": {
    "id": "45c4",
    "label": "bindCallback"
  },
  "e05a": {
    "id": "e05a",
    "label": "supporting a conventional callback API",
    "options": [
      "45c4"
    ]
  },
  "48b2": {
    "id": "48b2",
    "label": "bindNodeCallback"
  },
  "715b": {
    "id": "715b",
    "label": "supporting Node.js callback style API",
    "options": [
      "48b2"
    ]
  },
  "0083": {
    "id": "0083",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "e05a",
      "715b"
    ]
  },
  "c1b9": {
    "id": "c1b9",
    "label": "I have no Observables yet, and",
    "options": [
      "3f3e",
      "0083"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "50c8",
      "ba04",
      "c1b9"
    ]
  }
}