{
  "1231": {
    "id": "1231",
    "label": "withLatestFrom"
  },
  "1550": {
    "id": "1550",
    "label": "audit"
  },
  "1627": {
    "id": "1627",
    "label": "from an existing source of events",
    "options": [
      "6ccd",
      "bf53"
    ]
  },
  "1803": {
    "id": "1803",
    "label": "takeWhile"
  },
  "1902": {
    "id": "1902",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "d0f9",
      "26de",
      "64d1"
    ]
  },
  "1992": {
    "id": "1992",
    "label": "mergeMapTo"
  },
  "2016": {
    "id": "2016",
    "label": "to be a value calculated through a formula",
    "options": [
      "5f37"
    ]
  },
  "2300": {
    "id": "2300",
    "label": "takeUntil"
  },
  "2663": {
    "id": "2663",
    "label": "based on custom logic",
    "options": [
      "4a60"
    ]
  },
  "2758": {
    "id": "2758",
    "label": "tap"
  },
  "2957": {
    "id": "2957",
    "label": "immediately",
    "options": [
      "e8c9"
    ]
  },
  "3138": {
    "id": "3138",
    "label": "from"
  },
  "3669": {
    "id": "3669",
    "label": "I want to re-subscribe",
    "options": [
      "2957",
      "7224"
    ]
  },
  "4402": {
    "id": "4402",
    "label": "I want to re-subscribe",
    "options": [
      "e947",
      "87f4"
    ]
  },
  "4828": {
    "id": "4828",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fa31"
    ]
  },
  "4864": {
    "id": "4864",
    "label": "combineLatest"
  },
  "5025": {
    "id": "5025",
    "label": "I want to delay the emissions",
    "options": [
      "b654",
      "7910"
    ]
  },
  "5303": {
    "id": "5303",
    "label": "skipLast"
  },
  "5611": {
    "id": "5611",
    "label": "when an error occurs",
    "options": [
      "72c7",
      "4402"
    ]
  },
  "5713": {
    "id": "5713",
    "label": "when it completes",
    "options": [
      "3669",
      "ab8f"
    ]
  },
  "5809": {
    "id": "5809",
    "label": "I want to change the scheduler",
    "options": [
      "fc5e",
      "c7c4"
    ]
  },
  "6344": {
    "id": "6344",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "5f5a",
      "51a1"
    ]
  },
  "6600": {
    "id": "6600",
    "label": "based on a given amount",
    "options": [
      "335a"
    ]
  },
  "6943": {
    "id": "6943",
    "label": "startWith"
  },
  "7224": {
    "id": "7224",
    "label": "when another Observable emits",
    "options": [
      "9171"
    ]
  },
  "7435": {
    "id": "7435",
    "label": "to be a constant value",
    "options": [
      "78ca"
    ]
  },
  "7569": {
    "id": "7569",
    "label": "over values in a numeric range",
    "options": [
      "f4c7"
    ]
  },
  "7699": {
    "id": "7699",
    "label": "mergeMap"
  },
  "7910": {
    "id": "7910",
    "label": "based on the emissions of another Observable",
    "options": [
      "80fd"
    ]
  },
  "8278": {
    "id": "8278",
    "label": "based on a given amount",
    "options": [
      "0609"
    ]
  },
  "8726": {
    "id": "8726",
    "label": "based on time",
    "options": [
      "3a2a",
      "683e"
    ]
  },
  "8746": {
    "id": "8746",
    "label": "and convert to a Promise",
    "options": [
      "260d"
    ]
  },
  "8967": {
    "id": "8967",
    "label": "single"
  },
  "9171": {
    "id": "9171",
    "label": "repeatWhen"
  },
  "9899": {
    "id": "9899",
    "label": "bufferToggle"
  },
  "78ca": {
    "id": "78ca",
    "label": "mapTo"
  },
  "5f37": {
    "id": "5f37",
    "label": "map"
  },
  "455d": {
    "id": "455d",
    "label": "I want to change each emitted value",
    "options": [
      "7435",
      "2016"
    ]
  },
  "77f8": {
    "id": "77f8",
    "label": "pluck"
  },
  "fbf0": {
    "id": "fbf0",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "77f8"
    ]
  },
  "e39e": {
    "id": "e39e",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "2758"
    ]
  },
  "4a60": {
    "id": "4a60",
    "label": "filter"
  },
  "e4ec": {
    "id": "e4ec",
    "label": "first"
  },
  "c5a0": {
    "id": "c5a0",
    "label": "and only the first value",
    "options": [
      "e4ec"
    ]
  },
  "335a": {
    "id": "335a",
    "label": "take"
  },
  "436c": {
    "id": "436c",
    "label": "based on custom logic",
    "options": [
      "1803"
    ]
  },
  "e10d": {
    "id": "e10d",
    "label": "if they are at the start of the Observable",
    "options": [
      "c5a0",
      "6600",
      "436c"
    ]
  },
  "43b3": {
    "id": "43b3",
    "label": "elementAt"
  },
  "3be1": {
    "id": "3be1",
    "label": "if they are exactly the n-th emission",
    "options": [
      "43b3"
    ]
  },
  "c5c9": {
    "id": "c5c9",
    "label": "last"
  },
  "438e": {
    "id": "438e",
    "label": "and only the last value",
    "options": [
      "c5c9"
    ]
  },
  "0609": {
    "id": "0609",
    "label": "takeLast"
  },
  "2bf6": {
    "id": "2bf6",
    "label": "if they are at the end of the Observable",
    "options": [
      "438e",
      "8278"
    ]
  },
  "c2e2": {
    "id": "c2e2",
    "label": "until another Observable emits a value",
    "options": [
      "2300"
    ]
  },
  "b990": {
    "id": "b990",
    "label": "I want to allow some values to pass",
    "options": [
      "2663",
      "e10d",
      "3be1",
      "2bf6",
      "c2e2"
    ]
  },
  "6df7": {
    "id": "6df7",
    "label": "ignoreElements"
  },
  "ee9d": {
    "id": "ee9d",
    "label": "altogether",
    "options": [
      "6df7"
    ]
  },
  "dd5b": {
    "id": "dd5b",
    "label": "skip"
  },
  "d283": {
    "id": "d283",
    "label": "based on a given amount",
    "options": [
      "dd5b"
    ]
  },
  "f5fb": {
    "id": "f5fb",
    "label": "skipWhile"
  },
  "8cea": {
    "id": "8cea",
    "label": "based on custom logic",
    "options": [
      "f5fb"
    ]
  },
  "3c0f": {
    "id": "3c0f",
    "label": "from the start of the Observable",
    "options": [
      "d283",
      "8cea"
    ]
  },
  "c53c": {
    "id": "c53c",
    "label": "from the end of the Observable",
    "options": [
      "5303"
    ]
  },
  "2e9b": {
    "id": "2e9b",
    "label": "skipUntil"
  },
  "23a5": {
    "id": "23a5",
    "label": "until another Observable emits a value",
    "options": [
      "2e9b"
    ]
  },
  "27ce": {
    "id": "27ce",
    "label": "distinctUntilChanged"
  },
  "a160": {
    "id": "a160",
    "label": "emitted just before the current value",
    "options": [
      "27ce"
    ]
  },
  "c366": {
    "id": "c366",
    "label": "distinct"
  },
  "c398": {
    "id": "c398",
    "label": "emitted some time in the past",
    "options": [
      "c366"
    ]
  },
  "7beb": {
    "id": "7beb",
    "label": "according to value equality",
    "options": [
      "a160",
      "c398"
    ]
  },
  "8a6f": {
    "id": "8a6f",
    "label": "distinctUntilKeyChanged"
  },
  "bc2e": {
    "id": "bc2e",
    "label": "emitted just before the current value",
    "options": [
      "8a6f"
    ]
  },
  "20b9": {
    "id": "20b9",
    "label": "according to a key or object property",
    "options": [
      "bc2e"
    ]
  },
  "6ea2": {
    "id": "6ea2",
    "label": "that match some previous value",
    "options": [
      "7beb",
      "20b9"
    ]
  },
  "9d8b": {
    "id": "9d8b",
    "label": "throttle"
  },
  "88f1": {
    "id": "88f1",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "9d8b"
    ]
  },
  "2a0f": {
    "id": "2a0f",
    "label": "throttleTime"
  },
  "1d10": {
    "id": "1d10",
    "label": "where time windows are determined by a time duration",
    "options": [
      "2a0f"
    ]
  },
  "e177": {
    "id": "e177",
    "label": "by emitting the first value in each time window",
    "options": [
      "88f1",
      "1d10"
    ]
  },
  "9a16": {
    "id": "9a16",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "1550"
    ]
  },
  "49dc": {
    "id": "49dc",
    "label": "where time windows are determined by a time duration",
    "options": [
      "5611"
    ]
  },
  "0242": {
    "id": "0242",
    "label": "by emitting the last value in each time window",
    "options": [
      "9a16",
      "49dc"
    ]
  },
  "d880": {
    "id": "d880",
    "label": "debounce"
  },
  "5f5a": {
    "id": "5f5a",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "d880"
    ]
  },
  "2fe7": {
    "id": "2fe7",
    "label": "debounceTime"
  },
  "51a1": {
    "id": "51a1",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "2fe7"
    ]
  },
  "5dec": {
    "id": "5dec",
    "label": "that occur too frequently",
    "options": [
      "e177",
      "0242",
      "6344"
    ]
  },
  "8eb0": {
    "id": "8eb0",
    "label": "I want to ignore values",
    "options": [
      "ee9d",
      "3c0f",
      "c53c",
      "23a5",
      "6ea2",
      "5dec"
    ]
  },
  "82fa": {
    "id": "82fa",
    "label": "reduce"
  },
  "c85a": {
    "id": "c85a",
    "label": "and only output the final computed value",
    "options": [
      "82fa"
    ]
  },
  "faa1": {
    "id": "faa1",
    "label": "scan"
  },
  "c978": {
    "id": "c978",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "faa1"
    ]
  },
  "e142": {
    "id": "e142",
    "label": "mergeScan"
  },
  "4d2f": {
    "id": "4d2f",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "e142"
    ]
  },
  "f3ef": {
    "id": "f3ef",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "c85a",
      "c978",
      "4d2f"
    ]
  },
  "9e61": {
    "id": "9e61",
    "label": "materialize"
  },
  "f341": {
    "id": "f341",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "9e61"
    ]
  },
  "8ad3": {
    "id": "8ad3",
    "label": "timeInterval"
  },
  "d6c4": {
    "id": "d6c4",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "8ad3"
    ]
  },
  "e061": {
    "id": "e061",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "f341",
      "d6c4"
    ]
  },
  "997c": {
    "id": "997c",
    "label": "timeout"
  },
  "603d": {
    "id": "603d",
    "label": "I want to throw an error",
    "options": [
      "997c"
    ]
  },
  "693b": {
    "id": "693b",
    "label": "timeoutWith"
  },
  "529f": {
    "id": "529f",
    "label": "I want to switch to another Observable",
    "options": [
      "693b"
    ]
  },
  "50af": {
    "id": "50af",
    "label": "after a period of inactivity",
    "options": [
      "603d",
      "529f"
    ]
  },
  "0a5a": {
    "id": "0a5a",
    "label": "I want to ensure there is only one value",
    "options": [
      "8967"
    ]
  },
  "5d61": {
    "id": "5d61",
    "label": "count"
  },
  "f375": {
    "id": "f375",
    "label": "I want to know how many values it emits",
    "options": [
      "5d61"
    ]
  },
  "3f79": {
    "id": "3f79",
    "label": "I want to prepend one value",
    "options": [
      "6943"
    ]
  },
  "ef5d": {
    "id": "ef5d",
    "label": "delay"
  },
  "b654": {
    "id": "b654",
    "label": "based on a given amount of time",
    "options": [
      "ef5d"
    ]
  },
  "80fd": {
    "id": "80fd",
    "label": "delayWhen"
  },
  "2f4e": {
    "id": "2f4e",
    "label": "toArray"
  },
  "691e": {
    "id": "691e",
    "label": "and convert to an array",
    "options": [
      "2f4e"
    ]
  },
  "260d": {
    "id": "260d",
    "label": "Observable",
    "method": "toPromise"
  },
  "5d3c": {
    "id": "5d3c",
    "label": "until the Observable completes",
    "options": [
      "691e",
      "8746"
    ]
  },
  "31bd": {
    "id": "31bd",
    "label": "pairwise"
  },
  "3b33": {
    "id": "3b33",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "31bd"
    ]
  },
  "f7e1": {
    "id": "f7e1",
    "label": "partition"
  },
  "6b74": {
    "id": "6b74",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "f7e1"
    ]
  },
  "6bb1": {
    "id": "6bb1",
    "label": "bufferCount"
  },
  "2bd5": {
    "id": "2bd5",
    "label": "and emit the group as an array",
    "options": [
      "6bb1"
    ]
  },
  "d4a0": {
    "id": "d4a0",
    "label": "windowCount"
  },
  "2aa1": {
    "id": "2aa1",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d4a0"
    ]
  },
  "96c4": {
    "id": "96c4",
    "label": "in batches of a particular size",
    "options": [
      "2bd5",
      "2aa1"
    ]
  },
  "2eec": {
    "id": "2eec",
    "label": "bufferTime"
  },
  "3a2a": {
    "id": "3a2a",
    "label": "and emit the group as an array",
    "options": [
      "2eec"
    ]
  },
  "c5d1": {
    "id": "c5d1",
    "label": "windowTime"
  },
  "683e": {
    "id": "683e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c5d1"
    ]
  },
  "c7c5": {
    "id": "c7c5",
    "label": "supporting Node.js callback style API",
    "options": [
      "bd7f"
    ]
  },
  "871a": {
    "id": "871a",
    "label": "and emit the group as an array",
    "options": [
      "c7c5"
    ]
  },
  "fa31": {
    "id": "fa31",
    "label": "window"
  },
  "793d": {
    "id": "793d",
    "label": "until another Observable emits",
    "options": [
      "871a",
      "4828"
    ]
  },
  "b44d": {
    "id": "b44d",
    "label": "bufferWhen"
  },
  "5b96": {
    "id": "5b96",
    "label": "and emit the group as an array",
    "options": [
      "b44d"
    ]
  },
  "9aa8": {
    "id": "9aa8",
    "label": "windowWhen"
  },
  "a572": {
    "id": "a572",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9aa8"
    ]
  },
  "ec2b": {
    "id": "ec2b",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "5b96",
      "a572"
    ]
  },
  "4ea2": {
    "id": "4ea2",
    "label": "and emit the group as an array",
    "options": [
      "9899"
    ]
  },
  "2c7c": {
    "id": "2c7c",
    "label": "windowToggle"
  },
  "86db": {
    "id": "86db",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2c7c"
    ]
  },
  "4e3b": {
    "id": "4e3b",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "4ea2",
      "86db"
    ]
  },
  "6c29": {
    "id": "6c29",
    "label": "groupBy"
  },
  "b399": {
    "id": "b399",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6c29"
    ]
  },
  "358b": {
    "id": "358b",
    "label": "I want to group the values",
    "options": [
      "5d3c",
      "3b33",
      "6b74",
      "96c4",
      "8726",
      "793d",
      "ec2b",
      "4e3b",
      "b399"
    ]
  },
  "2ea7": {
    "id": "2ea7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "1992"
    ]
  },
  "87bb": {
    "id": "87bb",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7699"
    ]
  },
  "be67": {
    "id": "be67",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "2ea7",
      "87bb"
    ]
  },
  "c9d6": {
    "id": "c9d6",
    "label": "concatMapTo"
  },
  "212a": {
    "id": "212a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c9d6"
    ]
  },
  "0bac": {
    "id": "0bac",
    "label": "concatMap"
  },
  "a4ec": {
    "id": "a4ec",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0bac"
    ]
  },
  "09ac": {
    "id": "09ac",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "212a",
      "a4ec"
    ]
  },
  "e61c": {
    "id": "e61c",
    "label": "switchMapTo"
  },
  "e8b8": {
    "id": "e8b8",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e61c"
    ]
  },
  "a3b4": {
    "id": "a3b4",
    "label": "switchMap"
  },
  "7aef": {
    "id": "7aef",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a3b4"
    ]
  },
  "b961": {
    "id": "b961",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "e8b8",
      "7aef"
    ]
  },
  "cfc2": {
    "id": "cfc2",
    "label": "exhaustMap"
  },
  "56aa": {
    "id": "56aa",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "cfc2"
    ]
  },
  "5ce7": {
    "id": "5ce7",
    "label": "expand"
  },
  "2d58": {
    "id": "2d58",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "5ce7"
    ]
  },
  "b715": {
    "id": "b715",
    "label": "I want to start a new Observable for each value",
    "options": [
      "be67",
      "09ac",
      "b961",
      "56aa",
      "2d58"
    ]
  },
  "b43f": {
    "id": "b43f",
    "label": "pipe"
  },
  "6bfd": {
    "id": "6bfd",
    "label": "I want to perform custom operations",
    "options": [
      "b43f"
    ]
  },
  "f1c5": {
    "id": "f1c5",
    "label": "share"
  },
  "2e70": {
    "id": "2e70",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "f1c5"
    ]
  },
  "cf6a": {
    "id": "cf6a",
    "label": "publish"
  },
  "fd4e": {
    "id": "fd4e",
    "label": "and start it manually or imperatively",
    "options": [
      "cf6a"
    ]
  },
  "f58a": {
    "id": "f58a",
    "label": "using a conventional Subject",
    "options": [
      "2e70",
      "fd4e"
    ]
  },
  "4d5d": {
    "id": "4d5d",
    "label": "publishBehavior"
  },
  "28b9": {
    "id": "28b9",
    "label": "using a BehaviorSubject",
    "options": [
      "4d5d"
    ]
  },
  "f87a": {
    "id": "f87a",
    "label": "publishReplay"
  },
  "e859": {
    "id": "e859",
    "label": "using a ReplaySubject",
    "options": [
      "f87a"
    ]
  },
  "78be": {
    "id": "78be",
    "label": "publishLast"
  },
  "102f": {
    "id": "102f",
    "label": "using an AsyncSubject",
    "options": [
      "78be"
    ]
  },
  "a1f1": {
    "id": "a1f1",
    "label": "multicast"
  },
  "a1f2": {
    "id": "a1f2",
    "label": "using a specific subject implementation",
    "options": [
      "a1f1"
    ]
  },
  "c3dc": {
    "id": "c3dc",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "f58a",
      "28b9",
      "e859",
      "102f",
      "a1f2"
    ]
  },
  "d9d3": {
    "id": "d9d3",
    "label": "catchError"
  },
  "72c7": {
    "id": "72c7",
    "label": "I want to start a new Observable",
    "options": [
      "d9d3"
    ]
  },
  "038e": {
    "id": "038e",
    "label": "retry"
  },
  "e947": {
    "id": "e947",
    "label": "immediately",
    "options": [
      "038e"
    ]
  },
  "0eb8": {
    "id": "0eb8",
    "label": "retryWhen"
  },
  "87f4": {
    "id": "87f4",
    "label": "when another Observable emits",
    "options": [
      "0eb8"
    ]
  },
  "e8c9": {
    "id": "e8c9",
    "label": "repeat"
  },
  "37df": {
    "id": "37df",
    "label": "concat"
  },
  "ab8f": {
    "id": "ab8f",
    "label": "I want to start a new Observable",
    "options": [
      "37df"
    ]
  },
  "00a3": {
    "id": "00a3",
    "label": "finalize"
  },
  "0f4c": {
    "id": "0f4c",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "00a3"
    ]
  },
  "0c80": {
    "id": "0c80",
    "label": "subscribeOn"
  },
  "fc5e": {
    "id": "fc5e",
    "label": "that routes calls to subscribe",
    "options": [
      "0c80"
    ]
  },
  "e516": {
    "id": "e516",
    "label": "observeOn"
  },
  "c7c4": {
    "id": "c7c4",
    "label": "that routes values to observers",
    "options": [
      "e516"
    ]
  },
  "bfda": {
    "id": "bfda",
    "label": "race"
  },
  "f330": {
    "id": "f330",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "bfda"
    ]
  },
  "f490": {
    "id": "f490",
    "label": "merge"
  },
  "527d": {
    "id": "527d",
    "label": "I want to output the values from either of them",
    "options": [
      "f490"
    ]
  },
  "d0f9": {
    "id": "d0f9",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "4864"
    ]
  },
  "26de": {
    "id": "26de",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "1231"
    ]
  },
  "d48a": {
    "id": "d48a",
    "label": "zip"
  },
  "64d1": {
    "id": "64d1",
    "label": "using each source value only once",
    "options": [
      "d48a"
    ]
  },
  "9f00": {
    "id": "9f00",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "f330",
      "527d",
      "1902"
    ]
  },
  "d952": {
    "id": "d952",
    "label": "I have one existing Observable, and",
    "options": [
      "455d",
      "fbf0",
      "e39e",
      "b990",
      "8eb0",
      "f3ef",
      "e061",
      "50af",
      "0a5a",
      "f375",
      "3f79",
      "5025",
      "358b",
      "b715",
      "6bfd",
      "c3dc",
      "5611",
      "5713",
      "0f4c",
      "5809",
      "9f00"
    ]
  },
  "dce6": {
    "id": "dce6",
    "label": "race"
  },
  "f6e5": {
    "id": "f6e5",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "dce6"
    ]
  },
  "1b7c": {
    "id": "1b7c",
    "label": "forkJoin"
  },
  "0462": {
    "id": "0462",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "1b7c"
    ]
  },
  "1f00": {
    "id": "1f00",
    "label": "merge"
  },
  "414e": {
    "id": "414e",
    "label": "I want to output the values from either of them",
    "options": [
      "1f00"
    ]
  },
  "725a": {
    "id": "725a",
    "label": "combineLatest"
  },
  "456a": {
    "id": "456a",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "725a"
    ]
  },
  "c141": {
    "id": "c141",
    "label": "zip"
  },
  "ffc6": {
    "id": "ffc6",
    "label": "using each source value only once",
    "options": [
      "c141"
    ]
  },
  "01ad": {
    "id": "01ad",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "456a",
      "ffc6"
    ]
  },
  "15b7": {
    "id": "15b7",
    "label": "concat"
  },
  "73ab": {
    "id": "73ab",
    "label": "I want to subscribe to each in order",
    "options": [
      "15b7"
    ]
  },
  "87df": {
    "id": "87df",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "f6e5",
      "0462",
      "414e",
      "01ad",
      "73ab"
    ]
  },
  "6b7d": {
    "id": "6b7d",
    "label": "Observable",
    "method": "create"
  },
  "04b4": {
    "id": "04b4",
    "label": "using custom logic",
    "options": [
      "6b7d"
    ]
  },
  "d726": {
    "id": "d726",
    "label": "generate"
  },
  "c46c": {
    "id": "c46c",
    "label": "using a state machine similar to a for loop",
    "options": [
      "d726"
    ]
  },
  "df7d": {
    "id": "df7d",
    "label": "throwError"
  },
  "a8bc": {
    "id": "a8bc",
    "label": "that throws an error",
    "options": [
      "df7d"
    ]
  },
  "db6c": {
    "id": "db6c",
    "label": "EMPTY"
  },
  "56af": {
    "id": "56af",
    "label": "that just completes, without emitting values",
    "options": [
      "db6c"
    ]
  },
  "d820": {
    "id": "d820",
    "label": "NEVER"
  },
  "27cc": {
    "id": "27cc",
    "label": "that never emits anything",
    "options": [
      "d820"
    ]
  },
  "f9cb": {
    "id": "f9cb",
    "label": "fromEvent"
  },
  "6ccd": {
    "id": "6ccd",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "f9cb"
    ]
  },
  "a943": {
    "id": "a943",
    "label": "fromEventPattern"
  },
  "bf53": {
    "id": "bf53",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "a943"
    ]
  },
  "9c0f": {
    "id": "9c0f",
    "label": "from"
  },
  "10fc": {
    "id": "10fc",
    "label": "from a Promise or an event source",
    "options": [
      "9c0f"
    ]
  },
  "ebdc": {
    "id": "ebdc",
    "label": "over the values in an array",
    "options": [
      "3138"
    ]
  },
  "f4c7": {
    "id": "f4c7",
    "label": "range"
  },
  "ff59": {
    "id": "ff59",
    "label": "of"
  },
  "0561": {
    "id": "0561",
    "label": "over prefined values given as arguments",
    "options": [
      "ff59"
    ]
  },
  "ad6e": {
    "id": "ad6e",
    "label": "that iterates",
    "options": [
      "ebdc",
      "7569",
      "0561"
    ]
  },
  "9a11": {
    "id": "9a11",
    "label": "interval"
  },
  "d58a": {
    "id": "d58a",
    "label": "regularly",
    "options": [
      "9a11"
    ]
  },
  "163e": {
    "id": "163e",
    "label": "timer"
  },
  "a522": {
    "id": "a522",
    "label": "with an optional initial delay",
    "options": [
      "163e"
    ]
  },
  "e573": {
    "id": "e573",
    "label": "that emits values on a timer",
    "options": [
      "d58a",
      "a522"
    ]
  },
  "b860": {
    "id": "b860",
    "label": "defer"
  },
  "0316": {
    "id": "0316",
    "label": "which is built on demand when subscribed",
    "options": [
      "b860"
    ]
  },
  "1af4": {
    "id": "1af4",
    "label": "I want to create a new Observable",
    "options": [
      "04b4",
      "c46c",
      "a8bc",
      "56af",
      "27cc",
      "1627",
      "10fc",
      "ad6e",
      "e573",
      "0316"
    ]
  },
  "6ae4": {
    "id": "6ae4",
    "label": "bindCallback"
  },
  "653e": {
    "id": "653e",
    "label": "supporting a conventional callback API",
    "options": [
      "6ae4"
    ]
  },
  "bd7f": {
    "id": "bd7f",
    "label": "bindNodeCallback"
  },
  "d85b": {
    "id": "d85b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "653e",
      "c7c5"
    ]
  },
  "5aed": {
    "id": "5aed",
    "label": "I have no Observables yet, and",
    "options": [
      "1af4",
      "d85b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "d952",
      "87df",
      "5aed"
    ]
  }
}