{
  "1127": {
    "id": "1127",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "3752"
    ]
  },
  "1348": {
    "id": "1348",
    "label": "windowTime"
  },
  "1591": {
    "id": "1591",
    "label": "finalize"
  },
  "1911": {
    "id": "1911",
    "label": "fromEventPattern"
  },
  "2002": {
    "id": "2002",
    "label": "that just completes, without emitting values",
    "options": [
      "0582"
    ]
  },
  "2768": {
    "id": "2768",
    "label": "last"
  },
  "2864": {
    "id": "2864",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6e80"
    ]
  },
  "3172": {
    "id": "3172",
    "label": "defer"
  },
  "3221": {
    "id": "3221",
    "label": "based on a given amount of time",
    "options": [
      "638b"
    ]
  },
  "3334": {
    "id": "3334",
    "label": "Observable",
    "method": "toPromise"
  },
  "3625": {
    "id": "3625",
    "label": "mergeMapTo"
  },
  "3727": {
    "id": "3727",
    "label": "when another Observable emits",
    "options": [
      "515a"
    ]
  },
  "3752": {
    "id": "3752",
    "label": "share"
  },
  "4590": {
    "id": "4590",
    "label": "publishBehavior"
  },
  "4760": {
    "id": "4760",
    "label": "immediately",
    "options": [
      "a314"
    ]
  },
  "5065": {
    "id": "5065",
    "label": "observeOn"
  },
  "5122": {
    "id": "5122",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "dfd3",
      "2864"
    ]
  },
  "5165": {
    "id": "5165",
    "label": "publishLast"
  },
  "5649": {
    "id": "5649",
    "label": "using each source value only once",
    "options": [
      "94ac"
    ]
  },
  "5985": {
    "id": "5985",
    "label": "that never emits anything",
    "options": [
      "cd5c"
    ]
  },
  "6240": {
    "id": "6240",
    "label": "fromEvent"
  },
  "6339": {
    "id": "6339",
    "label": "that throws an error",
    "options": [
      "099d"
    ]
  },
  "6407": {
    "id": "6407",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a1b1"
    ]
  },
  "7385": {
    "id": "7385",
    "label": "from an existing source of events",
    "options": [
      "ea04",
      "ced1"
    ]
  },
  "7511": {
    "id": "7511",
    "label": "partition"
  },
  "7559": {
    "id": "7559",
    "label": "according to a key or object property",
    "options": [
      "c281"
    ]
  },
  "7737": {
    "id": "7737",
    "label": "filter"
  },
  "7738": {
    "id": "7738",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "d0ae",
      "6a18",
      "2ea6"
    ]
  },
  "7750": {
    "id": "7750",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "f6ad",
      "0995"
    ]
  },
  "8330": {
    "id": "8330",
    "label": "that occur too frequently",
    "options": [
      "e940",
      "db0c",
      "1c5d"
    ]
  },
  "8460": {
    "id": "8460",
    "label": "that routes values to observers",
    "options": [
      "5065"
    ]
  },
  "9439": {
    "id": "9439",
    "label": "combineLatest"
  },
  "0fd4": {
    "id": "0fd4",
    "label": "mapTo"
  },
  "538e": {
    "id": "538e",
    "label": "to be a constant value",
    "options": [
      "0fd4"
    ]
  },
  "a5b1": {
    "id": "a5b1",
    "label": "map"
  },
  "3d8b": {
    "id": "3d8b",
    "label": "to be a value calculated through a formula",
    "options": [
      "a5b1"
    ]
  },
  "85f2": {
    "id": "85f2",
    "label": "I want to change each emitted value",
    "options": [
      "538e",
      "3d8b"
    ]
  },
  "161c": {
    "id": "161c",
    "label": "pluck"
  },
  "8c81": {
    "id": "8c81",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "161c"
    ]
  },
  "6ecc": {
    "id": "6ecc",
    "label": "tap"
  },
  "fba8": {
    "id": "fba8",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "6ecc"
    ]
  },
  "be9a": {
    "id": "be9a",
    "label": "based on custom logic",
    "options": [
      "7737"
    ]
  },
  "70ab": {
    "id": "70ab",
    "label": "first"
  },
  "65d5": {
    "id": "65d5",
    "label": "and only the first value",
    "options": [
      "70ab"
    ]
  },
  "9b39": {
    "id": "9b39",
    "label": "take"
  },
  "24be": {
    "id": "24be",
    "label": "based on a given amount",
    "options": [
      "9b39"
    ]
  },
  "4f08": {
    "id": "4f08",
    "label": "takeWhile"
  },
  "e48d": {
    "id": "e48d",
    "label": "based on custom logic",
    "options": [
      "4f08"
    ]
  },
  "8fe5": {
    "id": "8fe5",
    "label": "if they are at the start of the Observable",
    "options": [
      "65d5",
      "24be",
      "e48d"
    ]
  },
  "125e": {
    "id": "125e",
    "label": "elementAt"
  },
  "f081": {
    "id": "f081",
    "label": "if they are exactly the n-th emission",
    "options": [
      "125e"
    ]
  },
  "0b5a": {
    "id": "0b5a",
    "label": "and only the last value",
    "options": [
      "2768"
    ]
  },
  "3ec9": {
    "id": "3ec9",
    "label": "takeLast"
  },
  "09e5": {
    "id": "09e5",
    "label": "based on a given amount",
    "options": [
      "3ec9"
    ]
  },
  "0d03": {
    "id": "0d03",
    "label": "if they are at the end of the Observable",
    "options": [
      "0b5a",
      "09e5"
    ]
  },
  "8aff": {
    "id": "8aff",
    "label": "takeUntil"
  },
  "f9e6": {
    "id": "f9e6",
    "label": "until another Observable emits a value",
    "options": [
      "8aff"
    ]
  },
  "d562": {
    "id": "d562",
    "label": "I want to allow some values to pass",
    "options": [
      "be9a",
      "8fe5",
      "f081",
      "0d03",
      "f9e6"
    ]
  },
  "9c75": {
    "id": "9c75",
    "label": "ignoreElements"
  },
  "0a4c": {
    "id": "0a4c",
    "label": "altogether",
    "options": [
      "9c75"
    ]
  },
  "f2a6": {
    "id": "f2a6",
    "label": "skip"
  },
  "5c8c": {
    "id": "5c8c",
    "label": "based on a given amount",
    "options": [
      "f2a6"
    ]
  },
  "71f0": {
    "id": "71f0",
    "label": "skipWhile"
  },
  "5ee4": {
    "id": "5ee4",
    "label": "based on custom logic",
    "options": [
      "71f0"
    ]
  },
  "d5db": {
    "id": "d5db",
    "label": "from the start of the Observable",
    "options": [
      "5c8c",
      "5ee4"
    ]
  },
  "b2d6": {
    "id": "b2d6",
    "label": "skipLast"
  },
  "a213": {
    "id": "a213",
    "label": "from the end of the Observable",
    "options": [
      "b2d6"
    ]
  },
  "53b7": {
    "id": "53b7",
    "label": "skipUntil"
  },
  "47a8": {
    "id": "47a8",
    "label": "until another Observable emits a value",
    "options": [
      "53b7"
    ]
  },
  "820f": {
    "id": "820f",
    "label": "distinctUntilChanged"
  },
  "3ce6": {
    "id": "3ce6",
    "label": "emitted just before the current value",
    "options": [
      "820f"
    ]
  },
  "ce8e": {
    "id": "ce8e",
    "label": "distinct"
  },
  "61c8": {
    "id": "61c8",
    "label": "emitted some time in the past",
    "options": [
      "ce8e"
    ]
  },
  "573e": {
    "id": "573e",
    "label": "according to value equality",
    "options": [
      "3ce6",
      "61c8"
    ]
  },
  "011f": {
    "id": "011f",
    "label": "distinctUntilKeyChanged"
  },
  "c281": {
    "id": "c281",
    "label": "emitted just before the current value",
    "options": [
      "011f"
    ]
  },
  "ad86": {
    "id": "ad86",
    "label": "that match some previous value",
    "options": [
      "573e",
      "7559"
    ]
  },
  "e8d3": {
    "id": "e8d3",
    "label": "throttle"
  },
  "c3cc": {
    "id": "c3cc",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e8d3"
    ]
  },
  "8d21": {
    "id": "8d21",
    "label": "throttleTime"
  },
  "ab51": {
    "id": "ab51",
    "label": "where time windows are determined by a time duration",
    "options": [
      "8d21"
    ]
  },
  "e940": {
    "id": "e940",
    "label": "by emitting the first value in each time window",
    "options": [
      "c3cc",
      "ab51"
    ]
  },
  "1e5b": {
    "id": "1e5b",
    "label": "audit"
  },
  "20f1": {
    "id": "20f1",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "1e5b"
    ]
  },
  "b175": {
    "id": "b175",
    "label": "auditTime"
  },
  "d0af": {
    "id": "d0af",
    "label": "where time windows are determined by a time duration",
    "options": [
      "b175"
    ]
  },
  "db0c": {
    "id": "db0c",
    "label": "by emitting the last value in each time window",
    "options": [
      "20f1",
      "d0af"
    ]
  },
  "b8a7": {
    "id": "b8a7",
    "label": "debounce"
  },
  "10a2": {
    "id": "10a2",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "b8a7"
    ]
  },
  "45dd": {
    "id": "45dd",
    "label": "debounceTime"
  },
  "ec88": {
    "id": "ec88",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "45dd"
    ]
  },
  "1c5d": {
    "id": "1c5d",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "10a2",
      "ec88"
    ]
  },
  "d5d5": {
    "id": "d5d5",
    "label": "I want to ignore values",
    "options": [
      "0a4c",
      "d5db",
      "a213",
      "47a8",
      "ad86",
      "8330"
    ]
  },
  "b62a": {
    "id": "b62a",
    "label": "reduce"
  },
  "d0ae": {
    "id": "d0ae",
    "label": "and only output the final computed value",
    "options": [
      "b62a"
    ]
  },
  "d6fc": {
    "id": "d6fc",
    "label": "scan"
  },
  "6a18": {
    "id": "6a18",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "d6fc"
    ]
  },
  "c98c": {
    "id": "c98c",
    "label": "mergeScan"
  },
  "2ea6": {
    "id": "2ea6",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "c98c"
    ]
  },
  "3c9b": {
    "id": "3c9b",
    "label": "materialize"
  },
  "6ce9": {
    "id": "6ce9",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "3c9b"
    ]
  },
  "c37b": {
    "id": "c37b",
    "label": "timeInterval"
  },
  "e4fe": {
    "id": "e4fe",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "c37b"
    ]
  },
  "825d": {
    "id": "825d",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "6ce9",
      "e4fe"
    ]
  },
  "c3cb": {
    "id": "c3cb",
    "label": "timeout"
  },
  "0772": {
    "id": "0772",
    "label": "I want to throw an error",
    "options": [
      "c3cb"
    ]
  },
  "8a82": {
    "id": "8a82",
    "label": "timeoutWith"
  },
  "c7e8": {
    "id": "c7e8",
    "label": "I want to switch to another Observable",
    "options": [
      "8a82"
    ]
  },
  "bf4c": {
    "id": "bf4c",
    "label": "after a period of inactivity",
    "options": [
      "0772",
      "c7e8"
    ]
  },
  "fe73": {
    "id": "fe73",
    "label": "single"
  },
  "06f1": {
    "id": "06f1",
    "label": "I want to ensure there is only one value",
    "options": [
      "fe73"
    ]
  },
  "25d0": {
    "id": "25d0",
    "label": "count"
  },
  "9d25": {
    "id": "9d25",
    "label": "I want to know how many values it emits",
    "options": [
      "25d0"
    ]
  },
  "33eb": {
    "id": "33eb",
    "label": "startWith"
  },
  "3ee0": {
    "id": "3ee0",
    "label": "I want to prepend one value",
    "options": [
      "33eb"
    ]
  },
  "638b": {
    "id": "638b",
    "label": "delay"
  },
  "d0c2": {
    "id": "d0c2",
    "label": "delayWhen"
  },
  "e090": {
    "id": "e090",
    "label": "based on the emissions of another Observable",
    "options": [
      "d0c2"
    ]
  },
  "93ac": {
    "id": "93ac",
    "label": "I want to delay the emissions",
    "options": [
      "3221",
      "e090"
    ]
  },
  "80c2": {
    "id": "80c2",
    "label": "toArray"
  },
  "3bc8": {
    "id": "3bc8",
    "label": "and convert to an array",
    "options": [
      "80c2"
    ]
  },
  "77bc": {
    "id": "77bc",
    "label": "and convert to a Promise",
    "options": [
      "3334"
    ]
  },
  "dd73": {
    "id": "dd73",
    "label": "until the Observable completes",
    "options": [
      "3bc8",
      "77bc"
    ]
  },
  "aa52": {
    "id": "aa52",
    "label": "pairwise"
  },
  "8d80": {
    "id": "8d80",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "aa52"
    ]
  },
  "48c2": {
    "id": "48c2",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "7511"
    ]
  },
  "160f": {
    "id": "160f",
    "label": "bufferCount"
  },
  "150a": {
    "id": "150a",
    "label": "and emit the group as an array",
    "options": [
      "160f"
    ]
  },
  "f96d": {
    "id": "f96d",
    "label": "windowCount"
  },
  "7b5a": {
    "id": "7b5a",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f96d"
    ]
  },
  "fdb9": {
    "id": "fdb9",
    "label": "in batches of a particular size",
    "options": [
      "150a",
      "7b5a"
    ]
  },
  "c81b": {
    "id": "c81b",
    "label": "bufferTime"
  },
  "c2f6": {
    "id": "c2f6",
    "label": "and emit the group as an array",
    "options": [
      "c81b"
    ]
  },
  "918c": {
    "id": "918c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "1348"
    ]
  },
  "a8b4": {
    "id": "a8b4",
    "label": "based on time",
    "options": [
      "c2f6",
      "918c"
    ]
  },
  "ef49": {
    "id": "ef49",
    "label": "buffer"
  },
  "c16b": {
    "id": "c16b",
    "label": "and emit the group as an array",
    "options": [
      "ef49"
    ]
  },
  "14d1": {
    "id": "14d1",
    "label": "window"
  },
  "dca8": {
    "id": "dca8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "14d1"
    ]
  },
  "5b81": {
    "id": "5b81",
    "label": "until another Observable emits",
    "options": [
      "c16b",
      "dca8"
    ]
  },
  "e806": {
    "id": "e806",
    "label": "bufferWhen"
  },
  "849b": {
    "id": "849b",
    "label": "and emit the group as an array",
    "options": [
      "e806"
    ]
  },
  "5dd6": {
    "id": "5dd6",
    "label": "windowWhen"
  },
  "b2cd": {
    "id": "b2cd",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5dd6"
    ]
  },
  "1d52": {
    "id": "1d52",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "849b",
      "b2cd"
    ]
  },
  "b9e1": {
    "id": "b9e1",
    "label": "bufferToggle"
  },
  "dfd3": {
    "id": "dfd3",
    "label": "and emit the group as an array",
    "options": [
      "b9e1"
    ]
  },
  "6e80": {
    "id": "6e80",
    "label": "windowToggle"
  },
  "f821": {
    "id": "f821",
    "label": "groupBy"
  },
  "fd90": {
    "id": "fd90",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "f821"
    ]
  },
  "22cb": {
    "id": "22cb",
    "label": "I want to group the values",
    "options": [
      "dd73",
      "8d80",
      "48c2",
      "fdb9",
      "a8b4",
      "5b81",
      "1d52",
      "5122",
      "fd90"
    ]
  },
  "f6ad": {
    "id": "f6ad",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3625"
    ]
  },
  "1b2f": {
    "id": "1b2f",
    "label": "mergeMap"
  },
  "0995": {
    "id": "0995",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1b2f"
    ]
  },
  "374b": {
    "id": "374b",
    "label": "concatMapTo"
  },
  "dce5": {
    "id": "dce5",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "374b"
    ]
  },
  "0ffc": {
    "id": "0ffc",
    "label": "concatMap"
  },
  "b1fb": {
    "id": "b1fb",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "0ffc"
    ]
  },
  "f6de": {
    "id": "f6de",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "dce5",
      "b1fb"
    ]
  },
  "dd58": {
    "id": "dd58",
    "label": "switchMapTo"
  },
  "d6c1": {
    "id": "d6c1",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "dd58"
    ]
  },
  "d639": {
    "id": "d639",
    "label": "switchMap"
  },
  "10f4": {
    "id": "10f4",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "d639"
    ]
  },
  "761f": {
    "id": "761f",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "d6c1",
      "10f4"
    ]
  },
  "17ca": {
    "id": "17ca",
    "label": "exhaustMap"
  },
  "9a40": {
    "id": "9a40",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "17ca"
    ]
  },
  "77d0": {
    "id": "77d0",
    "label": "expand"
  },
  "f4ce": {
    "id": "f4ce",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "77d0"
    ]
  },
  "f550": {
    "id": "f550",
    "label": "I want to start a new Observable for each value",
    "options": [
      "7750",
      "f6de",
      "761f",
      "9a40",
      "f4ce"
    ]
  },
  "89d7": {
    "id": "89d7",
    "label": "pipe"
  },
  "0b5c": {
    "id": "0b5c",
    "label": "I want to perform custom operations",
    "options": [
      "89d7"
    ]
  },
  "0cd7": {
    "id": "0cd7",
    "label": "publish"
  },
  "4b92": {
    "id": "4b92",
    "label": "and start it manually or imperatively",
    "options": [
      "0cd7"
    ]
  },
  "ea65": {
    "id": "ea65",
    "label": "using a conventional Subject",
    "options": [
      "1127",
      "4b92"
    ]
  },
  "8bb8": {
    "id": "8bb8",
    "label": "using a BehaviorSubject",
    "options": [
      "4590"
    ]
  },
  "89a8": {
    "id": "89a8",
    "label": "publishReplay"
  },
  "b4d5": {
    "id": "b4d5",
    "label": "using a ReplaySubject",
    "options": [
      "89a8"
    ]
  },
  "a6ca": {
    "id": "a6ca",
    "label": "using an AsyncSubject",
    "options": [
      "5165"
    ]
  },
  "ad17": {
    "id": "ad17",
    "label": "multicast"
  },
  "e5b7": {
    "id": "e5b7",
    "label": "using a specific subject implementation",
    "options": [
      "ad17"
    ]
  },
  "fb3a": {
    "id": "fb3a",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "ea65",
      "8bb8",
      "b4d5",
      "a6ca",
      "e5b7"
    ]
  },
  "b7dc": {
    "id": "b7dc",
    "label": "catchError"
  },
  "258e": {
    "id": "258e",
    "label": "I want to start a new Observable",
    "options": [
      "b7dc"
    ]
  },
  "a7f8": {
    "id": "a7f8",
    "label": "retry"
  },
  "46a5": {
    "id": "46a5",
    "label": "immediately",
    "options": [
      "a7f8"
    ]
  },
  "515a": {
    "id": "515a",
    "label": "retryWhen"
  },
  "dbf3": {
    "id": "dbf3",
    "label": "I want to re-subscribe",
    "options": [
      "46a5",
      "3727"
    ]
  },
  "c3cd": {
    "id": "c3cd",
    "label": "when an error occurs",
    "options": [
      "258e",
      "dbf3"
    ]
  },
  "a314": {
    "id": "a314",
    "label": "repeat"
  },
  "589d": {
    "id": "589d",
    "label": "repeatWhen"
  },
  "eae6": {
    "id": "eae6",
    "label": "when another Observable emits",
    "options": [
      "589d"
    ]
  },
  "508f": {
    "id": "508f",
    "label": "I want to re-subscribe",
    "options": [
      "4760",
      "eae6"
    ]
  },
  "5afb": {
    "id": "5afb",
    "label": "concat"
  },
  "d20c": {
    "id": "d20c",
    "label": "I want to start a new Observable",
    "options": [
      "5afb"
    ]
  },
  "343c": {
    "id": "343c",
    "label": "when it completes",
    "options": [
      "508f",
      "d20c"
    ]
  },
  "f8dd": {
    "id": "f8dd",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "1591"
    ]
  },
  "770e": {
    "id": "770e",
    "label": "subscribeOn"
  },
  "0371": {
    "id": "0371",
    "label": "that routes calls to subscribe",
    "options": [
      "770e"
    ]
  },
  "7aeb": {
    "id": "7aeb",
    "label": "I want to change the scheduler",
    "options": [
      "0371",
      "8460"
    ]
  },
  "a1b1": {
    "id": "a1b1",
    "label": "race"
  },
  "0474": {
    "id": "0474",
    "label": "merge"
  },
  "4d5d": {
    "id": "4d5d",
    "label": "I want to output the values from either of them",
    "options": [
      "0474"
    ]
  },
  "4e34": {
    "id": "4e34",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "9439"
    ]
  },
  "6e74": {
    "id": "6e74",
    "label": "withLatestFrom"
  },
  "e5aa": {
    "id": "e5aa",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "6e74"
    ]
  },
  "887c": {
    "id": "887c",
    "label": "zip"
  },
  "c3e7": {
    "id": "c3e7",
    "label": "using each source value only once",
    "options": [
      "887c"
    ]
  },
  "0f79": {
    "id": "0f79",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "4e34",
      "e5aa",
      "c3e7"
    ]
  },
  "bbce": {
    "id": "bbce",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "6407",
      "4d5d",
      "0f79"
    ]
  },
  "1b50": {
    "id": "1b50",
    "label": "I have one existing Observable, and",
    "options": [
      "85f2",
      "8c81",
      "fba8",
      "d562",
      "d5d5",
      "7738",
      "825d",
      "bf4c",
      "06f1",
      "9d25",
      "3ee0",
      "93ac",
      "22cb",
      "f550",
      "0b5c",
      "fb3a",
      "c3cd",
      "343c",
      "f8dd",
      "7aeb",
      "bbce"
    ]
  },
  "e213": {
    "id": "e213",
    "label": "race"
  },
  "d33e": {
    "id": "d33e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "e213"
    ]
  },
  "8e69": {
    "id": "8e69",
    "label": "forkJoin"
  },
  "051f": {
    "id": "051f",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "8e69"
    ]
  },
  "c008": {
    "id": "c008",
    "label": "merge"
  },
  "5c56": {
    "id": "5c56",
    "label": "I want to output the values from either of them",
    "options": [
      "c008"
    ]
  },
  "757e": {
    "id": "757e",
    "label": "combineLatest"
  },
  "53bf": {
    "id": "53bf",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "757e"
    ]
  },
  "94ac": {
    "id": "94ac",
    "label": "zip"
  },
  "ae0e": {
    "id": "ae0e",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "53bf",
      "5649"
    ]
  },
  "0430": {
    "id": "0430",
    "label": "concat"
  },
  "de48": {
    "id": "de48",
    "label": "I want to subscribe to each in order",
    "options": [
      "0430"
    ]
  },
  "ba3d": {
    "id": "ba3d",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "d33e",
      "051f",
      "5c56",
      "ae0e",
      "de48"
    ]
  },
  "bc66": {
    "id": "bc66",
    "label": "Observable",
    "method": "create"
  },
  "079c": {
    "id": "079c",
    "label": "using custom logic",
    "options": [
      "bc66"
    ]
  },
  "fa64": {
    "id": "fa64",
    "label": "generate"
  },
  "ad4c": {
    "id": "ad4c",
    "label": "using a state machine similar to a for loop",
    "options": [
      "fa64"
    ]
  },
  "099d": {
    "id": "099d",
    "label": "throwError"
  },
  "0582": {
    "id": "0582",
    "label": "EMPTY"
  },
  "cd5c": {
    "id": "cd5c",
    "label": "NEVER"
  },
  "ea04": {
    "id": "ea04",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "6240"
    ]
  },
  "ced1": {
    "id": "ced1",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "1911"
    ]
  },
  "d1e6": {
    "id": "d1e6",
    "label": "from"
  },
  "07f2": {
    "id": "07f2",
    "label": "from a Promise or an event source",
    "options": [
      "d1e6"
    ]
  },
  "0925": {
    "id": "0925",
    "label": "from"
  },
  "c63d": {
    "id": "c63d",
    "label": "over the values in an array",
    "options": [
      "0925"
    ]
  },
  "4e87": {
    "id": "4e87",
    "label": "range"
  },
  "c88a": {
    "id": "c88a",
    "label": "over values in a numeric range",
    "options": [
      "4e87"
    ]
  },
  "52f0": {
    "id": "52f0",
    "label": "of"
  },
  "73c1": {
    "id": "73c1",
    "label": "over prefined values given as arguments",
    "options": [
      "52f0"
    ]
  },
  "e9e5": {
    "id": "e9e5",
    "label": "that iterates",
    "options": [
      "c63d",
      "c88a",
      "73c1"
    ]
  },
  "a76f": {
    "id": "a76f",
    "label": "interval"
  },
  "3e68": {
    "id": "3e68",
    "label": "regularly",
    "options": [
      "a76f"
    ]
  },
  "2f3c": {
    "id": "2f3c",
    "label": "timer"
  },
  "cf62": {
    "id": "cf62",
    "label": "with an optional initial delay",
    "options": [
      "2f3c"
    ]
  },
  "0b54": {
    "id": "0b54",
    "label": "that emits values on a timer",
    "options": [
      "3e68",
      "cf62"
    ]
  },
  "0fa5": {
    "id": "0fa5",
    "label": "which is built on demand when subscribed",
    "options": [
      "3172"
    ]
  },
  "ad6c": {
    "id": "ad6c",
    "label": "I want to create a new Observable",
    "options": [
      "079c",
      "ad4c",
      "6339",
      "2002",
      "5985",
      "7385",
      "07f2",
      "e9e5",
      "0b54",
      "0fa5"
    ]
  },
  "75c3": {
    "id": "75c3",
    "label": "bindCallback"
  },
  "adc4": {
    "id": "adc4",
    "label": "supporting a conventional callback API",
    "options": [
      "75c3"
    ]
  },
  "a6fa": {
    "id": "a6fa",
    "label": "bindNodeCallback"
  },
  "e4ae": {
    "id": "e4ae",
    "label": "supporting Node.js callback style API",
    "options": [
      "a6fa"
    ]
  },
  "f0ea": {
    "id": "f0ea",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "adc4",
      "e4ae"
    ]
  },
  "faf6": {
    "id": "faf6",
    "label": "I have no Observables yet, and",
    "options": [
      "ad6c",
      "f0ea"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "1b50",
      "ba3d",
      "faf6"
    ]
  }
}