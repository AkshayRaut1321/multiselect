{
  "1490": {
    "id": "1490",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "3847"
    ]
  },
  "1517": {
    "id": "1517",
    "label": "timeout"
  },
  "1557": {
    "id": "1557",
    "label": "distinctUntilKeyChanged"
  },
  "1875": {
    "id": "1875",
    "label": "emitted just before the current value",
    "options": [
      "23e8"
    ]
  },
  "1940": {
    "id": "1940",
    "label": "count"
  },
  "2091": {
    "id": "2091",
    "label": "based on a given amount",
    "options": [
      "1ef4"
    ]
  },
  "2168": {
    "id": "2168",
    "label": "generate"
  },
  "2169": {
    "id": "2169",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "9d61"
    ]
  },
  "2342": {
    "id": "2342",
    "label": "publish"
  },
  "2368": {
    "id": "2368",
    "label": "I want to change the scheduler",
    "options": [
      "fa89",
      "13a7"
    ]
  },
  "2534": {
    "id": "2534",
    "label": "combineLatest"
  },
  "2553": {
    "id": "2553",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b2ca"
    ]
  },
  "2807": {
    "id": "2807",
    "label": "skipWhile"
  },
  "2876": {
    "id": "2876",
    "label": "pluck"
  },
  "3747": {
    "id": "3747",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "a6f1"
    ]
  },
  "3847": {
    "id": "3847",
    "label": "expand"
  },
  "3905": {
    "id": "3905",
    "label": "and emit the group as an array",
    "options": [
      "6c0c"
    ]
  },
  "4177": {
    "id": "4177",
    "label": "using a conventional Subject",
    "options": [
      "2169",
      "c50f"
    ]
  },
  "4402": {
    "id": "4402",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "f7f6",
      "fa80"
    ]
  },
  "4408": {
    "id": "4408",
    "label": "based on custom logic",
    "options": [
      "43c0"
    ]
  },
  "4673": {
    "id": "4673",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "cc9f"
    ]
  },
  "4771": {
    "id": "4771",
    "label": "pipe"
  },
  "4863": {
    "id": "4863",
    "label": "debounceTime"
  },
  "4994": {
    "id": "4994",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "8e0e"
    ]
  },
  "5018": {
    "id": "5018",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "4a36"
    ]
  },
  "5574": {
    "id": "5574",
    "label": "I have one existing Observable, and",
    "options": [
      "09c1",
      "0fa9",
      "8c4a",
      "b334",
      "c5f9",
      "7d39",
      "5941",
      "942e",
      "bb48",
      "ce7d",
      "89f3",
      "ecb8",
      "dc05",
      "123e",
      "766e",
      "bec4",
      "d536",
      "162a",
      "081e",
      "2368",
      "9593"
    ]
  },
  "5697": {
    "id": "5697",
    "label": "and convert to a Promise",
    "options": [
      "5ad1"
    ]
  },
  "5709": {
    "id": "5709",
    "label": "first"
  },
  "5941": {
    "id": "5941",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "3747",
      "0253"
    ]
  },
  "6026": {
    "id": "6026",
    "label": "reduce"
  },
  "6535": {
    "id": "6535",
    "label": "from the start of the Observable",
    "options": [
      "9308",
      "421b"
    ]
  },
  "6799": {
    "id": "6799",
    "label": "regularly",
    "options": [
      "36cf"
    ]
  },
  "7115": {
    "id": "7115",
    "label": "and only output the final computed value",
    "options": [
      "6026"
    ]
  },
  "8279": {
    "id": "8279",
    "label": "I want to re-subscribe",
    "options": [
      "80bd",
      "a3ee"
    ]
  },
  "8488": {
    "id": "8488",
    "label": "by emitting the last value in each time window",
    "options": [
      "4994",
      "9aeb"
    ]
  },
  "8864": {
    "id": "8864",
    "label": "delay"
  },
  "9079": {
    "id": "9079",
    "label": "concat"
  },
  "9138": {
    "id": "9138",
    "label": "retry"
  },
  "9308": {
    "id": "9308",
    "label": "based on a given amount",
    "options": [
      "973b"
    ]
  },
  "9438": {
    "id": "9438",
    "label": "observeOn"
  },
  "9593": {
    "id": "9593",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "137f",
      "f802",
      "a0c2"
    ]
  },
  "9731": {
    "id": "9731",
    "label": "race"
  },
  "41d6": {
    "id": "41d6",
    "label": "mapTo"
  },
  "0d69": {
    "id": "0d69",
    "label": "to be a constant value",
    "options": [
      "41d6"
    ]
  },
  "0902": {
    "id": "0902",
    "label": "map"
  },
  "e67b": {
    "id": "e67b",
    "label": "to be a value calculated through a formula",
    "options": [
      "0902"
    ]
  },
  "09c1": {
    "id": "09c1",
    "label": "I want to change each emitted value",
    "options": [
      "0d69",
      "e67b"
    ]
  },
  "0fa9": {
    "id": "0fa9",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "2876"
    ]
  },
  "b38d": {
    "id": "b38d",
    "label": "tap"
  },
  "8c4a": {
    "id": "8c4a",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "b38d"
    ]
  },
  "43c0": {
    "id": "43c0",
    "label": "filter"
  },
  "c420": {
    "id": "c420",
    "label": "and only the first value",
    "options": [
      "5709"
    ]
  },
  "7f7b": {
    "id": "7f7b",
    "label": "take"
  },
  "d63a": {
    "id": "d63a",
    "label": "based on a given amount",
    "options": [
      "7f7b"
    ]
  },
  "f824": {
    "id": "f824",
    "label": "takeWhile"
  },
  "6a86": {
    "id": "6a86",
    "label": "based on custom logic",
    "options": [
      "f824"
    ]
  },
  "ab6f": {
    "id": "ab6f",
    "label": "if they are at the start of the Observable",
    "options": [
      "c420",
      "d63a",
      "6a86"
    ]
  },
  "e30d": {
    "id": "e30d",
    "label": "elementAt"
  },
  "322f": {
    "id": "322f",
    "label": "if they are exactly the n-th emission",
    "options": [
      "e30d"
    ]
  },
  "111e": {
    "id": "111e",
    "label": "last"
  },
  "62a1": {
    "id": "62a1",
    "label": "and only the last value",
    "options": [
      "111e"
    ]
  },
  "1ef4": {
    "id": "1ef4",
    "label": "takeLast"
  },
  "8d53": {
    "id": "8d53",
    "label": "if they are at the end of the Observable",
    "options": [
      "62a1",
      "2091"
    ]
  },
  "89fa": {
    "id": "89fa",
    "label": "takeUntil"
  },
  "61ed": {
    "id": "61ed",
    "label": "until another Observable emits a value",
    "options": [
      "89fa"
    ]
  },
  "b334": {
    "id": "b334",
    "label": "I want to allow some values to pass",
    "options": [
      "4408",
      "ab6f",
      "322f",
      "8d53",
      "61ed"
    ]
  },
  "6a64": {
    "id": "6a64",
    "label": "ignoreElements"
  },
  "3dd8": {
    "id": "3dd8",
    "label": "altogether",
    "options": [
      "6a64"
    ]
  },
  "973b": {
    "id": "973b",
    "label": "skip"
  },
  "421b": {
    "id": "421b",
    "label": "based on custom logic",
    "options": [
      "2807"
    ]
  },
  "32c2": {
    "id": "32c2",
    "label": "skipLast"
  },
  "fbcc": {
    "id": "fbcc",
    "label": "from the end of the Observable",
    "options": [
      "32c2"
    ]
  },
  "a480": {
    "id": "a480",
    "label": "skipUntil"
  },
  "eb12": {
    "id": "eb12",
    "label": "until another Observable emits a value",
    "options": [
      "a480"
    ]
  },
  "23e8": {
    "id": "23e8",
    "label": "distinctUntilChanged"
  },
  "676c": {
    "id": "676c",
    "label": "distinct"
  },
  "90fe": {
    "id": "90fe",
    "label": "emitted some time in the past",
    "options": [
      "676c"
    ]
  },
  "a61d": {
    "id": "a61d",
    "label": "according to value equality",
    "options": [
      "1875",
      "90fe"
    ]
  },
  "fdb7": {
    "id": "fdb7",
    "label": "emitted just before the current value",
    "options": [
      "1557"
    ]
  },
  "15b3": {
    "id": "15b3",
    "label": "according to a key or object property",
    "options": [
      "fdb7"
    ]
  },
  "178f": {
    "id": "178f",
    "label": "that match some previous value",
    "options": [
      "a61d",
      "15b3"
    ]
  },
  "4a36": {
    "id": "4a36",
    "label": "throttle"
  },
  "41f8": {
    "id": "41f8",
    "label": "throttleTime"
  },
  "bc49": {
    "id": "bc49",
    "label": "where time windows are determined by a time duration",
    "options": [
      "41f8"
    ]
  },
  "5c30": {
    "id": "5c30",
    "label": "by emitting the first value in each time window",
    "options": [
      "5018",
      "bc49"
    ]
  },
  "8e0e": {
    "id": "8e0e",
    "label": "audit"
  },
  "cf6c": {
    "id": "cf6c",
    "label": "auditTime"
  },
  "9aeb": {
    "id": "9aeb",
    "label": "where time windows are determined by a time duration",
    "options": [
      "cf6c"
    ]
  },
  "338b": {
    "id": "338b",
    "label": "debounce"
  },
  "ead0": {
    "id": "ead0",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "338b"
    ]
  },
  "248b": {
    "id": "248b",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "4863"
    ]
  },
  "615a": {
    "id": "615a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "ead0",
      "248b"
    ]
  },
  "8a55": {
    "id": "8a55",
    "label": "that occur too frequently",
    "options": [
      "5c30",
      "8488",
      "615a"
    ]
  },
  "c5f9": {
    "id": "c5f9",
    "label": "I want to ignore values",
    "options": [
      "3dd8",
      "6535",
      "fbcc",
      "eb12",
      "178f",
      "8a55"
    ]
  },
  "8b0c": {
    "id": "8b0c",
    "label": "scan"
  },
  "c8ed": {
    "id": "c8ed",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "8b0c"
    ]
  },
  "c0c4": {
    "id": "c0c4",
    "label": "mergeScan"
  },
  "eff6": {
    "id": "eff6",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "c0c4"
    ]
  },
  "7d39": {
    "id": "7d39",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "7115",
      "c8ed",
      "eff6"
    ]
  },
  "a6f1": {
    "id": "a6f1",
    "label": "materialize"
  },
  "79e5": {
    "id": "79e5",
    "label": "timeInterval"
  },
  "0253": {
    "id": "0253",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "79e5"
    ]
  },
  "b195": {
    "id": "b195",
    "label": "I want to throw an error",
    "options": [
      "1517"
    ]
  },
  "00b4": {
    "id": "00b4",
    "label": "timeoutWith"
  },
  "9e84": {
    "id": "9e84",
    "label": "I want to switch to another Observable",
    "options": [
      "00b4"
    ]
  },
  "942e": {
    "id": "942e",
    "label": "after a period of inactivity",
    "options": [
      "b195",
      "9e84"
    ]
  },
  "a398": {
    "id": "a398",
    "label": "single"
  },
  "bb48": {
    "id": "bb48",
    "label": "I want to ensure there is only one value",
    "options": [
      "a398"
    ]
  },
  "ce7d": {
    "id": "ce7d",
    "label": "I want to know how many values it emits",
    "options": [
      "1940"
    ]
  },
  "45df": {
    "id": "45df",
    "label": "startWith"
  },
  "89f3": {
    "id": "89f3",
    "label": "I want to prepend one value",
    "options": [
      "45df"
    ]
  },
  "84e4": {
    "id": "84e4",
    "label": "based on a given amount of time",
    "options": [
      "8864"
    ]
  },
  "34f6": {
    "id": "34f6",
    "label": "delayWhen"
  },
  "96e2": {
    "id": "96e2",
    "label": "based on the emissions of another Observable",
    "options": [
      "34f6"
    ]
  },
  "ecb8": {
    "id": "ecb8",
    "label": "I want to delay the emissions",
    "options": [
      "84e4",
      "96e2"
    ]
  },
  "b6b9": {
    "id": "b6b9",
    "label": "toArray"
  },
  "fc8f": {
    "id": "fc8f",
    "label": "and convert to an array",
    "options": [
      "b6b9"
    ]
  },
  "5ad1": {
    "id": "5ad1",
    "label": "Observable",
    "method": "toPromise"
  },
  "ad98": {
    "id": "ad98",
    "label": "until the Observable completes",
    "options": [
      "fc8f",
      "5697"
    ]
  },
  "8d75": {
    "id": "8d75",
    "label": "pairwise"
  },
  "c64b": {
    "id": "c64b",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "8d75"
    ]
  },
  "346a": {
    "id": "346a",
    "label": "partition"
  },
  "bd15": {
    "id": "bd15",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "346a"
    ]
  },
  "82d3": {
    "id": "82d3",
    "label": "bufferCount"
  },
  "8c7f": {
    "id": "8c7f",
    "label": "and emit the group as an array",
    "options": [
      "82d3"
    ]
  },
  "6d9e": {
    "id": "6d9e",
    "label": "windowCount"
  },
  "8df7": {
    "id": "8df7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6d9e"
    ]
  },
  "6f1e": {
    "id": "6f1e",
    "label": "in batches of a particular size",
    "options": [
      "8c7f",
      "8df7"
    ]
  },
  "d864": {
    "id": "d864",
    "label": "bufferTime"
  },
  "a2f6": {
    "id": "a2f6",
    "label": "and emit the group as an array",
    "options": [
      "d864"
    ]
  },
  "6e41": {
    "id": "6e41",
    "label": "windowTime"
  },
  "b87f": {
    "id": "b87f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6e41"
    ]
  },
  "fc85": {
    "id": "fc85",
    "label": "based on time",
    "options": [
      "a2f6",
      "b87f"
    ]
  },
  "2b91": {
    "id": "2b91",
    "label": "buffer"
  },
  "3b7b": {
    "id": "3b7b",
    "label": "and emit the group as an array",
    "options": [
      "2b91"
    ]
  },
  "b2ca": {
    "id": "b2ca",
    "label": "window"
  },
  "e167": {
    "id": "e167",
    "label": "until another Observable emits",
    "options": [
      "3b7b",
      "2553"
    ]
  },
  "b28c": {
    "id": "b28c",
    "label": "bufferWhen"
  },
  "1ff1": {
    "id": "1ff1",
    "label": "and emit the group as an array",
    "options": [
      "b28c"
    ]
  },
  "641f": {
    "id": "641f",
    "label": "windowWhen"
  },
  "fc6b": {
    "id": "fc6b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "641f"
    ]
  },
  "2cb0": {
    "id": "2cb0",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "1ff1",
      "fc6b"
    ]
  },
  "6c0c": {
    "id": "6c0c",
    "label": "bufferToggle"
  },
  "968d": {
    "id": "968d",
    "label": "windowToggle"
  },
  "9a8f": {
    "id": "9a8f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "968d"
    ]
  },
  "b4d8": {
    "id": "b4d8",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "3905",
      "9a8f"
    ]
  },
  "1ece": {
    "id": "1ece",
    "label": "groupBy"
  },
  "378d": {
    "id": "378d",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "1ece"
    ]
  },
  "dc05": {
    "id": "dc05",
    "label": "I want to group the values",
    "options": [
      "ad98",
      "c64b",
      "bd15",
      "6f1e",
      "fc85",
      "e167",
      "2cb0",
      "b4d8",
      "378d"
    ]
  },
  "eabd": {
    "id": "eabd",
    "label": "mergeMapTo"
  },
  "30cf": {
    "id": "30cf",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "eabd"
    ]
  },
  "035b": {
    "id": "035b",
    "label": "mergeMap"
  },
  "950c": {
    "id": "950c",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "035b"
    ]
  },
  "d94f": {
    "id": "d94f",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "30cf",
      "950c"
    ]
  },
  "adab": {
    "id": "adab",
    "label": "concatMapTo"
  },
  "f7f6": {
    "id": "f7f6",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "adab"
    ]
  },
  "e8f1": {
    "id": "e8f1",
    "label": "concatMap"
  },
  "fa80": {
    "id": "fa80",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e8f1"
    ]
  },
  "ff74": {
    "id": "ff74",
    "label": "switchMapTo"
  },
  "b548": {
    "id": "b548",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "ff74"
    ]
  },
  "bbd3": {
    "id": "bbd3",
    "label": "switchMap"
  },
  "d6ee": {
    "id": "d6ee",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "bbd3"
    ]
  },
  "5de0": {
    "id": "5de0",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "b548",
      "d6ee"
    ]
  },
  "de0f": {
    "id": "de0f",
    "label": "exhaustMap"
  },
  "ccc3": {
    "id": "ccc3",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "de0f"
    ]
  },
  "123e": {
    "id": "123e",
    "label": "I want to start a new Observable for each value",
    "options": [
      "d94f",
      "4402",
      "5de0",
      "ccc3",
      "1490"
    ]
  },
  "766e": {
    "id": "766e",
    "label": "I want to perform custom operations",
    "options": [
      "4771"
    ]
  },
  "9d61": {
    "id": "9d61",
    "label": "share"
  },
  "c50f": {
    "id": "c50f",
    "label": "and start it manually or imperatively",
    "options": [
      "2342"
    ]
  },
  "0759": {
    "id": "0759",
    "label": "publishBehavior"
  },
  "082b": {
    "id": "082b",
    "label": "using a BehaviorSubject",
    "options": [
      "0759"
    ]
  },
  "16f1": {
    "id": "16f1",
    "label": "publishReplay"
  },
  "9a87": {
    "id": "9a87",
    "label": "using a ReplaySubject",
    "options": [
      "16f1"
    ]
  },
  "bfed": {
    "id": "bfed",
    "label": "publishLast"
  },
  "39e8": {
    "id": "39e8",
    "label": "using an AsyncSubject",
    "options": [
      "bfed"
    ]
  },
  "ac26": {
    "id": "ac26",
    "label": "multicast"
  },
  "55f9": {
    "id": "55f9",
    "label": "using a specific subject implementation",
    "options": [
      "ac26"
    ]
  },
  "bec4": {
    "id": "bec4",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "4177",
      "082b",
      "9a87",
      "39e8",
      "55f9"
    ]
  },
  "6fa5": {
    "id": "6fa5",
    "label": "catchError"
  },
  "06d2": {
    "id": "06d2",
    "label": "I want to start a new Observable",
    "options": [
      "6fa5"
    ]
  },
  "80bd": {
    "id": "80bd",
    "label": "immediately",
    "options": [
      "9138"
    ]
  },
  "3e2a": {
    "id": "3e2a",
    "label": "retryWhen"
  },
  "a3ee": {
    "id": "a3ee",
    "label": "when another Observable emits",
    "options": [
      "3e2a"
    ]
  },
  "d536": {
    "id": "d536",
    "label": "when an error occurs",
    "options": [
      "06d2",
      "8279"
    ]
  },
  "a4a2": {
    "id": "a4a2",
    "label": "repeat"
  },
  "3e7c": {
    "id": "3e7c",
    "label": "immediately",
    "options": [
      "a4a2"
    ]
  },
  "73c8": {
    "id": "73c8",
    "label": "repeatWhen"
  },
  "4b4c": {
    "id": "4b4c",
    "label": "when another Observable emits",
    "options": [
      "73c8"
    ]
  },
  "e71e": {
    "id": "e71e",
    "label": "I want to re-subscribe",
    "options": [
      "3e7c",
      "4b4c"
    ]
  },
  "36d6": {
    "id": "36d6",
    "label": "I want to start a new Observable",
    "options": [
      "9079"
    ]
  },
  "162a": {
    "id": "162a",
    "label": "when it completes",
    "options": [
      "e71e",
      "36d6"
    ]
  },
  "0eef": {
    "id": "0eef",
    "label": "finalize"
  },
  "081e": {
    "id": "081e",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "0eef"
    ]
  },
  "cbf3": {
    "id": "cbf3",
    "label": "subscribeOn"
  },
  "fa89": {
    "id": "fa89",
    "label": "that routes calls to subscribe",
    "options": [
      "cbf3"
    ]
  },
  "13a7": {
    "id": "13a7",
    "label": "that routes values to observers",
    "options": [
      "9438"
    ]
  },
  "951e": {
    "id": "951e",
    "label": "race"
  },
  "137f": {
    "id": "137f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "951e"
    ]
  },
  "f9e3": {
    "id": "f9e3",
    "label": "merge"
  },
  "f802": {
    "id": "f802",
    "label": "I want to output the values from either of them",
    "options": [
      "f9e3"
    ]
  },
  "d09b": {
    "id": "d09b",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "2534"
    ]
  },
  "fe73": {
    "id": "fe73",
    "label": "withLatestFrom"
  },
  "d2ad": {
    "id": "d2ad",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "fe73"
    ]
  },
  "d423": {
    "id": "d423",
    "label": "zip"
  },
  "06ff": {
    "id": "06ff",
    "label": "using each source value only once",
    "options": [
      "d423"
    ]
  },
  "a0c2": {
    "id": "a0c2",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "d09b",
      "d2ad",
      "06ff"
    ]
  },
  "4ed3": {
    "id": "4ed3",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "9731"
    ]
  },
  "cc9f": {
    "id": "cc9f",
    "label": "forkJoin"
  },
  "d6bd": {
    "id": "d6bd",
    "label": "merge"
  },
  "a788": {
    "id": "a788",
    "label": "I want to output the values from either of them",
    "options": [
      "d6bd"
    ]
  },
  "ba5c": {
    "id": "ba5c",
    "label": "combineLatest"
  },
  "9dee": {
    "id": "9dee",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ba5c"
    ]
  },
  "b3b4": {
    "id": "b3b4",
    "label": "zip"
  },
  "4a1f": {
    "id": "4a1f",
    "label": "using each source value only once",
    "options": [
      "b3b4"
    ]
  },
  "0ed2": {
    "id": "0ed2",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "9dee",
      "4a1f"
    ]
  },
  "e7a6": {
    "id": "e7a6",
    "label": "concat"
  },
  "c916": {
    "id": "c916",
    "label": "I want to subscribe to each in order",
    "options": [
      "e7a6"
    ]
  },
  "fc62": {
    "id": "fc62",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "4ed3",
      "4673",
      "a788",
      "0ed2",
      "c916"
    ]
  },
  "0dd0": {
    "id": "0dd0",
    "label": "Observable",
    "method": "create"
  },
  "5f73": {
    "id": "5f73",
    "label": "using custom logic",
    "options": [
      "0dd0"
    ]
  },
  "6ce6": {
    "id": "6ce6",
    "label": "using a state machine similar to a for loop",
    "options": [
      "2168"
    ]
  },
  "af4d": {
    "id": "af4d",
    "label": "throwError"
  },
  "836b": {
    "id": "836b",
    "label": "that throws an error",
    "options": [
      "af4d"
    ]
  },
  "18d9": {
    "id": "18d9",
    "label": "EMPTY"
  },
  "63d8": {
    "id": "63d8",
    "label": "that just completes, without emitting values",
    "options": [
      "18d9"
    ]
  },
  "0ba4": {
    "id": "0ba4",
    "label": "NEVER"
  },
  "388f": {
    "id": "388f",
    "label": "that never emits anything",
    "options": [
      "0ba4"
    ]
  },
  "f490": {
    "id": "f490",
    "label": "fromEvent"
  },
  "c1bd": {
    "id": "c1bd",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "f490"
    ]
  },
  "44b6": {
    "id": "44b6",
    "label": "fromEventPattern"
  },
  "85ef": {
    "id": "85ef",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "44b6"
    ]
  },
  "2b51": {
    "id": "2b51",
    "label": "from an existing source of events",
    "options": [
      "c1bd",
      "85ef"
    ]
  },
  "10c8": {
    "id": "10c8",
    "label": "from"
  },
  "3e1d": {
    "id": "3e1d",
    "label": "from a Promise or an event source",
    "options": [
      "10c8"
    ]
  },
  "39c4": {
    "id": "39c4",
    "label": "from"
  },
  "b02a": {
    "id": "b02a",
    "label": "over the values in an array",
    "options": [
      "39c4"
    ]
  },
  "f857": {
    "id": "f857",
    "label": "range"
  },
  "f9cb": {
    "id": "f9cb",
    "label": "over values in a numeric range",
    "options": [
      "f857"
    ]
  },
  "23f8": {
    "id": "23f8",
    "label": "of"
  },
  "feb1": {
    "id": "feb1",
    "label": "over prefined values given as arguments",
    "options": [
      "23f8"
    ]
  },
  "4dce": {
    "id": "4dce",
    "label": "that iterates",
    "options": [
      "b02a",
      "f9cb",
      "feb1"
    ]
  },
  "36cf": {
    "id": "36cf",
    "label": "interval"
  },
  "d378": {
    "id": "d378",
    "label": "timer"
  },
  "4d03": {
    "id": "4d03",
    "label": "with an optional initial delay",
    "options": [
      "d378"
    ]
  },
  "a54b": {
    "id": "a54b",
    "label": "that emits values on a timer",
    "options": [
      "6799",
      "4d03"
    ]
  },
  "54ba": {
    "id": "54ba",
    "label": "defer"
  },
  "d814": {
    "id": "d814",
    "label": "which is built on demand when subscribed",
    "options": [
      "54ba"
    ]
  },
  "a6bd": {
    "id": "a6bd",
    "label": "I want to create a new Observable",
    "options": [
      "5f73",
      "6ce6",
      "836b",
      "63d8",
      "388f",
      "2b51",
      "3e1d",
      "4dce",
      "a54b",
      "d814"
    ]
  },
  "6ddc": {
    "id": "6ddc",
    "label": "bindCallback"
  },
  "f239": {
    "id": "f239",
    "label": "supporting a conventional callback API",
    "options": [
      "6ddc"
    ]
  },
  "6c54": {
    "id": "6c54",
    "label": "bindNodeCallback"
  },
  "d218": {
    "id": "d218",
    "label": "supporting Node.js callback style API",
    "options": [
      "6c54"
    ]
  },
  "91c9": {
    "id": "91c9",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "f239",
      "d218"
    ]
  },
  "6eda": {
    "id": "6eda",
    "label": "I have no Observables yet, and",
    "options": [
      "a6bd",
      "91c9"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "5574",
      "fc62",
      "6eda"
    ]
  }
}