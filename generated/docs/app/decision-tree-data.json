{
  "1278": {
    "id": "1278",
    "label": "toArray"
  },
  "2315": {
    "id": "2315",
    "label": "first"
  },
  "2473": {
    "id": "2473",
    "label": "share"
  },
  "3198": {
    "id": "3198",
    "label": "withLatestFrom"
  },
  "3255": {
    "id": "3255",
    "label": "bufferToggle"
  },
  "3565": {
    "id": "3565",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "6ea9",
      "fbfe"
    ]
  },
  "3597": {
    "id": "3597",
    "label": "auditTime"
  },
  "3700": {
    "id": "3700",
    "label": "bufferTime"
  },
  "4197": {
    "id": "4197",
    "label": "I want to re-subscribe",
    "options": [
      "f277",
      "bc9b"
    ]
  },
  "4220": {
    "id": "4220",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2d5d"
    ]
  },
  "4707": {
    "id": "4707",
    "label": "throwError"
  },
  "5026": {
    "id": "5026",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "6042"
    ]
  },
  "5062": {
    "id": "5062",
    "label": "timeoutWith"
  },
  "5289": {
    "id": "5289",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "87e0"
    ]
  },
  "5504": {
    "id": "5504",
    "label": "single"
  },
  "5732": {
    "id": "5732",
    "label": "in batches of a particular size",
    "options": [
      "5a90",
      "4220"
    ]
  },
  "5930": {
    "id": "5930",
    "label": "to be a value calculated through a formula",
    "options": [
      "e843"
    ]
  },
  "6042": {
    "id": "6042",
    "label": "materialize"
  },
  "6105": {
    "id": "6105",
    "label": "last"
  },
  "6465": {
    "id": "6465",
    "label": "bufferWhen"
  },
  "6547": {
    "id": "6547",
    "label": "pipe"
  },
  "6900": {
    "id": "6900",
    "label": "supporting a conventional callback API",
    "options": [
      "fcfc"
    ]
  },
  "7459": {
    "id": "7459",
    "label": "when it completes",
    "options": [
      "6b3c",
      "4dcb"
    ]
  },
  "7777": {
    "id": "7777",
    "label": "catchError"
  },
  "7833": {
    "id": "7833",
    "label": "using an AsyncSubject",
    "options": [
      "a1cd"
    ]
  },
  "7847": {
    "id": "7847",
    "label": "of"
  },
  "7853": {
    "id": "7853",
    "label": "mergeMapTo"
  },
  "8301": {
    "id": "8301",
    "label": "race"
  },
  "8394": {
    "id": "8394",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "653b",
      "6a44"
    ]
  },
  "8506": {
    "id": "8506",
    "label": "that occur too frequently",
    "options": [
      "9ca1",
      "fc79",
      "d54c"
    ]
  },
  "8713": {
    "id": "8713",
    "label": "timeInterval"
  },
  "9382": {
    "id": "9382",
    "label": "using a specific subject implementation",
    "options": [
      "d0bf"
    ]
  },
  "9398": {
    "id": "9398",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "b3d7"
    ]
  },
  "9593": {
    "id": "9593",
    "label": "based on the emissions of another Observable",
    "options": [
      "6b7a"
    ]
  },
  "9960": {
    "id": "9960",
    "label": "debounceTime"
  },
  "e03c": {
    "id": "e03c",
    "label": "mapTo"
  },
  "2cbe": {
    "id": "2cbe",
    "label": "to be a constant value",
    "options": [
      "e03c"
    ]
  },
  "e843": {
    "id": "e843",
    "label": "map"
  },
  "277d": {
    "id": "277d",
    "label": "I want to change each emitted value",
    "options": [
      "2cbe",
      "5930"
    ]
  },
  "9d37": {
    "id": "9d37",
    "label": "pluck"
  },
  "932c": {
    "id": "932c",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "9d37"
    ]
  },
  "a157": {
    "id": "a157",
    "label": "tap"
  },
  "d7c8": {
    "id": "d7c8",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "a157"
    ]
  },
  "b264": {
    "id": "b264",
    "label": "filter"
  },
  "b7a6": {
    "id": "b7a6",
    "label": "based on custom logic",
    "options": [
      "b264"
    ]
  },
  "a4d1": {
    "id": "a4d1",
    "label": "and only the first value",
    "options": [
      "2315"
    ]
  },
  "e2e1": {
    "id": "e2e1",
    "label": "take"
  },
  "bc43": {
    "id": "bc43",
    "label": "based on a given amount",
    "options": [
      "e2e1"
    ]
  },
  "11e1": {
    "id": "11e1",
    "label": "takeWhile"
  },
  "ea0b": {
    "id": "ea0b",
    "label": "based on custom logic",
    "options": [
      "11e1"
    ]
  },
  "48dd": {
    "id": "48dd",
    "label": "if they are at the start of the Observable",
    "options": [
      "a4d1",
      "bc43",
      "ea0b"
    ]
  },
  "ff38": {
    "id": "ff38",
    "label": "elementAt"
  },
  "3d88": {
    "id": "3d88",
    "label": "if they are exactly the n-th emission",
    "options": [
      "ff38"
    ]
  },
  "d96b": {
    "id": "d96b",
    "label": "and only the last value",
    "options": [
      "6105"
    ]
  },
  "d96d": {
    "id": "d96d",
    "label": "takeLast"
  },
  "1b6a": {
    "id": "1b6a",
    "label": "based on a given amount",
    "options": [
      "d96d"
    ]
  },
  "d708": {
    "id": "d708",
    "label": "if they are at the end of the Observable",
    "options": [
      "d96b",
      "1b6a"
    ]
  },
  "b67b": {
    "id": "b67b",
    "label": "takeUntil"
  },
  "b55f": {
    "id": "b55f",
    "label": "until another Observable emits a value",
    "options": [
      "b67b"
    ]
  },
  "f0b9": {
    "id": "f0b9",
    "label": "I want to allow some values to pass",
    "options": [
      "b7a6",
      "48dd",
      "3d88",
      "d708",
      "b55f"
    ]
  },
  "dd83": {
    "id": "dd83",
    "label": "ignoreElements"
  },
  "760d": {
    "id": "760d",
    "label": "altogether",
    "options": [
      "dd83"
    ]
  },
  "215c": {
    "id": "215c",
    "label": "skip"
  },
  "70a2": {
    "id": "70a2",
    "label": "based on a given amount",
    "options": [
      "215c"
    ]
  },
  "a19f": {
    "id": "a19f",
    "label": "skipWhile"
  },
  "d0e1": {
    "id": "d0e1",
    "label": "based on custom logic",
    "options": [
      "a19f"
    ]
  },
  "d45d": {
    "id": "d45d",
    "label": "from the start of the Observable",
    "options": [
      "70a2",
      "d0e1"
    ]
  },
  "457d": {
    "id": "457d",
    "label": "skipLast"
  },
  "f323": {
    "id": "f323",
    "label": "from the end of the Observable",
    "options": [
      "457d"
    ]
  },
  "da3c": {
    "id": "da3c",
    "label": "skipUntil"
  },
  "dafe": {
    "id": "dafe",
    "label": "until another Observable emits a value",
    "options": [
      "da3c"
    ]
  },
  "cadf": {
    "id": "cadf",
    "label": "distinctUntilChanged"
  },
  "0d22": {
    "id": "0d22",
    "label": "emitted just before the current value",
    "options": [
      "cadf"
    ]
  },
  "bf17": {
    "id": "bf17",
    "label": "distinct"
  },
  "375e": {
    "id": "375e",
    "label": "emitted some time in the past",
    "options": [
      "bf17"
    ]
  },
  "aadc": {
    "id": "aadc",
    "label": "according to value equality",
    "options": [
      "0d22",
      "375e"
    ]
  },
  "a42e": {
    "id": "a42e",
    "label": "distinctUntilKeyChanged"
  },
  "c647": {
    "id": "c647",
    "label": "emitted just before the current value",
    "options": [
      "a42e"
    ]
  },
  "c8fc": {
    "id": "c8fc",
    "label": "according to a key or object property",
    "options": [
      "c647"
    ]
  },
  "a3cf": {
    "id": "a3cf",
    "label": "that match some previous value",
    "options": [
      "aadc",
      "c8fc"
    ]
  },
  "b3d7": {
    "id": "b3d7",
    "label": "throttle"
  },
  "f491": {
    "id": "f491",
    "label": "throttleTime"
  },
  "70dc": {
    "id": "70dc",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f491"
    ]
  },
  "9ca1": {
    "id": "9ca1",
    "label": "by emitting the first value in each time window",
    "options": [
      "9398",
      "70dc"
    ]
  },
  "d71a": {
    "id": "d71a",
    "label": "audit"
  },
  "3a09": {
    "id": "3a09",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d71a"
    ]
  },
  "fe34": {
    "id": "fe34",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3597"
    ]
  },
  "fc79": {
    "id": "fc79",
    "label": "by emitting the last value in each time window",
    "options": [
      "3a09",
      "fe34"
    ]
  },
  "061e": {
    "id": "061e",
    "label": "debounce"
  },
  "8d66": {
    "id": "8d66",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "061e"
    ]
  },
  "b823": {
    "id": "b823",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "9960"
    ]
  },
  "d54c": {
    "id": "d54c",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "8d66",
      "b823"
    ]
  },
  "439d": {
    "id": "439d",
    "label": "I want to ignore values",
    "options": [
      "760d",
      "d45d",
      "f323",
      "dafe",
      "a3cf",
      "8506"
    ]
  },
  "8f44": {
    "id": "8f44",
    "label": "reduce"
  },
  "1cf5": {
    "id": "1cf5",
    "label": "and only output the final computed value",
    "options": [
      "8f44"
    ]
  },
  "d64f": {
    "id": "d64f",
    "label": "scan"
  },
  "90fd": {
    "id": "90fd",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "d64f"
    ]
  },
  "26aa": {
    "id": "26aa",
    "label": "mergeScan"
  },
  "f833": {
    "id": "f833",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "26aa"
    ]
  },
  "e9bf": {
    "id": "e9bf",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "1cf5",
      "90fd",
      "f833"
    ]
  },
  "bf0b": {
    "id": "bf0b",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "8713"
    ]
  },
  "298c": {
    "id": "298c",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "5026",
      "bf0b"
    ]
  },
  "0e70": {
    "id": "0e70",
    "label": "timeout"
  },
  "4eea": {
    "id": "4eea",
    "label": "I want to throw an error",
    "options": [
      "0e70"
    ]
  },
  "50a8": {
    "id": "50a8",
    "label": "I want to switch to another Observable",
    "options": [
      "5062"
    ]
  },
  "d84c": {
    "id": "d84c",
    "label": "after a period of inactivity",
    "options": [
      "4eea",
      "50a8"
    ]
  },
  "42e2": {
    "id": "42e2",
    "label": "I want to ensure there is only one value",
    "options": [
      "5504"
    ]
  },
  "516e": {
    "id": "516e",
    "label": "count"
  },
  "fd71": {
    "id": "fd71",
    "label": "I want to know how many values it emits",
    "options": [
      "516e"
    ]
  },
  "1ead": {
    "id": "1ead",
    "label": "startWith"
  },
  "310b": {
    "id": "310b",
    "label": "I want to prepend one value",
    "options": [
      "1ead"
    ]
  },
  "8de1": {
    "id": "8de1",
    "label": "delay"
  },
  "1b04": {
    "id": "1b04",
    "label": "based on a given amount of time",
    "options": [
      "8de1"
    ]
  },
  "6b7a": {
    "id": "6b7a",
    "label": "delayWhen"
  },
  "2c3e": {
    "id": "2c3e",
    "label": "I want to delay the emissions",
    "options": [
      "1b04",
      "9593"
    ]
  },
  "c1e9": {
    "id": "c1e9",
    "label": "and convert to an array",
    "options": [
      "1278"
    ]
  },
  "be3d": {
    "id": "be3d",
    "label": "Observable",
    "method": "toPromise"
  },
  "0869": {
    "id": "0869",
    "label": "and convert to a Promise",
    "options": [
      "be3d"
    ]
  },
  "d71d": {
    "id": "d71d",
    "label": "until the Observable completes",
    "options": [
      "c1e9",
      "0869"
    ]
  },
  "02e3": {
    "id": "02e3",
    "label": "pairwise"
  },
  "1bf7": {
    "id": "1bf7",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "02e3"
    ]
  },
  "0478": {
    "id": "0478",
    "label": "partition"
  },
  "c471": {
    "id": "c471",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "0478"
    ]
  },
  "61e9": {
    "id": "61e9",
    "label": "bufferCount"
  },
  "5a90": {
    "id": "5a90",
    "label": "and emit the group as an array",
    "options": [
      "61e9"
    ]
  },
  "2d5d": {
    "id": "2d5d",
    "label": "windowCount"
  },
  "81b8": {
    "id": "81b8",
    "label": "and emit the group as an array",
    "options": [
      "3700"
    ]
  },
  "f0ee": {
    "id": "f0ee",
    "label": "windowTime"
  },
  "c858": {
    "id": "c858",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f0ee"
    ]
  },
  "011c": {
    "id": "011c",
    "label": "based on time",
    "options": [
      "81b8",
      "c858"
    ]
  },
  "72a6": {
    "id": "72a6",
    "label": "buffer"
  },
  "326a": {
    "id": "326a",
    "label": "and emit the group as an array",
    "options": [
      "72a6"
    ]
  },
  "d1f3": {
    "id": "d1f3",
    "label": "window"
  },
  "a4b8": {
    "id": "a4b8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d1f3"
    ]
  },
  "cdbd": {
    "id": "cdbd",
    "label": "until another Observable emits",
    "options": [
      "326a",
      "a4b8"
    ]
  },
  "a3ec": {
    "id": "a3ec",
    "label": "and emit the group as an array",
    "options": [
      "6465"
    ]
  },
  "21f1": {
    "id": "21f1",
    "label": "windowWhen"
  },
  "33cc": {
    "id": "33cc",
    "label": "and emit the group as a nested Observable",
    "options": [
      "21f1"
    ]
  },
  "86fa": {
    "id": "86fa",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "a3ec",
      "33cc"
    ]
  },
  "c0cd": {
    "id": "c0cd",
    "label": "and emit the group as an array",
    "options": [
      "3255"
    ]
  },
  "9be8": {
    "id": "9be8",
    "label": "windowToggle"
  },
  "648c": {
    "id": "648c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9be8"
    ]
  },
  "d20f": {
    "id": "d20f",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "c0cd",
      "648c"
    ]
  },
  "66fb": {
    "id": "66fb",
    "label": "groupBy"
  },
  "ca95": {
    "id": "ca95",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "66fb"
    ]
  },
  "d5a4": {
    "id": "d5a4",
    "label": "I want to group the values",
    "options": [
      "d71d",
      "1bf7",
      "c471",
      "5732",
      "011c",
      "cdbd",
      "86fa",
      "d20f",
      "ca95"
    ]
  },
  "d1a7": {
    "id": "d1a7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "7853"
    ]
  },
  "94d1": {
    "id": "94d1",
    "label": "mergeMap"
  },
  "b6d7": {
    "id": "b6d7",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "94d1"
    ]
  },
  "0f28": {
    "id": "0f28",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "d1a7",
      "b6d7"
    ]
  },
  "baba": {
    "id": "baba",
    "label": "concatMapTo"
  },
  "653b": {
    "id": "653b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "baba"
    ]
  },
  "1e6c": {
    "id": "1e6c",
    "label": "concatMap"
  },
  "6a44": {
    "id": "6a44",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1e6c"
    ]
  },
  "3f43": {
    "id": "3f43",
    "label": "switchMapTo"
  },
  "6ea9": {
    "id": "6ea9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3f43"
    ]
  },
  "c89c": {
    "id": "c89c",
    "label": "switchMap"
  },
  "fbfe": {
    "id": "fbfe",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c89c"
    ]
  },
  "a228": {
    "id": "a228",
    "label": "exhaustMap"
  },
  "c42f": {
    "id": "c42f",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "a228"
    ]
  },
  "0f42": {
    "id": "0f42",
    "label": "expand"
  },
  "f824": {
    "id": "f824",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "0f42"
    ]
  },
  "c423": {
    "id": "c423",
    "label": "I want to start a new Observable for each value",
    "options": [
      "0f28",
      "8394",
      "3565",
      "c42f",
      "f824"
    ]
  },
  "0222": {
    "id": "0222",
    "label": "I want to perform custom operations",
    "options": [
      "6547"
    ]
  },
  "5fd0": {
    "id": "5fd0",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "2473"
    ]
  },
  "bd24": {
    "id": "bd24",
    "label": "publish"
  },
  "b586": {
    "id": "b586",
    "label": "and start it manually or imperatively",
    "options": [
      "bd24"
    ]
  },
  "0e45": {
    "id": "0e45",
    "label": "using a conventional Subject",
    "options": [
      "5fd0",
      "b586"
    ]
  },
  "d9a3": {
    "id": "d9a3",
    "label": "publishBehavior"
  },
  "787f": {
    "id": "787f",
    "label": "using a BehaviorSubject",
    "options": [
      "d9a3"
    ]
  },
  "8bd8": {
    "id": "8bd8",
    "label": "publishReplay"
  },
  "75e4": {
    "id": "75e4",
    "label": "using a ReplaySubject",
    "options": [
      "8bd8"
    ]
  },
  "a1cd": {
    "id": "a1cd",
    "label": "publishLast"
  },
  "d0bf": {
    "id": "d0bf",
    "label": "multicast"
  },
  "3e72": {
    "id": "3e72",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "0e45",
      "787f",
      "75e4",
      "7833",
      "9382"
    ]
  },
  "e536": {
    "id": "e536",
    "label": "I want to start a new Observable",
    "options": [
      "7777"
    ]
  },
  "64cc": {
    "id": "64cc",
    "label": "retry"
  },
  "f277": {
    "id": "f277",
    "label": "immediately",
    "options": [
      "64cc"
    ]
  },
  "84e6": {
    "id": "84e6",
    "label": "retryWhen"
  },
  "bc9b": {
    "id": "bc9b",
    "label": "when another Observable emits",
    "options": [
      "84e6"
    ]
  },
  "5f16": {
    "id": "5f16",
    "label": "when an error occurs",
    "options": [
      "e536",
      "4197"
    ]
  },
  "28c7": {
    "id": "28c7",
    "label": "repeat"
  },
  "e756": {
    "id": "e756",
    "label": "immediately",
    "options": [
      "28c7"
    ]
  },
  "5dfb": {
    "id": "5dfb",
    "label": "repeatWhen"
  },
  "d1b0": {
    "id": "d1b0",
    "label": "when another Observable emits",
    "options": [
      "5dfb"
    ]
  },
  "6b3c": {
    "id": "6b3c",
    "label": "I want to re-subscribe",
    "options": [
      "e756",
      "d1b0"
    ]
  },
  "0f6c": {
    "id": "0f6c",
    "label": "concat"
  },
  "4dcb": {
    "id": "4dcb",
    "label": "I want to start a new Observable",
    "options": [
      "0f6c"
    ]
  },
  "d51a": {
    "id": "d51a",
    "label": "finalize"
  },
  "51fa": {
    "id": "51fa",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "d51a"
    ]
  },
  "7e9f": {
    "id": "7e9f",
    "label": "subscribeOn"
  },
  "7d96": {
    "id": "7d96",
    "label": "that routes calls to subscribe",
    "options": [
      "7e9f"
    ]
  },
  "110a": {
    "id": "110a",
    "label": "observeOn"
  },
  "0732": {
    "id": "0732",
    "label": "that routes values to observers",
    "options": [
      "110a"
    ]
  },
  "46b1": {
    "id": "46b1",
    "label": "I want to change the scheduler",
    "options": [
      "7d96",
      "0732"
    ]
  },
  "115e": {
    "id": "115e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "8301"
    ]
  },
  "715f": {
    "id": "715f",
    "label": "merge"
  },
  "15b2": {
    "id": "15b2",
    "label": "I want to output the values from either of them",
    "options": [
      "715f"
    ]
  },
  "5fd8": {
    "id": "5fd8",
    "label": "combineLatest"
  },
  "d69b": {
    "id": "d69b",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5fd8"
    ]
  },
  "35b1": {
    "id": "35b1",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "3198"
    ]
  },
  "39a1": {
    "id": "39a1",
    "label": "zip"
  },
  "11b8": {
    "id": "11b8",
    "label": "using each source value only once",
    "options": [
      "39a1"
    ]
  },
  "5f91": {
    "id": "5f91",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "d69b",
      "35b1",
      "11b8"
    ]
  },
  "fa62": {
    "id": "fa62",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "115e",
      "15b2",
      "5f91"
    ]
  },
  "3d1f": {
    "id": "3d1f",
    "label": "I have one existing Observable, and",
    "options": [
      "277d",
      "932c",
      "d7c8",
      "f0b9",
      "439d",
      "e9bf",
      "298c",
      "d84c",
      "42e2",
      "fd71",
      "310b",
      "2c3e",
      "d5a4",
      "c423",
      "0222",
      "3e72",
      "5f16",
      "7459",
      "51fa",
      "46b1",
      "fa62"
    ]
  },
  "87e0": {
    "id": "87e0",
    "label": "race"
  },
  "f64e": {
    "id": "f64e",
    "label": "forkJoin"
  },
  "e0cc": {
    "id": "e0cc",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "f64e"
    ]
  },
  "b472": {
    "id": "b472",
    "label": "merge"
  },
  "25a9": {
    "id": "25a9",
    "label": "I want to output the values from either of them",
    "options": [
      "b472"
    ]
  },
  "1d82": {
    "id": "1d82",
    "label": "combineLatest"
  },
  "9d03": {
    "id": "9d03",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "1d82"
    ]
  },
  "6c2c": {
    "id": "6c2c",
    "label": "zip"
  },
  "5a85": {
    "id": "5a85",
    "label": "using each source value only once",
    "options": [
      "6c2c"
    ]
  },
  "a988": {
    "id": "a988",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "9d03",
      "5a85"
    ]
  },
  "0697": {
    "id": "0697",
    "label": "concat"
  },
  "2b7f": {
    "id": "2b7f",
    "label": "I want to subscribe to each in order",
    "options": [
      "0697"
    ]
  },
  "301b": {
    "id": "301b",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "5289",
      "e0cc",
      "25a9",
      "a988",
      "2b7f"
    ]
  },
  "504d": {
    "id": "504d",
    "label": "Observable",
    "method": "create"
  },
  "2aeb": {
    "id": "2aeb",
    "label": "using custom logic",
    "options": [
      "504d"
    ]
  },
  "65d6": {
    "id": "65d6",
    "label": "generate"
  },
  "0825": {
    "id": "0825",
    "label": "using a state machine similar to a for loop",
    "options": [
      "65d6"
    ]
  },
  "e41a": {
    "id": "e41a",
    "label": "that throws an error",
    "options": [
      "4707"
    ]
  },
  "e72c": {
    "id": "e72c",
    "label": "EMPTY"
  },
  "ce50": {
    "id": "ce50",
    "label": "that just completes, without emitting values",
    "options": [
      "e72c"
    ]
  },
  "c839": {
    "id": "c839",
    "label": "NEVER"
  },
  "10b2": {
    "id": "10b2",
    "label": "that never emits anything",
    "options": [
      "c839"
    ]
  },
  "e42e": {
    "id": "e42e",
    "label": "fromEvent"
  },
  "c5c9": {
    "id": "c5c9",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "e42e"
    ]
  },
  "0385": {
    "id": "0385",
    "label": "fromEventPattern"
  },
  "51e9": {
    "id": "51e9",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "0385"
    ]
  },
  "87d8": {
    "id": "87d8",
    "label": "from an existing source of events",
    "options": [
      "c5c9",
      "51e9"
    ]
  },
  "b5e1": {
    "id": "b5e1",
    "label": "from"
  },
  "7ab3": {
    "id": "7ab3",
    "label": "from a Promise or an event source",
    "options": [
      "b5e1"
    ]
  },
  "e5e4": {
    "id": "e5e4",
    "label": "from"
  },
  "fcb9": {
    "id": "fcb9",
    "label": "over the values in an array",
    "options": [
      "e5e4"
    ]
  },
  "bc9c": {
    "id": "bc9c",
    "label": "range"
  },
  "3f50": {
    "id": "3f50",
    "label": "over values in a numeric range",
    "options": [
      "bc9c"
    ]
  },
  "95a4": {
    "id": "95a4",
    "label": "over prefined values given as arguments",
    "options": [
      "7847"
    ]
  },
  "16ce": {
    "id": "16ce",
    "label": "that iterates",
    "options": [
      "fcb9",
      "3f50",
      "95a4"
    ]
  },
  "02d8": {
    "id": "02d8",
    "label": "interval"
  },
  "83cc": {
    "id": "83cc",
    "label": "regularly",
    "options": [
      "02d8"
    ]
  },
  "86ae": {
    "id": "86ae",
    "label": "timer"
  },
  "ebe3": {
    "id": "ebe3",
    "label": "with an optional initial delay",
    "options": [
      "86ae"
    ]
  },
  "528a": {
    "id": "528a",
    "label": "that emits values on a timer",
    "options": [
      "83cc",
      "ebe3"
    ]
  },
  "fce9": {
    "id": "fce9",
    "label": "defer"
  },
  "a817": {
    "id": "a817",
    "label": "which is built on demand when subscribed",
    "options": [
      "fce9"
    ]
  },
  "724a": {
    "id": "724a",
    "label": "I want to create a new Observable",
    "options": [
      "2aeb",
      "0825",
      "e41a",
      "ce50",
      "10b2",
      "87d8",
      "7ab3",
      "16ce",
      "528a",
      "a817"
    ]
  },
  "fcfc": {
    "id": "fcfc",
    "label": "bindCallback"
  },
  "c088": {
    "id": "c088",
    "label": "bindNodeCallback"
  },
  "0e25": {
    "id": "0e25",
    "label": "supporting Node.js callback style API",
    "options": [
      "c088"
    ]
  },
  "2ac0": {
    "id": "2ac0",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "6900",
      "0e25"
    ]
  },
  "0016": {
    "id": "0016",
    "label": "I have no Observables yet, and",
    "options": [
      "724a",
      "2ac0"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "3d1f",
      "301b",
      "0016"
    ]
  }
}