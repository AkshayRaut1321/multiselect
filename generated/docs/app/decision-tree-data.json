{
  "1276": {
    "id": "1276",
    "label": "I have no Observables yet, and",
    "options": [
      "cd95",
      "f090"
    ]
  },
  "1332": {
    "id": "1332",
    "label": "single"
  },
  "1413": {
    "id": "1413",
    "label": "and convert to an array",
    "options": [
      "4441"
    ]
  },
  "1415": {
    "id": "1415",
    "label": "distinctUntilChanged"
  },
  "1580": {
    "id": "1580",
    "label": "delayWhen"
  },
  "1637": {
    "id": "1637",
    "label": "and emit the group as a nested Observable",
    "options": [
      "a1aa"
    ]
  },
  "1801": {
    "id": "1801",
    "label": "in batches of a particular size",
    "options": [
      "eb9c",
      "6120"
    ]
  },
  "1857": {
    "id": "1857",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "12e6"
    ]
  },
  "2083": {
    "id": "2083",
    "label": "until another Observable emits a value",
    "options": [
      "2d44"
    ]
  },
  "2224": {
    "id": "2224",
    "label": "by emitting the last value in each time window",
    "options": [
      "923d",
      "ddc9"
    ]
  },
  "2532": {
    "id": "2532",
    "label": "until another Observable emits",
    "options": [
      "7a8e",
      "b2c6"
    ]
  },
  "3220": {
    "id": "3220",
    "label": "finalize"
  },
  "3333": {
    "id": "3333",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "55cb"
    ]
  },
  "3628": {
    "id": "3628",
    "label": "that just completes, without emitting values",
    "options": [
      "af74"
    ]
  },
  "3855": {
    "id": "3855",
    "label": "I have one existing Observable, and",
    "options": [
      "681c",
      "9361",
      "3b24",
      "45a7",
      "f3c8",
      "0198",
      "d351",
      "a9f1",
      "4940",
      "6057",
      "5725",
      "3a3e",
      "1e23",
      "82d4",
      "6878",
      "d739",
      "5011",
      "10bf",
      "86c6",
      "615e",
      "8853"
    ]
  },
  "3895": {
    "id": "3895",
    "label": "publishReplay"
  },
  "3898": {
    "id": "3898",
    "label": "withLatestFrom"
  },
  "4034": {
    "id": "4034",
    "label": "pluck"
  },
  "4216": {
    "id": "4216",
    "label": "bufferCount"
  },
  "4441": {
    "id": "4441",
    "label": "toArray"
  },
  "4904": {
    "id": "4904",
    "label": "publishBehavior"
  },
  "4940": {
    "id": "4940",
    "label": "I want to ensure there is only one value",
    "options": [
      "1332"
    ]
  },
  "5011": {
    "id": "5011",
    "label": "when an error occurs",
    "options": [
      "8b15",
      "0085"
    ]
  },
  "5240": {
    "id": "5240",
    "label": "and only output the final computed value",
    "options": [
      "341d"
    ]
  },
  "5547": {
    "id": "5547",
    "label": "using each source value only once",
    "options": [
      "971f"
    ]
  },
  "5725": {
    "id": "5725",
    "label": "I want to prepend one value",
    "options": [
      "0e6c"
    ]
  },
  "5890": {
    "id": "5890",
    "label": "distinct"
  },
  "6057": {
    "id": "6057",
    "label": "I want to know how many values it emits",
    "options": [
      "7add"
    ]
  },
  "6120": {
    "id": "6120",
    "label": "and emit the group as a nested Observable",
    "options": [
      "51b2"
    ]
  },
  "6469": {
    "id": "6469",
    "label": "concatMapTo"
  },
  "6552": {
    "id": "6552",
    "label": "based on the emissions of another Observable",
    "options": [
      "1580"
    ]
  },
  "6705": {
    "id": "6705",
    "label": "bindNodeCallback"
  },
  "6878": {
    "id": "6878",
    "label": "I want to perform custom operations",
    "options": [
      "8cd2"
    ]
  },
  "7496": {
    "id": "7496",
    "label": "based on custom logic",
    "options": [
      "b6af"
    ]
  },
  "7640": {
    "id": "7640",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "034b",
      "5547"
    ]
  },
  "7876": {
    "id": "7876",
    "label": "based on a given amount",
    "options": [
      "fccf"
    ]
  },
  "8580": {
    "id": "8580",
    "label": "timeInterval"
  },
  "8827": {
    "id": "8827",
    "label": "if they are exactly the n-th emission",
    "options": [
      "8909"
    ]
  },
  "8853": {
    "id": "8853",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "a63f",
      "a3ea",
      "d7d3"
    ]
  },
  "8909": {
    "id": "8909",
    "label": "elementAt"
  },
  "8999": {
    "id": "8999",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "b232",
      "1637"
    ]
  },
  "9361": {
    "id": "9361",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "4034"
    ]
  },
  "9570": {
    "id": "9570",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "5a96",
      "d62d"
    ]
  },
  "9869": {
    "id": "9869",
    "label": "subscribeOn"
  },
  "2fee": {
    "id": "2fee",
    "label": "mapTo"
  },
  "e4d7": {
    "id": "e4d7",
    "label": "to be a constant value",
    "options": [
      "2fee"
    ]
  },
  "36f5": {
    "id": "36f5",
    "label": "map"
  },
  "8b27": {
    "id": "8b27",
    "label": "to be a value calculated through a formula",
    "options": [
      "36f5"
    ]
  },
  "681c": {
    "id": "681c",
    "label": "I want to change each emitted value",
    "options": [
      "e4d7",
      "8b27"
    ]
  },
  "ec6a": {
    "id": "ec6a",
    "label": "tap"
  },
  "3b24": {
    "id": "3b24",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "ec6a"
    ]
  },
  "15d1": {
    "id": "15d1",
    "label": "filter"
  },
  "bd97": {
    "id": "bd97",
    "label": "based on custom logic",
    "options": [
      "15d1"
    ]
  },
  "17b4": {
    "id": "17b4",
    "label": "first"
  },
  "fe57": {
    "id": "fe57",
    "label": "and only the first value",
    "options": [
      "17b4"
    ]
  },
  "0c82": {
    "id": "0c82",
    "label": "take"
  },
  "336a": {
    "id": "336a",
    "label": "based on a given amount",
    "options": [
      "0c82"
    ]
  },
  "b6af": {
    "id": "b6af",
    "label": "takeWhile"
  },
  "84ee": {
    "id": "84ee",
    "label": "if they are at the start of the Observable",
    "options": [
      "fe57",
      "336a",
      "7496"
    ]
  },
  "1ec1": {
    "id": "1ec1",
    "label": "last"
  },
  "f6e7": {
    "id": "f6e7",
    "label": "and only the last value",
    "options": [
      "1ec1"
    ]
  },
  "18eb": {
    "id": "18eb",
    "label": "takeLast"
  },
  "07e3": {
    "id": "07e3",
    "label": "based on a given amount",
    "options": [
      "18eb"
    ]
  },
  "516e": {
    "id": "516e",
    "label": "if they are at the end of the Observable",
    "options": [
      "f6e7",
      "07e3"
    ]
  },
  "2d44": {
    "id": "2d44",
    "label": "takeUntil"
  },
  "45a7": {
    "id": "45a7",
    "label": "I want to allow some values to pass",
    "options": [
      "bd97",
      "84ee",
      "8827",
      "516e",
      "2083"
    ]
  },
  "1f6d": {
    "id": "1f6d",
    "label": "ignoreElements"
  },
  "39a1": {
    "id": "39a1",
    "label": "altogether",
    "options": [
      "1f6d"
    ]
  },
  "fccf": {
    "id": "fccf",
    "label": "skip"
  },
  "0267": {
    "id": "0267",
    "label": "skipWhile"
  },
  "67b3": {
    "id": "67b3",
    "label": "based on custom logic",
    "options": [
      "0267"
    ]
  },
  "e98d": {
    "id": "e98d",
    "label": "from the start of the Observable",
    "options": [
      "7876",
      "67b3"
    ]
  },
  "212a": {
    "id": "212a",
    "label": "skipLast"
  },
  "00f4": {
    "id": "00f4",
    "label": "from the end of the Observable",
    "options": [
      "212a"
    ]
  },
  "f375": {
    "id": "f375",
    "label": "skipUntil"
  },
  "0f6a": {
    "id": "0f6a",
    "label": "until another Observable emits a value",
    "options": [
      "f375"
    ]
  },
  "d1c8": {
    "id": "d1c8",
    "label": "emitted just before the current value",
    "options": [
      "1415"
    ]
  },
  "cf87": {
    "id": "cf87",
    "label": "emitted some time in the past",
    "options": [
      "5890"
    ]
  },
  "ff46": {
    "id": "ff46",
    "label": "according to value equality",
    "options": [
      "d1c8",
      "cf87"
    ]
  },
  "56ac": {
    "id": "56ac",
    "label": "distinctUntilKeyChanged"
  },
  "5cdf": {
    "id": "5cdf",
    "label": "emitted just before the current value",
    "options": [
      "56ac"
    ]
  },
  "c2c8": {
    "id": "c2c8",
    "label": "according to a key or object property",
    "options": [
      "5cdf"
    ]
  },
  "7feb": {
    "id": "7feb",
    "label": "that match some previous value",
    "options": [
      "ff46",
      "c2c8"
    ]
  },
  "56e0": {
    "id": "56e0",
    "label": "throttle"
  },
  "3f89": {
    "id": "3f89",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "56e0"
    ]
  },
  "1ad4": {
    "id": "1ad4",
    "label": "throttleTime"
  },
  "d54b": {
    "id": "d54b",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1ad4"
    ]
  },
  "a79d": {
    "id": "a79d",
    "label": "by emitting the first value in each time window",
    "options": [
      "3f89",
      "d54b"
    ]
  },
  "8b60": {
    "id": "8b60",
    "label": "audit"
  },
  "923d": {
    "id": "923d",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "8b60"
    ]
  },
  "84cd": {
    "id": "84cd",
    "label": "auditTime"
  },
  "ddc9": {
    "id": "ddc9",
    "label": "where time windows are determined by a time duration",
    "options": [
      "84cd"
    ]
  },
  "350c": {
    "id": "350c",
    "label": "debounce"
  },
  "e6c7": {
    "id": "e6c7",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "350c"
    ]
  },
  "12e6": {
    "id": "12e6",
    "label": "debounceTime"
  },
  "965e": {
    "id": "965e",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "e6c7",
      "1857"
    ]
  },
  "774b": {
    "id": "774b",
    "label": "that occur too frequently",
    "options": [
      "a79d",
      "2224",
      "965e"
    ]
  },
  "f3c8": {
    "id": "f3c8",
    "label": "I want to ignore values",
    "options": [
      "39a1",
      "e98d",
      "00f4",
      "0f6a",
      "7feb",
      "774b"
    ]
  },
  "341d": {
    "id": "341d",
    "label": "reduce"
  },
  "c11d": {
    "id": "c11d",
    "label": "scan"
  },
  "c725": {
    "id": "c725",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "c11d"
    ]
  },
  "0ca7": {
    "id": "0ca7",
    "label": "mergeScan"
  },
  "3b42": {
    "id": "3b42",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "0ca7"
    ]
  },
  "0198": {
    "id": "0198",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "5240",
      "c725",
      "3b42"
    ]
  },
  "245f": {
    "id": "245f",
    "label": "materialize"
  },
  "f5b9": {
    "id": "f5b9",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "245f"
    ]
  },
  "12b6": {
    "id": "12b6",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "8580"
    ]
  },
  "d351": {
    "id": "d351",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "f5b9",
      "12b6"
    ]
  },
  "a27b": {
    "id": "a27b",
    "label": "timeout"
  },
  "7f2b": {
    "id": "7f2b",
    "label": "I want to throw an error",
    "options": [
      "a27b"
    ]
  },
  "cb8d": {
    "id": "cb8d",
    "label": "timeoutWith"
  },
  "8ade": {
    "id": "8ade",
    "label": "I want to switch to another Observable",
    "options": [
      "cb8d"
    ]
  },
  "a9f1": {
    "id": "a9f1",
    "label": "after a period of inactivity",
    "options": [
      "7f2b",
      "8ade"
    ]
  },
  "7add": {
    "id": "7add",
    "label": "count"
  },
  "0e6c": {
    "id": "0e6c",
    "label": "startWith"
  },
  "bdc0": {
    "id": "bdc0",
    "label": "delay"
  },
  "a728": {
    "id": "a728",
    "label": "based on a given amount of time",
    "options": [
      "bdc0"
    ]
  },
  "3a3e": {
    "id": "3a3e",
    "label": "I want to delay the emissions",
    "options": [
      "a728",
      "6552"
    ]
  },
  "a31e": {
    "id": "a31e",
    "label": "Observable",
    "method": "toPromise"
  },
  "fb38": {
    "id": "fb38",
    "label": "and convert to a Promise",
    "options": [
      "a31e"
    ]
  },
  "868d": {
    "id": "868d",
    "label": "until the Observable completes",
    "options": [
      "1413",
      "fb38"
    ]
  },
  "9f46": {
    "id": "9f46",
    "label": "pairwise"
  },
  "fa7e": {
    "id": "fa7e",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "9f46"
    ]
  },
  "5bdb": {
    "id": "5bdb",
    "label": "partition"
  },
  "b259": {
    "id": "b259",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "5bdb"
    ]
  },
  "eb9c": {
    "id": "eb9c",
    "label": "and emit the group as an array",
    "options": [
      "4216"
    ]
  },
  "51b2": {
    "id": "51b2",
    "label": "windowCount"
  },
  "b7e3": {
    "id": "b7e3",
    "label": "bufferTime"
  },
  "73bf": {
    "id": "73bf",
    "label": "and emit the group as an array",
    "options": [
      "b7e3"
    ]
  },
  "d004": {
    "id": "d004",
    "label": "windowTime"
  },
  "96d0": {
    "id": "96d0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d004"
    ]
  },
  "242c": {
    "id": "242c",
    "label": "based on time",
    "options": [
      "73bf",
      "96d0"
    ]
  },
  "4b53": {
    "id": "4b53",
    "label": "buffer"
  },
  "7a8e": {
    "id": "7a8e",
    "label": "and emit the group as an array",
    "options": [
      "4b53"
    ]
  },
  "09ea": {
    "id": "09ea",
    "label": "window"
  },
  "b2c6": {
    "id": "b2c6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "09ea"
    ]
  },
  "f0e3": {
    "id": "f0e3",
    "label": "bufferWhen"
  },
  "b275": {
    "id": "b275",
    "label": "and emit the group as an array",
    "options": [
      "f0e3"
    ]
  },
  "e4b7": {
    "id": "e4b7",
    "label": "windowWhen"
  },
  "827d": {
    "id": "827d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e4b7"
    ]
  },
  "fb57": {
    "id": "fb57",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "b275",
      "827d"
    ]
  },
  "295e": {
    "id": "295e",
    "label": "bufferToggle"
  },
  "b232": {
    "id": "b232",
    "label": "and emit the group as an array",
    "options": [
      "295e"
    ]
  },
  "a1aa": {
    "id": "a1aa",
    "label": "windowToggle"
  },
  "d132": {
    "id": "d132",
    "label": "groupBy"
  },
  "7d98": {
    "id": "7d98",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "d132"
    ]
  },
  "1e23": {
    "id": "1e23",
    "label": "I want to group the values",
    "options": [
      "868d",
      "fa7e",
      "b259",
      "1801",
      "242c",
      "2532",
      "fb57",
      "8999",
      "7d98"
    ]
  },
  "55cb": {
    "id": "55cb",
    "label": "mergeMapTo"
  },
  "a7e5": {
    "id": "a7e5",
    "label": "mergeMap"
  },
  "319b": {
    "id": "319b",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a7e5"
    ]
  },
  "4d9c": {
    "id": "4d9c",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3333",
      "319b"
    ]
  },
  "5a96": {
    "id": "5a96",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6469"
    ]
  },
  "66fc": {
    "id": "66fc",
    "label": "concatMap"
  },
  "d62d": {
    "id": "d62d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "66fc"
    ]
  },
  "e0ea": {
    "id": "e0ea",
    "label": "switchMapTo"
  },
  "bed3": {
    "id": "bed3",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e0ea"
    ]
  },
  "55da": {
    "id": "55da",
    "label": "switchMap"
  },
  "b0e6": {
    "id": "b0e6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "55da"
    ]
  },
  "b3e0": {
    "id": "b3e0",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "bed3",
      "b0e6"
    ]
  },
  "faf2": {
    "id": "faf2",
    "label": "exhaustMap"
  },
  "bbd5": {
    "id": "bbd5",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "faf2"
    ]
  },
  "9e99": {
    "id": "9e99",
    "label": "expand"
  },
  "b01c": {
    "id": "b01c",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "9e99"
    ]
  },
  "82d4": {
    "id": "82d4",
    "label": "I want to start a new Observable for each value",
    "options": [
      "4d9c",
      "9570",
      "b3e0",
      "bbd5",
      "b01c"
    ]
  },
  "8cd2": {
    "id": "8cd2",
    "label": "pipe"
  },
  "d60f": {
    "id": "d60f",
    "label": "share"
  },
  "1d61": {
    "id": "1d61",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "d60f"
    ]
  },
  "1ec2": {
    "id": "1ec2",
    "label": "publish"
  },
  "a59a": {
    "id": "a59a",
    "label": "and start it manually or imperatively",
    "options": [
      "1ec2"
    ]
  },
  "4e47": {
    "id": "4e47",
    "label": "using a conventional Subject",
    "options": [
      "1d61",
      "a59a"
    ]
  },
  "f574": {
    "id": "f574",
    "label": "using a BehaviorSubject",
    "options": [
      "4904"
    ]
  },
  "ddf8": {
    "id": "ddf8",
    "label": "using a ReplaySubject",
    "options": [
      "3895"
    ]
  },
  "fb81": {
    "id": "fb81",
    "label": "publishLast"
  },
  "f0c1": {
    "id": "f0c1",
    "label": "using an AsyncSubject",
    "options": [
      "fb81"
    ]
  },
  "655b": {
    "id": "655b",
    "label": "multicast"
  },
  "380b": {
    "id": "380b",
    "label": "using a specific subject implementation",
    "options": [
      "655b"
    ]
  },
  "d739": {
    "id": "d739",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "4e47",
      "f574",
      "ddf8",
      "f0c1",
      "380b"
    ]
  },
  "b6f9": {
    "id": "b6f9",
    "label": "catchError"
  },
  "8b15": {
    "id": "8b15",
    "label": "I want to start a new Observable",
    "options": [
      "b6f9"
    ]
  },
  "41c3": {
    "id": "41c3",
    "label": "retry"
  },
  "e4aa": {
    "id": "e4aa",
    "label": "immediately",
    "options": [
      "41c3"
    ]
  },
  "01ea": {
    "id": "01ea",
    "label": "retryWhen"
  },
  "edbf": {
    "id": "edbf",
    "label": "when another Observable emits",
    "options": [
      "01ea"
    ]
  },
  "0085": {
    "id": "0085",
    "label": "I want to re-subscribe",
    "options": [
      "e4aa",
      "edbf"
    ]
  },
  "4db3": {
    "id": "4db3",
    "label": "repeat"
  },
  "75ab": {
    "id": "75ab",
    "label": "immediately",
    "options": [
      "4db3"
    ]
  },
  "0004": {
    "id": "0004",
    "label": "repeatWhen"
  },
  "19fe": {
    "id": "19fe",
    "label": "when another Observable emits",
    "options": [
      "0004"
    ]
  },
  "e38a": {
    "id": "e38a",
    "label": "I want to re-subscribe",
    "options": [
      "75ab",
      "19fe"
    ]
  },
  "07e4": {
    "id": "07e4",
    "label": "concat"
  },
  "102a": {
    "id": "102a",
    "label": "I want to start a new Observable",
    "options": [
      "07e4"
    ]
  },
  "10bf": {
    "id": "10bf",
    "label": "when it completes",
    "options": [
      "e38a",
      "102a"
    ]
  },
  "86c6": {
    "id": "86c6",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "3220"
    ]
  },
  "88b8": {
    "id": "88b8",
    "label": "that routes calls to subscribe",
    "options": [
      "9869"
    ]
  },
  "15d6": {
    "id": "15d6",
    "label": "observeOn"
  },
  "afac": {
    "id": "afac",
    "label": "that routes values to observers",
    "options": [
      "15d6"
    ]
  },
  "615e": {
    "id": "615e",
    "label": "I want to change the scheduler",
    "options": [
      "88b8",
      "afac"
    ]
  },
  "c874": {
    "id": "c874",
    "label": "race"
  },
  "a63f": {
    "id": "a63f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "c874"
    ]
  },
  "523b": {
    "id": "523b",
    "label": "merge"
  },
  "a3ea": {
    "id": "a3ea",
    "label": "I want to output the values from either of them",
    "options": [
      "523b"
    ]
  },
  "c296": {
    "id": "c296",
    "label": "combineLatest"
  },
  "c030": {
    "id": "c030",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "c296"
    ]
  },
  "243b": {
    "id": "243b",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "3898"
    ]
  },
  "eae9": {
    "id": "eae9",
    "label": "zip"
  },
  "b2d8": {
    "id": "b2d8",
    "label": "using each source value only once",
    "options": [
      "eae9"
    ]
  },
  "d7d3": {
    "id": "d7d3",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "c030",
      "243b",
      "b2d8"
    ]
  },
  "a812": {
    "id": "a812",
    "label": "race"
  },
  "9fa4": {
    "id": "9fa4",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a812"
    ]
  },
  "cfb1": {
    "id": "cfb1",
    "label": "forkJoin"
  },
  "e48a": {
    "id": "e48a",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "cfb1"
    ]
  },
  "a149": {
    "id": "a149",
    "label": "merge"
  },
  "e068": {
    "id": "e068",
    "label": "I want to output the values from either of them",
    "options": [
      "a149"
    ]
  },
  "9b97": {
    "id": "9b97",
    "label": "combineLatest"
  },
  "034b": {
    "id": "034b",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "9b97"
    ]
  },
  "971f": {
    "id": "971f",
    "label": "zip"
  },
  "557e": {
    "id": "557e",
    "label": "concat"
  },
  "f03e": {
    "id": "f03e",
    "label": "I want to subscribe to each in order",
    "options": [
      "557e"
    ]
  },
  "dd7e": {
    "id": "dd7e",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "9fa4",
      "e48a",
      "e068",
      "7640",
      "f03e"
    ]
  },
  "0280": {
    "id": "0280",
    "label": "Observable",
    "method": "create"
  },
  "67bb": {
    "id": "67bb",
    "label": "using custom logic",
    "options": [
      "0280"
    ]
  },
  "34da": {
    "id": "34da",
    "label": "generate"
  },
  "42e1": {
    "id": "42e1",
    "label": "using a state machine similar to a for loop",
    "options": [
      "34da"
    ]
  },
  "ff16": {
    "id": "ff16",
    "label": "throwError"
  },
  "7cb9": {
    "id": "7cb9",
    "label": "that throws an error",
    "options": [
      "ff16"
    ]
  },
  "af74": {
    "id": "af74",
    "label": "EMPTY"
  },
  "8f3e": {
    "id": "8f3e",
    "label": "NEVER"
  },
  "b188": {
    "id": "b188",
    "label": "that never emits anything",
    "options": [
      "8f3e"
    ]
  },
  "bc71": {
    "id": "bc71",
    "label": "fromEvent"
  },
  "b4a7": {
    "id": "b4a7",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "bc71"
    ]
  },
  "4be8": {
    "id": "4be8",
    "label": "fromEventPattern"
  },
  "468a": {
    "id": "468a",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "4be8"
    ]
  },
  "b917": {
    "id": "b917",
    "label": "from an existing source of events",
    "options": [
      "b4a7",
      "468a"
    ]
  },
  "042c": {
    "id": "042c",
    "label": "from"
  },
  "15b9": {
    "id": "15b9",
    "label": "from a Promise or an event source",
    "options": [
      "042c"
    ]
  },
  "c48f": {
    "id": "c48f",
    "label": "from"
  },
  "d603": {
    "id": "d603",
    "label": "over the values in an array",
    "options": [
      "c48f"
    ]
  },
  "c484": {
    "id": "c484",
    "label": "range"
  },
  "8f08": {
    "id": "8f08",
    "label": "over values in a numeric range",
    "options": [
      "c484"
    ]
  },
  "e761": {
    "id": "e761",
    "label": "of"
  },
  "762f": {
    "id": "762f",
    "label": "over prefined values given as arguments",
    "options": [
      "e761"
    ]
  },
  "7e24": {
    "id": "7e24",
    "label": "that iterates",
    "options": [
      "d603",
      "8f08",
      "762f"
    ]
  },
  "4aa9": {
    "id": "4aa9",
    "label": "interval"
  },
  "f6b0": {
    "id": "f6b0",
    "label": "regularly",
    "options": [
      "4aa9"
    ]
  },
  "78d4": {
    "id": "78d4",
    "label": "timer"
  },
  "4e10": {
    "id": "4e10",
    "label": "with an optional initial delay",
    "options": [
      "78d4"
    ]
  },
  "8dec": {
    "id": "8dec",
    "label": "that emits values on a timer",
    "options": [
      "f6b0",
      "4e10"
    ]
  },
  "72b3": {
    "id": "72b3",
    "label": "defer"
  },
  "2f83": {
    "id": "2f83",
    "label": "which is built on demand when subscribed",
    "options": [
      "72b3"
    ]
  },
  "cd95": {
    "id": "cd95",
    "label": "I want to create a new Observable",
    "options": [
      "67bb",
      "42e1",
      "7cb9",
      "3628",
      "b188",
      "b917",
      "15b9",
      "7e24",
      "8dec",
      "2f83"
    ]
  },
  "2b10": {
    "id": "2b10",
    "label": "bindCallback"
  },
  "75a0": {
    "id": "75a0",
    "label": "supporting a conventional callback API",
    "options": [
      "2b10"
    ]
  },
  "11ac": {
    "id": "11ac",
    "label": "supporting Node.js callback style API",
    "options": [
      "6705"
    ]
  },
  "f090": {
    "id": "f090",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "75a0",
      "11ac"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "3855",
      "dd7e",
      "1276"
    ]
  }
}