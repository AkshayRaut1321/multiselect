{
  "1038": {
    "id": "1038",
    "label": "and emit the group as a nested Observable",
    "options": [
      "142d"
    ]
  },
  "1055": {
    "id": "1055",
    "label": "bufferCount"
  },
  "1591": {
    "id": "1591",
    "label": "publishLast"
  },
  "1600": {
    "id": "1600",
    "label": "zip"
  },
  "1904": {
    "id": "1904",
    "label": "and emit the group as an array",
    "options": [
      "9656"
    ]
  },
  "2186": {
    "id": "2186",
    "label": "auditTime"
  },
  "2269": {
    "id": "2269",
    "label": "delayWhen"
  },
  "2334": {
    "id": "2334",
    "label": "that just completes, without emitting values",
    "options": [
      "44a3"
    ]
  },
  "2404": {
    "id": "2404",
    "label": "based on custom logic",
    "options": [
      "1f2a"
    ]
  },
  "2499": {
    "id": "2499",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "68f9"
    ]
  },
  "2703": {
    "id": "2703",
    "label": "bindCallback"
  },
  "3826": {
    "id": "3826",
    "label": "I want to group the values",
    "options": [
      "088f",
      "a949",
      "a500",
      "6ff3",
      "02f8",
      "dd19",
      "d90f",
      "9ecc",
      "74fa"
    ]
  },
  "5428": {
    "id": "5428",
    "label": "zip"
  },
  "5628": {
    "id": "5628",
    "label": "take"
  },
  "6245": {
    "id": "6245",
    "label": "using each source value only once",
    "options": [
      "5428"
    ]
  },
  "6638": {
    "id": "6638",
    "label": "pairwise"
  },
  "7152": {
    "id": "7152",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "c911"
    ]
  },
  "7866": {
    "id": "7866",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6a94"
    ]
  },
  "7950": {
    "id": "7950",
    "label": "I want to start a new Observable for each value",
    "options": [
      "ed9c",
      "9423",
      "727f",
      "f24d",
      "0baf"
    ]
  },
  "8172": {
    "id": "8172",
    "label": "using an AsyncSubject",
    "options": [
      "1591"
    ]
  },
  "8227": {
    "id": "8227",
    "label": "and emit the group as an array",
    "options": [
      "b6c9"
    ]
  },
  "8847": {
    "id": "8847",
    "label": "I want to ensure there is only one value",
    "options": [
      "f58f"
    ]
  },
  "9055": {
    "id": "9055",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4bf2"
    ]
  },
  "9167": {
    "id": "9167",
    "label": "mergeMapTo"
  },
  "9423": {
    "id": "9423",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "7866",
      "bc8d"
    ]
  },
  "9459": {
    "id": "9459",
    "label": "multicast"
  },
  "9492": {
    "id": "9492",
    "label": "buffer"
  },
  "9654": {
    "id": "9654",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "6cba"
    ]
  },
  "9656": {
    "id": "9656",
    "label": "bufferTime"
  },
  "9668": {
    "id": "9668",
    "label": "that routes calls to subscribe",
    "options": [
      "9aec"
    ]
  },
  "32c4": {
    "id": "32c4",
    "label": "mapTo"
  },
  "9f1b": {
    "id": "9f1b",
    "label": "to be a constant value",
    "options": [
      "32c4"
    ]
  },
  "cba2": {
    "id": "cba2",
    "label": "map"
  },
  "09b4": {
    "id": "09b4",
    "label": "to be a value calculated through a formula",
    "options": [
      "cba2"
    ]
  },
  "2be7": {
    "id": "2be7",
    "label": "I want to change each emitted value",
    "options": [
      "9f1b",
      "09b4"
    ]
  },
  "3ac3": {
    "id": "3ac3",
    "label": "pluck"
  },
  "35c9": {
    "id": "35c9",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "3ac3"
    ]
  },
  "ecba": {
    "id": "ecba",
    "label": "tap"
  },
  "00ed": {
    "id": "00ed",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "ecba"
    ]
  },
  "5fa5": {
    "id": "5fa5",
    "label": "filter"
  },
  "ddfc": {
    "id": "ddfc",
    "label": "based on custom logic",
    "options": [
      "5fa5"
    ]
  },
  "e9ef": {
    "id": "e9ef",
    "label": "first"
  },
  "eecd": {
    "id": "eecd",
    "label": "and only the first value",
    "options": [
      "e9ef"
    ]
  },
  "4a18": {
    "id": "4a18",
    "label": "based on a given amount",
    "options": [
      "5628"
    ]
  },
  "540a": {
    "id": "540a",
    "label": "takeWhile"
  },
  "b42e": {
    "id": "b42e",
    "label": "based on custom logic",
    "options": [
      "540a"
    ]
  },
  "94e7": {
    "id": "94e7",
    "label": "if they are at the start of the Observable",
    "options": [
      "eecd",
      "4a18",
      "b42e"
    ]
  },
  "eb2d": {
    "id": "eb2d",
    "label": "elementAt"
  },
  "0d95": {
    "id": "0d95",
    "label": "if they are exactly the n-th emission",
    "options": [
      "eb2d"
    ]
  },
  "6f59": {
    "id": "6f59",
    "label": "last"
  },
  "b672": {
    "id": "b672",
    "label": "and only the last value",
    "options": [
      "6f59"
    ]
  },
  "0b1d": {
    "id": "0b1d",
    "label": "takeLast"
  },
  "1da0": {
    "id": "1da0",
    "label": "based on a given amount",
    "options": [
      "0b1d"
    ]
  },
  "fbea": {
    "id": "fbea",
    "label": "if they are at the end of the Observable",
    "options": [
      "b672",
      "1da0"
    ]
  },
  "6ebd": {
    "id": "6ebd",
    "label": "takeUntil"
  },
  "ad6f": {
    "id": "ad6f",
    "label": "until another Observable emits a value",
    "options": [
      "6ebd"
    ]
  },
  "697a": {
    "id": "697a",
    "label": "I want to allow some values to pass",
    "options": [
      "ddfc",
      "94e7",
      "0d95",
      "fbea",
      "ad6f"
    ]
  },
  "afba": {
    "id": "afba",
    "label": "ignoreElements"
  },
  "b556": {
    "id": "b556",
    "label": "altogether",
    "options": [
      "afba"
    ]
  },
  "252d": {
    "id": "252d",
    "label": "skip"
  },
  "88ea": {
    "id": "88ea",
    "label": "based on a given amount",
    "options": [
      "252d"
    ]
  },
  "1f2a": {
    "id": "1f2a",
    "label": "skipWhile"
  },
  "c61e": {
    "id": "c61e",
    "label": "from the start of the Observable",
    "options": [
      "88ea",
      "2404"
    ]
  },
  "2ab5": {
    "id": "2ab5",
    "label": "skipLast"
  },
  "db50": {
    "id": "db50",
    "label": "from the end of the Observable",
    "options": [
      "2ab5"
    ]
  },
  "13bc": {
    "id": "13bc",
    "label": "skipUntil"
  },
  "d3db": {
    "id": "d3db",
    "label": "until another Observable emits a value",
    "options": [
      "13bc"
    ]
  },
  "2d9a": {
    "id": "2d9a",
    "label": "distinctUntilChanged"
  },
  "19d6": {
    "id": "19d6",
    "label": "emitted just before the current value",
    "options": [
      "2d9a"
    ]
  },
  "f0ec": {
    "id": "f0ec",
    "label": "distinct"
  },
  "84b0": {
    "id": "84b0",
    "label": "emitted some time in the past",
    "options": [
      "f0ec"
    ]
  },
  "1d1a": {
    "id": "1d1a",
    "label": "according to value equality",
    "options": [
      "19d6",
      "84b0"
    ]
  },
  "5f7b": {
    "id": "5f7b",
    "label": "distinctUntilKeyChanged"
  },
  "323c": {
    "id": "323c",
    "label": "emitted just before the current value",
    "options": [
      "5f7b"
    ]
  },
  "92a6": {
    "id": "92a6",
    "label": "according to a key or object property",
    "options": [
      "323c"
    ]
  },
  "02ce": {
    "id": "02ce",
    "label": "that match some previous value",
    "options": [
      "1d1a",
      "92a6"
    ]
  },
  "8b21": {
    "id": "8b21",
    "label": "throttle"
  },
  "715e": {
    "id": "715e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "8b21"
    ]
  },
  "fa6b": {
    "id": "fa6b",
    "label": "throttleTime"
  },
  "c426": {
    "id": "c426",
    "label": "where time windows are determined by a time duration",
    "options": [
      "fa6b"
    ]
  },
  "ae3f": {
    "id": "ae3f",
    "label": "by emitting the first value in each time window",
    "options": [
      "715e",
      "c426"
    ]
  },
  "3d0d": {
    "id": "3d0d",
    "label": "audit"
  },
  "3d82": {
    "id": "3d82",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3d0d"
    ]
  },
  "bb37": {
    "id": "bb37",
    "label": "where time windows are determined by a time duration",
    "options": [
      "2186"
    ]
  },
  "42bc": {
    "id": "42bc",
    "label": "by emitting the last value in each time window",
    "options": [
      "3d82",
      "bb37"
    ]
  },
  "dc22": {
    "id": "dc22",
    "label": "debounce"
  },
  "7e43": {
    "id": "7e43",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "dc22"
    ]
  },
  "fecd": {
    "id": "fecd",
    "label": "debounceTime"
  },
  "4e29": {
    "id": "4e29",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "fecd"
    ]
  },
  "4d9b": {
    "id": "4d9b",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "7e43",
      "4e29"
    ]
  },
  "9e91": {
    "id": "9e91",
    "label": "that occur too frequently",
    "options": [
      "ae3f",
      "42bc",
      "4d9b"
    ]
  },
  "d606": {
    "id": "d606",
    "label": "I want to ignore values",
    "options": [
      "b556",
      "c61e",
      "db50",
      "d3db",
      "02ce",
      "9e91"
    ]
  },
  "c82c": {
    "id": "c82c",
    "label": "reduce"
  },
  "62aa": {
    "id": "62aa",
    "label": "and only output the final computed value",
    "options": [
      "c82c"
    ]
  },
  "a1fd": {
    "id": "a1fd",
    "label": "scan"
  },
  "f458": {
    "id": "f458",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "a1fd"
    ]
  },
  "6cba": {
    "id": "6cba",
    "label": "mergeScan"
  },
  "c86f": {
    "id": "c86f",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "62aa",
      "f458",
      "9654"
    ]
  },
  "197c": {
    "id": "197c",
    "label": "materialize"
  },
  "ebb6": {
    "id": "ebb6",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "197c"
    ]
  },
  "14a0": {
    "id": "14a0",
    "label": "timeInterval"
  },
  "83c5": {
    "id": "83c5",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "14a0"
    ]
  },
  "c118": {
    "id": "c118",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "ebb6",
      "83c5"
    ]
  },
  "5d3a": {
    "id": "5d3a",
    "label": "timeout"
  },
  "c78a": {
    "id": "c78a",
    "label": "I want to throw an error",
    "options": [
      "5d3a"
    ]
  },
  "935f": {
    "id": "935f",
    "label": "timeoutWith"
  },
  "7e33": {
    "id": "7e33",
    "label": "I want to switch to another Observable",
    "options": [
      "935f"
    ]
  },
  "c129": {
    "id": "c129",
    "label": "after a period of inactivity",
    "options": [
      "c78a",
      "7e33"
    ]
  },
  "f58f": {
    "id": "f58f",
    "label": "single"
  },
  "e7a5": {
    "id": "e7a5",
    "label": "count"
  },
  "5e69": {
    "id": "5e69",
    "label": "I want to know how many values it emits",
    "options": [
      "e7a5"
    ]
  },
  "9db4": {
    "id": "9db4",
    "label": "startWith"
  },
  "de30": {
    "id": "de30",
    "label": "I want to prepend one value",
    "options": [
      "9db4"
    ]
  },
  "a359": {
    "id": "a359",
    "label": "delay"
  },
  "7ceb": {
    "id": "7ceb",
    "label": "based on a given amount of time",
    "options": [
      "a359"
    ]
  },
  "bfb0": {
    "id": "bfb0",
    "label": "based on the emissions of another Observable",
    "options": [
      "2269"
    ]
  },
  "d8a9": {
    "id": "d8a9",
    "label": "I want to delay the emissions",
    "options": [
      "7ceb",
      "bfb0"
    ]
  },
  "5af4": {
    "id": "5af4",
    "label": "toArray"
  },
  "703d": {
    "id": "703d",
    "label": "and convert to an array",
    "options": [
      "5af4"
    ]
  },
  "ad19": {
    "id": "ad19",
    "label": "Observable",
    "method": "toPromise"
  },
  "bb52": {
    "id": "bb52",
    "label": "and convert to a Promise",
    "options": [
      "ad19"
    ]
  },
  "088f": {
    "id": "088f",
    "label": "until the Observable completes",
    "options": [
      "703d",
      "bb52"
    ]
  },
  "a949": {
    "id": "a949",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "6638"
    ]
  },
  "85a9": {
    "id": "85a9",
    "label": "partition"
  },
  "a500": {
    "id": "a500",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "85a9"
    ]
  },
  "b165": {
    "id": "b165",
    "label": "and emit the group as an array",
    "options": [
      "1055"
    ]
  },
  "4bf2": {
    "id": "4bf2",
    "label": "windowCount"
  },
  "6ff3": {
    "id": "6ff3",
    "label": "in batches of a particular size",
    "options": [
      "b165",
      "9055"
    ]
  },
  "b2f5": {
    "id": "b2f5",
    "label": "windowTime"
  },
  "cb90": {
    "id": "cb90",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b2f5"
    ]
  },
  "02f8": {
    "id": "02f8",
    "label": "based on time",
    "options": [
      "1904",
      "cb90"
    ]
  },
  "adbe": {
    "id": "adbe",
    "label": "and emit the group as an array",
    "options": [
      "9492"
    ]
  },
  "4eac": {
    "id": "4eac",
    "label": "window"
  },
  "45c9": {
    "id": "45c9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4eac"
    ]
  },
  "dd19": {
    "id": "dd19",
    "label": "until another Observable emits",
    "options": [
      "adbe",
      "45c9"
    ]
  },
  "8fe4": {
    "id": "8fe4",
    "label": "bufferWhen"
  },
  "191d": {
    "id": "191d",
    "label": "and emit the group as an array",
    "options": [
      "8fe4"
    ]
  },
  "142d": {
    "id": "142d",
    "label": "windowWhen"
  },
  "d90f": {
    "id": "d90f",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "191d",
      "1038"
    ]
  },
  "b6c9": {
    "id": "b6c9",
    "label": "bufferToggle"
  },
  "19eb": {
    "id": "19eb",
    "label": "windowToggle"
  },
  "bd26": {
    "id": "bd26",
    "label": "and emit the group as a nested Observable",
    "options": [
      "19eb"
    ]
  },
  "9ecc": {
    "id": "9ecc",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "8227",
      "bd26"
    ]
  },
  "b9e7": {
    "id": "b9e7",
    "label": "groupBy"
  },
  "74fa": {
    "id": "74fa",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "b9e7"
    ]
  },
  "d54e": {
    "id": "d54e",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "9167"
    ]
  },
  "afa9": {
    "id": "afa9",
    "label": "mergeMap"
  },
  "caea": {
    "id": "caea",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "afa9"
    ]
  },
  "ed9c": {
    "id": "ed9c",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "d54e",
      "caea"
    ]
  },
  "6a94": {
    "id": "6a94",
    "label": "concatMapTo"
  },
  "7a9f": {
    "id": "7a9f",
    "label": "concatMap"
  },
  "bc8d": {
    "id": "bc8d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7a9f"
    ]
  },
  "2edb": {
    "id": "2edb",
    "label": "switchMapTo"
  },
  "0e4f": {
    "id": "0e4f",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2edb"
    ]
  },
  "a154": {
    "id": "a154",
    "label": "switchMap"
  },
  "fbd4": {
    "id": "fbd4",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a154"
    ]
  },
  "727f": {
    "id": "727f",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "0e4f",
      "fbd4"
    ]
  },
  "90ea": {
    "id": "90ea",
    "label": "exhaustMap"
  },
  "f24d": {
    "id": "f24d",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "90ea"
    ]
  },
  "8d97": {
    "id": "8d97",
    "label": "expand"
  },
  "0baf": {
    "id": "0baf",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "8d97"
    ]
  },
  "4a53": {
    "id": "4a53",
    "label": "pipe"
  },
  "07fe": {
    "id": "07fe",
    "label": "I want to perform custom operations",
    "options": [
      "4a53"
    ]
  },
  "68df": {
    "id": "68df",
    "label": "share"
  },
  "6ba1": {
    "id": "6ba1",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "68df"
    ]
  },
  "293c": {
    "id": "293c",
    "label": "publish"
  },
  "83de": {
    "id": "83de",
    "label": "and start it manually or imperatively",
    "options": [
      "293c"
    ]
  },
  "68ff": {
    "id": "68ff",
    "label": "using a conventional Subject",
    "options": [
      "6ba1",
      "83de"
    ]
  },
  "7edf": {
    "id": "7edf",
    "label": "publishBehavior"
  },
  "dff6": {
    "id": "dff6",
    "label": "using a BehaviorSubject",
    "options": [
      "7edf"
    ]
  },
  "0923": {
    "id": "0923",
    "label": "publishReplay"
  },
  "b979": {
    "id": "b979",
    "label": "using a ReplaySubject",
    "options": [
      "0923"
    ]
  },
  "c468": {
    "id": "c468",
    "label": "using a specific subject implementation",
    "options": [
      "9459"
    ]
  },
  "a5ee": {
    "id": "a5ee",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "68ff",
      "dff6",
      "b979",
      "8172",
      "c468"
    ]
  },
  "c801": {
    "id": "c801",
    "label": "catchError"
  },
  "bd16": {
    "id": "bd16",
    "label": "I want to start a new Observable",
    "options": [
      "c801"
    ]
  },
  "2c6a": {
    "id": "2c6a",
    "label": "retry"
  },
  "004b": {
    "id": "004b",
    "label": "immediately",
    "options": [
      "2c6a"
    ]
  },
  "91a0": {
    "id": "91a0",
    "label": "retryWhen"
  },
  "8cfc": {
    "id": "8cfc",
    "label": "when another Observable emits",
    "options": [
      "91a0"
    ]
  },
  "49a4": {
    "id": "49a4",
    "label": "I want to re-subscribe",
    "options": [
      "004b",
      "8cfc"
    ]
  },
  "0f9e": {
    "id": "0f9e",
    "label": "when an error occurs",
    "options": [
      "bd16",
      "49a4"
    ]
  },
  "bba1": {
    "id": "bba1",
    "label": "repeat"
  },
  "ef7a": {
    "id": "ef7a",
    "label": "immediately",
    "options": [
      "bba1"
    ]
  },
  "2af3": {
    "id": "2af3",
    "label": "repeatWhen"
  },
  "a0dd": {
    "id": "a0dd",
    "label": "when another Observable emits",
    "options": [
      "2af3"
    ]
  },
  "27e0": {
    "id": "27e0",
    "label": "I want to re-subscribe",
    "options": [
      "ef7a",
      "a0dd"
    ]
  },
  "4af6": {
    "id": "4af6",
    "label": "concat"
  },
  "9e80": {
    "id": "9e80",
    "label": "I want to start a new Observable",
    "options": [
      "4af6"
    ]
  },
  "c2a5": {
    "id": "c2a5",
    "label": "when it completes",
    "options": [
      "27e0",
      "9e80"
    ]
  },
  "68f9": {
    "id": "68f9",
    "label": "finalize"
  },
  "9aec": {
    "id": "9aec",
    "label": "subscribeOn"
  },
  "b692": {
    "id": "b692",
    "label": "observeOn"
  },
  "c38e": {
    "id": "c38e",
    "label": "that routes values to observers",
    "options": [
      "b692"
    ]
  },
  "6aad": {
    "id": "6aad",
    "label": "I want to change the scheduler",
    "options": [
      "9668",
      "c38e"
    ]
  },
  "4b11": {
    "id": "4b11",
    "label": "race"
  },
  "54c6": {
    "id": "54c6",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "4b11"
    ]
  },
  "1bff": {
    "id": "1bff",
    "label": "merge"
  },
  "c217": {
    "id": "c217",
    "label": "I want to output the values from either of them",
    "options": [
      "1bff"
    ]
  },
  "cc46": {
    "id": "cc46",
    "label": "combineLatest"
  },
  "97c3": {
    "id": "97c3",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "cc46"
    ]
  },
  "c911": {
    "id": "c911",
    "label": "withLatestFrom"
  },
  "b627": {
    "id": "b627",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "97c3",
      "7152",
      "6245"
    ]
  },
  "d614": {
    "id": "d614",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "54c6",
      "c217",
      "b627"
    ]
  },
  "0645": {
    "id": "0645",
    "label": "I have one existing Observable, and",
    "options": [
      "2be7",
      "35c9",
      "00ed",
      "697a",
      "d606",
      "c86f",
      "c118",
      "c129",
      "8847",
      "5e69",
      "de30",
      "d8a9",
      "3826",
      "7950",
      "07fe",
      "a5ee",
      "0f9e",
      "c2a5",
      "2499",
      "6aad",
      "d614"
    ]
  },
  "48b3": {
    "id": "48b3",
    "label": "race"
  },
  "eb8e": {
    "id": "eb8e",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "48b3"
    ]
  },
  "03b9": {
    "id": "03b9",
    "label": "forkJoin"
  },
  "2ce2": {
    "id": "2ce2",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "03b9"
    ]
  },
  "a60b": {
    "id": "a60b",
    "label": "merge"
  },
  "d9d3": {
    "id": "d9d3",
    "label": "I want to output the values from either of them",
    "options": [
      "a60b"
    ]
  },
  "8da3": {
    "id": "8da3",
    "label": "combineLatest"
  },
  "2b89": {
    "id": "2b89",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "8da3"
    ]
  },
  "bbf7": {
    "id": "bbf7",
    "label": "using each source value only once",
    "options": [
      "1600"
    ]
  },
  "1c5b": {
    "id": "1c5b",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "2b89",
      "bbf7"
    ]
  },
  "ff9b": {
    "id": "ff9b",
    "label": "concat"
  },
  "ba6d": {
    "id": "ba6d",
    "label": "I want to subscribe to each in order",
    "options": [
      "ff9b"
    ]
  },
  "0630": {
    "id": "0630",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "eb8e",
      "2ce2",
      "d9d3",
      "1c5b",
      "ba6d"
    ]
  },
  "d4e9": {
    "id": "d4e9",
    "label": "Observable",
    "method": "create"
  },
  "0ed2": {
    "id": "0ed2",
    "label": "using custom logic",
    "options": [
      "d4e9"
    ]
  },
  "39b2": {
    "id": "39b2",
    "label": "generate"
  },
  "f832": {
    "id": "f832",
    "label": "using a state machine similar to a for loop",
    "options": [
      "39b2"
    ]
  },
  "924d": {
    "id": "924d",
    "label": "throwError"
  },
  "a347": {
    "id": "a347",
    "label": "that throws an error",
    "options": [
      "924d"
    ]
  },
  "44a3": {
    "id": "44a3",
    "label": "EMPTY"
  },
  "122a": {
    "id": "122a",
    "label": "NEVER"
  },
  "ef27": {
    "id": "ef27",
    "label": "that never emits anything",
    "options": [
      "122a"
    ]
  },
  "b7df": {
    "id": "b7df",
    "label": "fromEvent"
  },
  "3f5e": {
    "id": "3f5e",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "b7df"
    ]
  },
  "ed80": {
    "id": "ed80",
    "label": "fromEventPattern"
  },
  "77f2": {
    "id": "77f2",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "ed80"
    ]
  },
  "a8d1": {
    "id": "a8d1",
    "label": "from an existing source of events",
    "options": [
      "3f5e",
      "77f2"
    ]
  },
  "b4b5": {
    "id": "b4b5",
    "label": "from"
  },
  "2d24": {
    "id": "2d24",
    "label": "from a Promise or an event source",
    "options": [
      "b4b5"
    ]
  },
  "418b": {
    "id": "418b",
    "label": "from"
  },
  "3eba": {
    "id": "3eba",
    "label": "over the values in an array",
    "options": [
      "418b"
    ]
  },
  "5eca": {
    "id": "5eca",
    "label": "range"
  },
  "162a": {
    "id": "162a",
    "label": "over values in a numeric range",
    "options": [
      "5eca"
    ]
  },
  "fe28": {
    "id": "fe28",
    "label": "of"
  },
  "651d": {
    "id": "651d",
    "label": "over prefined values given as arguments",
    "options": [
      "fe28"
    ]
  },
  "dbcd": {
    "id": "dbcd",
    "label": "that iterates",
    "options": [
      "3eba",
      "162a",
      "651d"
    ]
  },
  "71a3": {
    "id": "71a3",
    "label": "interval"
  },
  "0da9": {
    "id": "0da9",
    "label": "regularly",
    "options": [
      "71a3"
    ]
  },
  "43a1": {
    "id": "43a1",
    "label": "timer"
  },
  "dcf2": {
    "id": "dcf2",
    "label": "with an optional initial delay",
    "options": [
      "43a1"
    ]
  },
  "9ac2": {
    "id": "9ac2",
    "label": "that emits values on a timer",
    "options": [
      "0da9",
      "dcf2"
    ]
  },
  "cd02": {
    "id": "cd02",
    "label": "defer"
  },
  "1cda": {
    "id": "1cda",
    "label": "which is built on demand when subscribed",
    "options": [
      "cd02"
    ]
  },
  "08af": {
    "id": "08af",
    "label": "I want to create a new Observable",
    "options": [
      "0ed2",
      "f832",
      "a347",
      "2334",
      "ef27",
      "a8d1",
      "2d24",
      "dbcd",
      "9ac2",
      "1cda"
    ]
  },
  "c612": {
    "id": "c612",
    "label": "supporting a conventional callback API",
    "options": [
      "2703"
    ]
  },
  "8f3f": {
    "id": "8f3f",
    "label": "bindNodeCallback"
  },
  "aa91": {
    "id": "aa91",
    "label": "supporting Node.js callback style API",
    "options": [
      "8f3f"
    ]
  },
  "0ee2": {
    "id": "0ee2",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "c612",
      "aa91"
    ]
  },
  "cce9": {
    "id": "cce9",
    "label": "I have no Observables yet, and",
    "options": [
      "08af",
      "0ee2"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "0645",
      "0630",
      "cce9"
    ]
  }
}